<?php
/**
 * Plugin Name: PPOM Addon Fancy Cropper
 * Description: PPOM ADDON - Images Cropper
 * Version: 1.5
 * License: GPLv2 or later
 * License URI: http://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain: ppom-fancycropper
 */


namespace PPOM_Pro\Addons\FancyCropper;

use PPOM_Pro\Abstract_Addon;

class FancyCropper extends Abstract_Addon {

	function run_hooks() {

		/*========== Load All PPOM Inputs ===========*/
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );

		/*========== Load FanycCropper Path ===========*/
		add_filter( 'nm_input_class-fancycropper', array( $this, 'addon_path' ), 10, 2 );

		/*========== Load PPOM Scripts ===========*/
		add_action( 'ppom_hooks_inputs', array( $this, 'hook_input_scripts' ), 10, 2 );

		/*========== Render FancyCropper Addon ===========*/
		add_action( 'ppom_rendering_inputs', array( $this, 'render_input' ), 10, 5 );

		/*========== PPOM Admin Fields Tabs ===========*/
		add_filter( 'ppom_fields_tabs_show', array( $this, 'ppom_tabs_render' ), 10, 2 );
		add_filter( 'ppom_tabs_panel_classes', array( $this, 'ppom_tabs_classes' ), 10, 1 );

		/*========== WP Rest API Hook ===========*/
		add_action( 'rest_api_init', array( $this, 'ppom_cropper_api' ) ); // endpoint url

		// Checkout Process Hook
		add_action( 'woocommerce_checkout_order_processed', array( $this, 'rename_files' ), 10, 3 );

		add_filter( 'ppom_order_display_value', array( $this, 'display_order_value' ), 10, 3 );
	}


	/*
	**========== Loading All PRO Inputs ===========
	*/
	function load_addon( $inputs_array, $inputObj ) {

		// checking fixedprice addon is enable
		$inputs_array['fancycropper'] = $inputObj->get_input( 'fancycropper' );

		return $inputs_array;
	}


	/* 
	**========== Load FancyCropper Path =========== 
	*/
	function addon_path( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.fancycropper.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}


	/*
	**========== Load All FancyCropper Scripts ===========
	*/
	function hook_input_scripts( $field, $data_name ) {

		if ( $field['type'] != 'fancycropper' ) {
			return '';
		}

		// var_dump(wp_script_is('registered'));
		/*========== Load Cropie JS Lib ===========*/
		wp_enqueue_style( 'ppom-croppie-lib' );
		wp_enqueue_script( 'ppom-croppie-lib' );

		// wp_enqueue_style('ppom-cropie-lib', $this->$this->addon_url."/css/croppie.css");
		// wp_enqueue_script('ppom-cropie-lib', $this->$this->addon_url."/js/croppie.min.js", array('jquery'), PPOM_PRO_VERSION, true);

		/*========== Load Remodal JS Lib ===========*/
		wp_enqueue_style( 'ppom-remodal-lib', $this->addon_url . '/css/ppom-remodal.css' );
		wp_enqueue_script( 'ppom-remodal-lib', $this->addon_url . '/js/ppom-remodal.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

		/*========== Load FancyCropper Scripts ===========*/
		wp_enqueue_style( 'ppom-fancycropper', $this->addon_url . '/css/fancycropper.css' );
		wp_enqueue_script( 'ppom-fancycropper', $this->addon_url . '/js/fancycropper.js', array( 'jquery' ), PPOM_PRO_VERSION );

		/*========== FancyCropper Settings ===========*/
		$field_options     = isset( $field['options'] ) ? $field['options'] : array();
		$boundary          = isset( $field['boundary'] ) ? $field['boundary'] : '';
		$defaultViewport   = isset( $field['defaultViewport'] ) ? $field['defaultViewport'] : '';
		$viewtabe_label    = ! empty( $field['viewtabe_label'] ) ? $field['viewtabe_label'] : __( 'View', 'woocommerce-product-addon' );
		$croppedtabe_label = ! empty( $field['croppedtabe_label'] ) ? $field['croppedtabe_label'] : __( 'Cropped', 'woocommerce-product-addon' );
		$files_allowed     = ! empty( $field['files_allowed'] ) ? $field['files_allowed'] : 9999;
		$file_size         = ! empty( $field['file_size'] ) ? $field['file_size'] : '9999|mb';
		$viewport_type     = ! empty( $field['viewport_type'] ) ? $field['viewport_type'] : 'square';
		$enable_quantity   = ( isset( $field['enable_quantity'] ) && $field['enable_quantity'] == 'on' ) ? true : false;
		$image_rotation    = ( isset( $field['image_rotation'] ) && $field['image_rotation'] == 'on' ) ? true : false;

		/*========== Cropie JS Lib Settings ===========*/
		$cropping_settigs                    = array();
		$enable_exif                         = ( isset( $field['enable_exif'] ) && $field['enable_exif'] == 'on' ) ? true : false;
		$enforce_boundary                    = ( isset( $field['enforce_boundary'] ) && $field['enforce_boundary'] == 'on' ) ? true : false;
		$enable_zoom                         = ( isset( $field['enable_zoom'] ) && $field['enable_zoom'] == 'on' ) ? true : false;
		$show_zoomer                         = ( isset( $field['show_zoomer'] ) && $field['show_zoomer'] == 'on' ) ? true : false;
		$enableResize                        = ( isset( $field['enableResize'] ) && $field['enableResize'] == 'on' ) ? true : false;
		$cropping_settigs['enableExif']      = $enable_exif;
		$cropping_settigs['enforceBoundary'] = $enforce_boundary;
		$cropping_settigs['enableZoom']      = $enable_zoom;
		$cropping_settigs['showZoomer']      = $show_zoomer;
		$cropping_settigs['enableResize']    = $enableResize;


		$totalPriceMsg = sprintf( __( 'Total Price : %s', 'woocommerce-product-addon' ), '%TOTALPRICE%' );
		$fileLimitMsg  = sprintf( __( 'Only %s File Allowed', 'woocommerce-product-addon' ), '%FILELIMIT%' );

		$domain = $_SERVER['HTTP_HOST'];

		// var_dump($domain);

		$local_vars = array(
			'ajaxurl'              => admin_url( 'admin-ajax.php', ( is_ssl() ? 'https' : 'http' ) ),
			'image_rotation'       => $image_rotation,
			'enableQuantity'       => $enable_quantity,
			'cropper_options'      => $field_options,
			'boundary'             => $boundary,
			'defaultViewport'      => $defaultViewport,
			'croppedtabe_label'    => $croppedtabe_label,
			'viewtabe_label'       => $viewtabe_label,
			'fileAllowed'          => $files_allowed,
			'fileSize'             => $file_size,
			'viewportType'         => $viewport_type,
			'cropieBasic_settings' => $cropping_settigs,
			'totalPriceMsg'        => $totalPriceMsg,
			'fileLimitMsg'         => $fileLimitMsg,
			'saveBtnMsg'           => __( 'Save Images', 'woocommerce-product-addon' ),
			'firstOptionText'      => __( 'Choose Option', 'woocommerce-product-addon' ),
			'vpApplyBtnLabel'      => __( 'Apply', 'woocommerce-product-addon' ),
			'vpOptionAlertMsg'     => __( 'Please Select Option', 'woocommerce-product-addon' ),
			'croppedImgAlertMsg'   => __( 'Image Cropped Successfully', 'woocommerce-product-addon' ),
			'emptyImagesMsg'       => __( 'No Cropped Images Found', 'woocommerce-product-addon' ),
			'domain'               => $domain,
			'cropper_reset'        => get_rest_url( null, 'ppom/v1/save-cropped-images' ),
		);

		wp_localize_script( 'ppom-fancycropper', "ppom_fancycropper{$data_name}_vars", $local_vars );
	}


	/*
	**========== Render FancyCropper Input ===========
	*/
	function render_input( $meta, $data_name, $classes, $field_label, $options ) {

		if ( $meta['type'] != 'fancycropper' ) {
			return '';
		}

		$meta['id']          = $data_name;
		$input_wrapper_class = 'form-group';
		$input_wrapper_class = 'ppom-input-eventcalendar';
		$input_wrapper_class = apply_filters( 'ppom_input_wrapper_class', $input_wrapper_class, $meta );

		$type     = $meta['type'];
		$id       = $data_name;
		$label    = $field_label;
		$modal_id = "modal-{$data_name}";

		$html  = '';
		$html .= '<div class="' . esc_attr( $input_wrapper_class ) . '">';

		if ( $field_label ) {
			$html .= '<label class="form-control-label" for="' . esc_attr( $data_name ) . '">';
			$html .= sprintf( __( '%s', 'woocommerce-product-addon' ), $field_label ) . '</label>';
		}

		ob_start();
		$templates_name = 'fancycropper.php';
		$template_vars  = array( 'meta' => $meta );
		$this->load_template( $templates_name, $template_vars );
		$html .= ob_get_clean();

		$html .= '</div>';    // form-group

		echo apply_filters( 'ppom_fancycropper_html', $html, $meta );
	}


	/*
	**========== Save All Images By API  ===========
	*/
	function ppom_cropper_api() {

		register_rest_route(
			'ppom/v1',
			'/save-cropped-images/',
			array(
				'methods'             => 'POST',
				'callback'            => array(
					$this,
					'save_images',
				),
				'permission_callback' => '__return_true',
			) 
		);
	}


	/*
	**========== Rest API Callback  ===========
	*/
	function save_images() {

		if ( ! isset( $_POST['cropped_meta']['cropped'] ) ) {
			return '';
		}

		if ( isset( $_POST['cropped_meta'] ) && ! empty( $_POST['cropped_meta'] ) ) {

			$croppedMeta   = array();
			$response_meta = array();

			$product_id = isset( $_POST['cropped_meta']['productID'] ) ? $_POST['cropped_meta']['productID'] : '';
			$imageURL   = isset( $_POST['cropped_meta']['imageURL'] ) ? $_POST['cropped_meta']['imageURL'] : '';
			$popupID    = isset( $_POST['popupID'] ) ? $_POST['popupID'] : '';
			$fileName   = isset( $_POST['cropped_meta']['fileName'] ) ? $_POST['cropped_meta']['fileName'] : '';
			$fieldID    = isset( $_POST['cropped_meta']['fieldID'] ) ? $_POST['cropped_meta']['fieldID'] : '';
			$totalPrice = isset( $_POST['cropped_meta']['totalPrice'] ) ? $_POST['cropped_meta']['totalPrice'] : '';

			$cartPrice = 0;
			foreach ( $_POST['cropped_meta']['cropped'] as $random => $image_data ) {

				$quantity  = ( isset( $image_data['qty'] ) && $image_data['qty'] != '' ) ? $image_data['qty'] : 1;
				$image     = isset( $image_data['croppedURL'] ) ? $image_data['croppedURL'] : '';
				$data_name = isset( $image_data['data_name'] ) ? $image_data['data_name'] : '';

				// Generated Cropped Images To PNG & Saved
				$cropped_file = "cropped-image-{$random}-{$data_name}-{$quantity}.png";
				$cropped_file = ppom_file_get_name( $cropped_file, $product_id );
				ppom_save_data_url_to_image( $image, $cropped_file );
				$image_data['croppedURL'] = $cropped_file;

				$croppedMeta['cropped'][ $random ] = $image_data;

				$cartPrice += floatval( $image_data['raw_price'] ) * intval( $image_data['qty'] );
			}

			$croppedMeta['data_name'] = $fieldID;

			$info     = pathinfo( $fileName );
			$fileName = basename( $fileName, '.' . $info['extension'] );

			$mainfile = "image-{$popupID}-{$data_name}-{$fileName}.png";
			$mainfile = ppom_file_get_name( $mainfile, $product_id );
			ppom_save_data_url_to_image( $imageURL, $mainfile );
			$croppedMeta['imageURL']   = $mainfile;
			$croppedMeta['totalPrice'] = $totalPrice;
			$croppedMeta['cartPrice']  = $cartPrice;
			$croppedMeta['fileName']   = $fileName;

			$response_meta = array(
				'status'      => 'success',
				'message'     => __( 'All Images Saved Successfully', 'woocommerce-product-addon' ),
				'cropperMeta' => $croppedMeta,
			);

		} else {

			$response_meta = array(
				'status'  => 'error',
				'message' => __( 'Error! Please Contact To Admin', 'woocommerce-product-addon' ),
			);
		}

		wp_send_json( $response_meta );
	}

	/*
	**========== PPOM Admin Tabs =========== 
	*/
	function ppom_tabs_render( $tabs, $fields_type ) {

		if ( $fields_type == 'fancycropper' ) {

			foreach ( $tabs as $tab_key => $tab_meta ) {
				if ( $tab_key == 'add_option_tab' ) {
					$tabs['add_option_tab']['field_depend'] = array( 'fancycropper' );
				}
			}
		}
		$tabs['file_label_tab'] = array(
			'label'        => __( 'Label Settings', 'woocommerce-product-addon' ),
			'class'        => array( 'ppom-tabs-label' ),
			'field_depend' => array( 'fancycropper' ),
		);

		return $tabs;
	}


	/*
	**============= Show tabs panel classes ================
	*/
	function ppom_tabs_classes( $settings ) {

		foreach ( $settings as $fields_meta_key => $meta ) {

			$type = isset( $meta['type'] ) ? $meta['type'] : '';

			if ( $fields_meta_key == 'uploadbtn_lable' ) {
				$settings['uploadbtn_lable']['tabs_class']   = array( 'ppom_handle_file_label_tab', 'col-md-6' );
				$settings['dragdrop_label']['tabs_class']    = array( 'ppom_handle_file_label_tab', 'col-md-6' );
				$settings['viewtabe_label']['tabs_class']    = array( 'ppom_handle_file_label_tab', 'col-md-6' );
				$settings['croppedtabe_label']['tabs_class'] = array( 'ppom_handle_file_label_tab', 'col-md-6' );
			}
		}

		return $settings;
	}


	/*
	**============= Moved The Cropped Files ================
	*/
	function rename_files( $order_id, $posted_data, $order ) {

		$cropped_dir_path = ppom_get_dir_path( 'cropped' );

		foreach ( WC()->cart->get_cart() as $cart_item_key => $cart_item ) {

			if ( ! isset( $cart_item['ppom']['fields'] ) ) {
				continue;
			}

			$product_id = isset( $cart_item['product_id'] ) ? $cart_item['product_id'] : 0;

			foreach ( $cart_item['ppom']['fields'] as $data_name => $values ) {

				if ( $data_name == 'id' ) {
					continue;
				}

				$field_meta = ppom_get_field_meta_by_dataname( $product_id, $data_name );

				if ( ! $field_meta ) {
					continue;
				}

				$field_type = isset( $field_meta['type'] ) ? $field_meta['type'] : '';

				if ( $field_type == 'fancycropper' ) {

					$file_metadata = isset( $cart_item['ppom']['fields'][ $data_name ] ) ? $cart_item['ppom']['fields'][ $data_name ] : array();

					foreach ( $file_metadata as $popup_id => $crooper_meta ) {

						$fomatted_data = json_decode( stripcslashes( $crooper_meta ), true );

						$original_file_url = isset( $fomatted_data['imageURL'] ) ? $fomatted_data['imageURL'] : '';

						$confirm_original_dir = 'confirmed/' . $order_id;
						$confirm_original_dir = ppom_get_dir_path( $confirm_original_dir );
						$original_source_file = $cropped_dir_path . $original_file_url;
						$destination_path_1   = $confirm_original_dir . $original_file_url;

						if ( file_exists( $destination_path_1 ) ) {
							break;
						}

						$this->rename_files_process( $original_source_file, $destination_path_1 );

						foreach ( $fomatted_data['cropped'] as $cropped_id => $cropped_meta ) {

							$file_name = isset( $cropped_meta['croppedURL'] ) ? $cropped_meta['croppedURL'] : '';
							$qty       = isset( $cropped_meta['qty'] ) ? $cropped_meta['qty'] : '';
							$label     = isset( $cropped_meta['label'] ) ? $cropped_meta['label'] : '';

							$confirm_cropped_dir = 'confirmed/' . $order_id . '/cropped';
							$confirm_cropped_dir = ppom_get_dir_path( $confirm_cropped_dir );

							$source_file        = $cropped_dir_path . $file_name;
							$destination_path_2 = $confirm_cropped_dir . $file_name;

							if ( file_exists( $destination_path_2 ) ) {
								break;
							}

							$this->rename_files_process( $source_file, $destination_path_2 );

						}
					}
				}
			}
		}
	}


	/*
	**============= Files Rename Processing ================
	*/
	function rename_files_process( $source_file, $destination_path ) {

		if ( file_exists( $source_file ) ) {
			if ( ! rename( $source_file, $destination_path ) ) {
				die( 'Error while re-naming order image ' . $source_file );
			}
		}
	}


	/*
	**============= Order HTML ================
	*/
	function display_order_value( $display_value, $meta, $item ) {

		$field_meta = ppom_get_field_meta_by_dataname( $item->get_product_id(), $meta->key );
		$input_type = isset( $field_meta['type'] ) ? $field_meta['type'] : '';
		$data_name  = isset( $field_meta['data_name'] ) ? $field_meta['data_name'] : '';

		if ( $input_type == 'fancycropper' ) {

			$display_value = $this->generate_fancycropper_order_html( $meta->value, $input_type, $item, $data_name );
		}

		return $display_value;
	}

	function generate_fancycropper_order_html( $file_names, $input_type, $item, $data_name ) {

		$item_meta          = $item->get_meta( '_ppom_fields' );
		$ppom_cropped_items = $item_meta['fields'][ $data_name ];

		$ppom_html = '';

		$ppom_html .= '<table class="table table-bordered">';
		foreach ( $ppom_cropped_items as $popupID => $image_data ) {

			$fomatted_data = json_decode( stripcslashes( $image_data ), true );

			$imageURL = isset( $fomatted_data['imageURL'] ) ? $fomatted_data['imageURL'] : '';
			$imageURL = ppom_get_dir_url() . 'confirmed/' . $item->get_order_id() . '/' . $imageURL;
			$fileName = isset( $fomatted_data['fileName'] ) ? $fomatted_data['fileName'] : '';

			$fileName = substr( $fileName, 0, strrpos( $fileName, '.' ) );

			$ppom_html .= '<tr>';
			$ppom_html .= '<td>';
			$ppom_html .= '<a href="' . esc_url( $imageURL ) . '"><img class="img-thumbnail" style="width:' . esc_attr( ppom_get_thumbs_size() ) . '" src="' . esc_url( $imageURL ) . '" title="' . esc_attr( $fileName ) . '"></a>';
			$ppom_html .= '</td>';
			$ppom_html .= '<td>' . __( 'Original Image', 'woocommerce-product-addon' ) . '</td>';
			$ppom_html .= '</tr>';

			foreach ( $fomatted_data['cropped'] as $cropped_id => $cropped_meta ) {

				$file_name = isset( $cropped_meta['croppedURL'] ) ? $cropped_meta['croppedURL'] : '';
				$qty       = isset( $cropped_meta['qty'] ) ? $cropped_meta['qty'] : '';
				$label     = ! empty( $cropped_meta['label'] ) ? $cropped_meta['label'] : __( 'Cropped', 'woocommerce-product-addon' );

				$qtylabel    = "{$label} x {$qty}";
				$cropped_url = ppom_get_dir_url() . 'confirmed/' . $item->get_order_id() . '/cropped/' . $file_name;

				$ppom_html .= '<tr>';
				$ppom_html .= '<td>';
				$ppom_html .= '<a href="' . esc_url( $cropped_url ) . '" class="lightbox">';
				$ppom_html .= '<img class="img-thumbnail" style="width:' . esc_attr( ppom_get_thumbs_size() ) . '" src="' . esc_url( $cropped_url ) . '">';
				$ppom_html .= '</a>';
				$ppom_html .= '</td>';
				$ppom_html .= '<td>' . $qtylabel . '</td>';
				$ppom_html .= '</tr>';
			}
		}

		$ppom_html .= '</table>';


		return apply_filters( 'ppom_fancycropper_order_files_html', $ppom_html, $file_names, $input_type, $item );
	}
}
