<?php
/**
 * Plugin Name: PPOM Addon: Domain Checker
 * Description: A PRO Addon to check domain availability via phpwois function
 * Version: 1.3
 * License: GPLv2 or later
 * License URI: http://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain: ppom-addon-bulkquantity
 */

namespace PPOM_Pro\Addons\Domain;

use PPOM_Pro\Abstract_Addon;

class Domain extends Abstract_Addon {
	public function __construct( $slug ) {
		parent::__construct( $slug );

		require $this->addon_path . '/tlds.php';
	}


	function run_hooks() {
		add_action( 'ppom_hooks_inputs', array( $this, 'hook_input_scripts' ), 10, 2 );

		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );

		// File path
		add_filter( 'nm_input_class-domain', array( $this, 'domain_path' ), 10, 2 );

		add_action( 'ppom_rendering_inputs', array( $this, 'render_input_domain' ), 10, 5 );

		// Ajax callback
		add_action( 'wp_ajax_ppom_check_domain_availability', array( $this, 'check_domain' ) );
		add_action( 'wp_ajax_nopriv_ppom_check_domain_availability', array( $this, 'check_domain' ) );

	}

	function hook_input_scripts( $field, $data_name ) {
		if ( $field['type'] != 'domain' ) {
			return '';
		}
		// Customized js
		$localization = array( 'ajaxurl' => admin_url( 'admin-ajax.php', ( is_ssl() ? 'https' : 'http' ) ), 'i18n' => array( 'pleaseWait'=>esc_html__('Please wait...', 'woocommerce-product-addon') ) );
		wp_register_script( 'ppom-domain', $this->addon_url . '/domain.js', '', PPOM_VERSION );
		wp_localize_script( 'ppom-domain', 'ppom_domain', $localization );
		wp_enqueue_script( 'ppom-domain' );
	}

	// Loading all PRO inputs
	function load_addon( $inputs_array, $inputObj ) {

		// checking domain addon is enable
		$inputs_array['domain'] = $inputObj->get_input( 'domain' );

		return $inputs_array;
	}

	function domain_path( $path, $type ) {
		if ( file_exists( $this->addon_path . '/classes/input.domain.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}

	function render_input_domain( $meta, $data_name, $classes, $field_label, $options ) {

		if ( $meta['type'] != 'domain' ) {
			return '';
		}

		$btn_label   = isset( $meta['button_label'] ) ? $meta['button_label'] : __( 'Search', 'woocommerce-product-addon' );
		$btn_class   = isset( $meta['button_class'] ) ? $meta['button_class'] : '';
		$placeholder = isset( $meta['placeholder'] ) ? $meta['placeholder'] : '';
		if ( $placeholder == '' ) {
			$placeholder = __( 'Type domain and press Enter', 'woocommerce-product-addon' );
		}

		$meta['id']          = $data_name;
		$input_wrapper_class = 'form-group';
		$input_wrapper_class = apply_filters( 'ppom_input_wrapper_class', $input_wrapper_class, $meta );

		$html = '<div class="' . esc_attr( $input_wrapper_class ) . '">';

		if ( $field_label ) {
			$html .= '<label class="form-control-label" for="' . $data_name . '">';
			$html .= sprintf( __( '%s', 'woocommerce-product-addon' ), $field_label ) . '</label>';
		}

		$html .= '<input class="ppom-domain-picker form-control" id="' . esc_attr( $data_name ) . '" ';
		$html .= 'placeholder="' . esc_attr( $placeholder ) . '" ';
		$html .= 'name="ppom[fields][' . esc_attr( $data_name ) . '][]" ';

		if ( isset( $meta['required'] ) && $meta['required'] == 'on' ) {

			$html .= 'required ';
		}

		$html .= '/>';
		$html .= '<div style="margin:10px auto" class="ppom-coordinate-' . esc_attr( $data_name ) . '"></div>';
		$html .= '<div style="margin:10px auto" id="ppom-domain-result-' . esc_attr( $data_name ) . '"></div>';

		$html .= '<div class="ppom-search-domain-button">';
		$html .= '<a href="#" data-id="' . esc_attr( $data_name ) . '" class="ppom-domain-button ' . esc_attr( $btn_class ) . '">' . $btn_label . '</a>';
		$html .= '</div>';

		$html .= '</div>';    // form-group

		echo apply_filters( 'ppom_domain_html', $html );
	}


	function check_domain() {

		if ( ! isset( $_POST['domain_name'] ) && $_POST['domain_name'] == '' ) {

			$response = array(
				'status'  => 'error',
				'message' => __( 'Domain name is not defined', 'woocommerce-product-addon' ),
			);

			wp_send_json( $response );
		}

		$data_name  = $_POST['field_id'];
		$product_id = $_POST['product_id'];

		$field = ppom_get_field_meta_by_dataname( $product_id, $data_name );

		$available_message    = trim( $field['available_message'] );
		$notavailable_message = trim( $field['notavailable_message'] );

		$available_message    = empty( $available_message ) ? 'Domain name is available.' : $available_message;
		$notavailable_message = empty( $notavailable_message ) ? 'Domain is already registered.' : $notavailable_message;

		$invalide_domain_message = 'Domain name not valid';

		$domain_name = trim( $_POST['domain_name'] );

		$domain = $domain_name;

		if ( ! $this->tld_allowed( $domain ) ) {

			$message         = sprintf( __( '%s', 'woocommerce-product-addon' ), $invalide_domain_message );
			$domain_avaiable = 'no';
			$response        = array(
				'status'    => 'success',
				'message'   => $message,
				'result'    => '',
				'available' => $domain_avaiable,
			);
			wp_send_json( $response );
		}

		// Since version 1.3 using PHP function for domain checking: gethostbyname

		$ip      = gethostbyname( $domain );
		$message = '';

		if ( $ip == $domain ) {
			$message  = sprintf( __( '%s', 'woocommerce-product-addon' ), $available_message );
			$response = array(
				'status'    => 'success',
				'message'   => stripslashes( $message ),
				'result'    => $result,
				'available' => 'yes',
			);
		} else {
			$message  = sprintf( __( '%s', 'woocommerce-product-addon' ), $notavailable_message );
			$response = array(
				'status'    => 'success',
				'message'   => stripslashes( $message ),
				'result'    => $result,
				'available' => 'no',
			);
		}

		wp_send_json( $response );
		exit;
	}

	function tld_allowed( $domain ) {

		$parts = explode( '.', $domain );

		$tld = end( $parts );

		if ( empty( $tld ) ) {
			return false;
		}

		$tld_list = ppom_get_valid_tlds();

		$is_valid = false;
		if ( array_key_exists( $tld, $tld_list ) ) {
			$is_valid = true;
		}

		// var_dump($is_valid);
		return apply_filters( 'ppom_tld_allowed', $is_valid, $tld );
	}
}
