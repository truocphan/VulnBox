<?php
/**
 * Plugin Name: PPOM Addon Word/Character Counter
 * Description: An addon to PPOM
 * Version: 1.3
 * Text Domain: ppom-textcounter
 * Domain Path: /languages
 * License: GPL2
 */

namespace PPOM_Pro\Addons\TextCounter;

use PPOM_Pro\Abstract_Addon;

class TextCounter extends Abstract_Addon {

	function run_hooks() {
		add_action( 'init', array( $this, 'i18n_setup' ) );

		// Load action for input scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'hook_input_scripts' ), 10, 2 );

		// Rendering textcounter inputs
		add_action( 'ppom_rendering_inputs', array( $this, 'render_input_textcounter' ), 10, 5 );

		// File path
		add_filter( 'nm_input_class-textcounter', array( $this, 'addon_path_textcounter' ), 10, 2 );

		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );
	}


	/*
	**============= Load scripts ================
	*/
	function hook_input_scripts( $field, $data_name ) {

		if ( $field['type'] != 'textcounter' ) {
			return '';
		}


		$count_type = $field['count_type'] == 'character' ? __( 'Character', 'woocommerce-product-addon' ) : __( 'Word', 'woocommerce-product-addon' );

		$count_price = isset( $field['count_price'] ) ? wc_price( $field['count_price'] ) : '';

		$limit_message = sprintf( __( '%s Limit', 'woocommerce-product-addon' ), $count_type );
		$price_message = sprintf( __( 'Price/%1$s: %2$s', 'woocommerce-product-addon' ), $count_type, $count_price );

		$localize_vars = array();

		// ppom_pa($localize_vars);
		if ( $field['type'] == 'textcounter' ) {

			$counter_name = $field['data_name'];
			wp_enqueue_style( 'ppom-textcounter', $this->addon_url . '/css/textcounter.css' );
			wp_enqueue_script( 'ppom-textcounter', $this->addon_url . '/js/ppom-textcounter.js', array( 'jquery' ), PPOM_PRO_VERSION, true );
			wp_enqueue_script( 'ppom-textcounter-lib', $this->addon_url . '/js/textcounter.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

			$localize_vars = array(
				'ppom_limit_label' => $limit_message,
				'ppom_price_label' => $price_message,
			);

			// echo "ppom_textcounter_{$counter_name}_vars";
			wp_localize_script( 'ppom-textcounter', "ppom_textcounter_{$counter_name}_vars", $localize_vars );
		}
	}

	function i18n_setup() {

		$loadedok = load_plugin_textdomain( 'ppom-textcounter', false, basename( dirname( __FILE__ ) ) . '/languages' );
	}

	/*
	**============= Textcounter inputs path load ================
	*/
	function addon_path_textcounter( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.textcounter.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}


	/*
	**============= Loading all PRO inputs ================
	*/
	function load_addon( $inputs_array, $inputObj ) {

		// checking textcounter addon is enable
		$inputs_array['textcounter'] = $inputObj->get_input( 'textcounter' );

		return $inputs_array;
	}


	/*
	**============= Frontent meta rendering ================
	*/
	function render_input_textcounter( $meta, $data_name, $classes, $field_label, $options ) {

		if ( $meta['type'] != 'textcounter' ) {
			return '';
		}
		$meta['id']          = $data_name;
		$input_wrapper_class = 'form-group';
		$input_wrapper_class = apply_filters( 'ppom_input_wrapper_class', $input_wrapper_class, $meta );
		$textarea_row        = isset( $meta['textarea_row'] ) ? $meta['textarea_row'] : 3;
		$enable_textinput    = isset( $meta['enable_textinput'] ) ? $meta['enable_textinput'] : '';


		// Defaul/Cart Edit/Post Value
		$default_val = '';
		if ( isset( $_POST['ppom']['fields'][ $data_name ] ) && ! empty( $_POST['ppom']['fields'][ $data_name ] ) ) {
			$default_val = $_POST['ppom']['fields'][ $data_name ];
		} elseif ( isset( $_GET[ $data_name ] ) && ! empty( $_GET[ $data_name ] ) ) {
			$default_val = $_GET[ $data_name ];
		}

		$html  = '';
		$html .= '<div class="' . esc_attr( $input_wrapper_class ) . '">';

		if ( $field_label ) {
			$html .= '<label class="form-control-label" for="' . esc_attr( $data_name ) . '">';
			$html .= sprintf( __( '%s', 'woocommerce-product-addon' ), $field_label ) . '</label>';
		}

		if ( $enable_textinput == 'on' ) {
			$html .= '<input type="text" id="' . esc_attr( $data_name ) . '" class="form-control ppom-textcounter" value="' . esc_attr( $default_val ) . '">';
		} else {
			$html .= '<textarea id="' . esc_attr( $data_name ) . '" class="form-control ppom-textcounter" ';
			$html .= 'rows="' . esc_attr( $textarea_row ) . '">' . $default_val . '</textarea>';
		}


		$html .= '</div>';    // form-group

		echo apply_filters( 'ppom_textcounter_html', $html );
	}
}
