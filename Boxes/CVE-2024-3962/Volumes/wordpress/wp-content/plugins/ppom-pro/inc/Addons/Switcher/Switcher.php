<?php
/**
 * Plugin Name: PPOM Switcher Add-on
 * Description: PPOM Switcher Addon render a switcher type radio control to make your product more beautiful. Image can also be changed with each option
 * Version: 1.0
 * Text Domain: ppom-switcher
 * License: GPL2
 */

namespace PPOM_Pro\Addons\Switcher;

use PPOM_Pro\Abstract_Addon;

class Switcher extends Abstract_Addon {
	function run_hooks() {
		// File path
		add_filter( 'nm_input_class-switcher', array( $this, 'addon_sw_path' ), 19, 2 );
		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );
		// Load Custom Scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'load_scripts' ), 10, 2 );
		// Admin Setting filter
		add_filter( 'render_input_types', array( $this, 'ppom_render_admin_settings' ), 10, 6 );

		add_action( 'ppom_rendering_inputs_switcher', array( $this, 'render_input' ), 10, 5 );

		// PPOM Admin Tabs
		add_filter( 'ppom_fields_tabs_show', array( $this, 'ppom_tabs_render' ), 10, 2 );
		add_filter( 'ppom_tabs_panel_classes', array( $this, 'ppom_tabs_classes' ), 10, 1 );

		add_filter( 'ppom_input_template_path', array( $this, 'template_path' ), 10, 4 );
		add_filter( 'ppom_field_default_value', array( $this, 'defualt_value' ), 10, 3 );

		add_filter( 'ppom_options_after_changes', array( $this, 'adding_image_id_in_options' ), 9, 4 );

		// prices calcution, setting it as radio type
		add_filter( 'ppom_field_type_price', array( $this, 'change_type_to_radio_for_price' ), 9, 3 );
		// ppom_pa($r);
	}

	function change_type_to_radio_for_price( $field_type, $ppom_fields_post, $product_id ) {
		$field_type = $field_type == 'switcher' ? 'radio' : $field_type;

		return $field_type;
	}

	function adding_image_id_in_options( $ppom_new_option, $options, $meta, $product ) {

		if ( isset( $meta['type'] ) && $meta['type'] == 'switcher' ) {
			$ppom_new_option = array_map(
				function ( $opt ) use ( $options ) {

					$opt2 = array_filter(
						$options,
						function ( $opt2 ) use ( $opt ) {
							return $opt2['id'] == $opt['option_id'];
						} 
					);

					$opt2            = reset( $opt2 );
					$opt['image_id'] = $opt2['image'];

					return $opt;

				},
				$ppom_new_option 
			);
		}

		// ppom_pa($ppom_new_option);

		return $ppom_new_option;
	}


	function defualt_value( $default_value, $meta, $product ) {

		$type = isset( $meta['type'] ) ? $meta['type'] : '';
		if ( $type == 'switcher' ) {
			$default_value = isset( $meta['selected'] ) ? $meta['selected'] : '';

			$default_value = ! is_array( $default_value ) ? stripslashes( $default_value ) : $default_value;
		}

		return $default_value;
	}


	function load_settings() {

		$ppom_core_panel_settings = [
			'ppom_label_option_total3'        => array(
				'type'    => 'text',
				'title'   => __( 'Option Total 33', 'woocommerce-product-addon' ),
				'desc'    => __( 'Label For Price Table', 'woocommerce-product-addon' ),
				'default' => __( 'Option Total', 'woocommerce-product-addon' ),
				'tooltip' => true,
			),
			'ppom_label_option_total_suffex3' => array(
				'type'    => 'text',
				'title'   => __( 'Option Total Suffix 33', 'woocommerce-product-addon' ),
				'desc'    => __( 'E.g for Tax/Va info like. Vat included', 'woocommerce-product-addon' ),
				'default' => __( '', 'woocommerce-product-addon' ),
				'tooltip' => true,
			),
		];

		$ppom_core_panel_settingsr = [
			'ppom_label_option_total333'      => array(
				'type'    => 'text',
				'title'   => __( 'Option Total yyy', 'woocommerce-product-addon' ),
				'desc'    => __( 'Label For Price Table', 'woocommerce-product-addon' ),
				'default' => __( 'Option Total', 'woocommerce-product-addon' ),
				'tooltip' => true,
			),
			'ppom_label_option_total_suffex3' => array(
				'type'    => 'text',
				'title'   => __( 'Option Total Suffix 3yy3', 'woocommerce-product-addon' ),
				'desc'    => __( 'E.g for Tax/Va info like. Vat included', 'woocommerce-product-addon' ),
				'default' => __( '', 'woocommerce-product-addon' ),
				'tooltip' => true,
			),
		];

		$addon_panels = [
			'ppom_addon_settings2' => array(
				'id'          => 'ppom_addon_settings',
				'title'       => 'Pro Settings 2',
				'desc'        => 'It will render the ppom pro settings.',
				'icon'        => '',
				'is_sabpanel' => true,
			),
		];

		PPOMSETTINGS()->register_panel( 'ppom_tab', $addon_panels );
		PPOMSETTINGS()->register_setting( 'ppom_admin_core_settings', $ppom_core_panel_settings );
		PPOMSETTINGS()->register_setting( 'ppom_addon_settings2', $ppom_core_panel_settingsr );


		$new_tab = [
			'addons3' => array(
				'title'  => 'Labels',
				'desc'   => 'It will render addons settings.',
				'icon'   => '',
				'enable' => true,
			),
		];

		PPOMSETTINGS()->register_tabs( $new_tab );

	}
	// function template_path($path, $type, $meta, $form) {
	// if( $type === 'switcher' ) return false;
	// return $path;
	// }

	// file path function
	function addon_sw_path( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.switcher.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		// ppom_pa($path);
		return $path;
	}

	/*
	**============= Loading all PRO inputs ================
	*/
	function load_addon( $inputs_array, $inputObj ) {

		$inputs_array['switcher'] = $inputObj->get_input( 'switcher' );

		return $inputs_array;
	}

	function render_input( $meta, $default_value ) {
		if ( $meta['type'] != 'switcher' ) {
			return '';
		}

		$html = '';
		ob_start();

		$template_design = 'switcher';

		$template_path = $this->addon_path . '/templates/switcher.php';
		$template_vars = array(
			'field_meta'    => $meta,
			'default_value' => $default_value,
			'addon_type'    => $template_design,
		);


		ppom_load_input_templates( $template_path, $template_vars );

		$html .= ob_get_clean();

		echo apply_filters( 'ppom_switcher_html', $html );
	}


	// Load Custom Scripts function
	function load_scripts( $field, $data_name ) {

		if ( $field['type'] != 'switcher' ) {
			return '';
		}

		if ( $field['type'] == 'switcher' ) {

			wp_enqueue_style( 'switcher_css', $this->addon_url . '/css/switcher.css' );
			wp_enqueue_script( 'switcher-js', $this->addon_url . '/js/switcher.js', $this->addon_url, true );

			$font_size      = isset( $field['font_size'] ) ? $field['font_size'] : '';
			$switcher_color = isset( $field['switcher_color'] ) ? $field['switcher_color'] : '';
			$font_color     = isset( $field['font_color'] ) ? $field['font_color'] : '';
			$marker_color   = isset( $field['marker_color'] ) ? $field['marker_color'] : '';
			$marker_height  = isset( $field['marker_height'] ) ? $field['marker_height'] : '';
			$price_size     = isset( $field['price_size'] ) ? $field['price_size'] : '';

			$custom_css  = isset( $field['custom_css'] ) ? $field['custom_css'] : '';
			$custom_css .= '.' . $data_name . ' .ppom-label-indicator {
                      font-size: ' . esc_attr( $font_size ) . ' !important;
                  }';

			$custom_css .= '.' . $data_name . ' .ppom-switcher-option-group {
                      background-color: ' . esc_attr( $switcher_color ) . ' !important;
                  }';

			$custom_css .= '.' . $data_name . ' .ppom-switcher-option-group {
                      color: ' . esc_attr( $font_color ) . ' !important;
                  }';

			$custom_css .= '.' . $data_name . ' .ppom-option-marker {
                      background-color: ' . esc_attr( $marker_color ) . ' !important;
                  }';

			$custom_css .= '.' . $data_name . ' .ppom-option-marker {
                      height: ' . esc_attr( $marker_height ) . ' !important;
                  }';

			$custom_css .= '.' . $data_name . ' .ppom-option-label-price {
                      font-size: ' . esc_attr( $price_size ) . ' !important;
                  }';
			wp_add_inline_style( 'switcher_css', $custom_css );
			// ppom_pa($field);

		}
	}


	/*
	**========== Render Backend PPOM Meta Settings ===========
	*/
	function ppom_render_admin_settings( $html_input, $type, $name, $values, $options, $field_index ) {

		if ( $type == 'paired-switch' ) {

			$plc_option = ( ! empty( $placeholders ) ) ? $placeholders[0] : __( 'Option', 'woocommerce-product-addon' );
			$plc_price  = ( ! empty( $placeholders ) ) ? $placeholders[1] : __( 'Price (optional)', 'woocommerce-product-addon' );

			$weight_unit = get_option( 'woocommerce_weight_unit' );
			$plc_weight  = ( isset( $placeholders[2] ) && ! empty( $placeholders ) ) ? $placeholders[2] : __( "Weight-{$weight_unit} (PRO only)", 'woocommerce-product-addon' );
			$plc_stock   = ( isset( $placeholders[3] ) && ! empty( $placeholders ) ) ? $placeholders[3] : __( 'Stock (PRO only)', 'woocommerce-product-addon' );
			if ( ppom_pro_is_installed() ) {
				$plc_weight = ( isset( $placeholders[2] ) && ! empty( $placeholders ) ) ? $placeholders[2] : __( "Weight-{$weight_unit} (optional)", 'woocommerce-product-addon' );
				$plc_stock  = ( isset( $placeholders[3] ) && ! empty( $placeholders ) ) ? $placeholders[3] : __( 'Stock (optional)', 'woocommerce-product-addon' );
			}

			$plc_id    = ( isset( $placeholders[3] ) && ! empty( $placeholders ) ) ? $placeholders[3] : __( 'Unique Option ID)', 'woocommerce-product-addon' );
			$plc_image = ( isset( $placeholders[4] ) && ! empty( $placeholders ) ) ? $placeholders[4] : __( 'Image ID*', 'woocommerce-product-addon' );

			$opt_index0  = 1;
			$html_input .= '<ul class="ppom-options-container ppom-options-sortable">';

			if ( $values ) {
				// ppom_pa($values);
				$last_array_id = max( array_keys( $values ) );

				foreach ( $values as $opt_index => $option ) {

					$weight = isset( $option['weight'] ) ? $option['weight'] : '';
					$stock  = isset( $option['stock'] ) ? $option['stock'] : '';
					$image  = isset( $option['image'] ) ? $option['image'] : '';

					$option_id   = ppom_get_option_id( $option );
					$html_input .= '<li class="data-options ppom-sortable-handle" style="display: flex;" data-condition-type="simple_options">';
					$html_input .= '<span class="dashicons dashicons-move"></span>';
					$html_input .= '<input type="text" class="option-title form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][option]" value="' . esc_attr( stripslashes( $option['option'] ) ) . '" placeholder="' . $plc_option . '" data-metatype="option" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="option-price form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][price]" value="' . esc_attr( $option['price'] ) . '" placeholder="' . $plc_price . '" data-metatype="price" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="option-weight form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][weight]" value="' . esc_attr( $weight ) . '" placeholder="' . $plc_weight . '" data-metatype="weight" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="option-stock form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][stock]" value="' . esc_attr( $stock ) . '" placeholder="' . $plc_stock . '" data-metatype="stock" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="option-id form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][id]" value="' . esc_attr( $option_id ) . '" placeholder="' . $plc_id . '" data-metatype="id" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="option-image form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][image]" value="' . esc_attr( $image ) . '" placeholder="' . $plc_image . '" data-metatype="image" data-opt-index="' . esc_attr( $opt_index ) . '">';

					$html_input .= '<button class="btn btn-success ppom-add-option" data-option-type="paired"><i class="fa fa-plus" aria-hidden="true"></i></button>';
					$html_input .= '<button class="btn btn-danger ppom-remove-option"><i class="fa fa-minus" aria-hidden="true"></i></button>';

					$html_input .= '</li>';

					$opt_index0 = $last_array_id;
					$opt_index0 ++;

				}
			} else {
				$html_input .= '<li class="data-options" style="display: flex;" data-condition-type="simple_options">';
				$html_input .= '<span class="dashicons dashicons-move"></span>';
				$html_input .= '<input type="text" class="option-title form-control ppom-option-keys" placeholder="' . $plc_option . '" data-metatype="option">';
				$html_input .= '<input type="text" class="option-price form-control ppom-option-keys" placeholder="' . $plc_price . '" data-metatype="price">';

				$html_input .= '<input type="text" class="option-weight form-control ppom-option-keys" placeholder="' . $plc_weight . '" data-metatype="weight">';

				$html_input .= '<input type="text" class="option-stock form-control ppom-option-keys" placeholder="' . $plc_stock . '" data-metatype="stock">';

				$html_input .= '<input type="text" class="option-id form-control ppom-option-keys" placeholder="' . $plc_id . '" data-metatype="id">';

				$html_input .= '<input type="text" class="option-image form-control ppom-option-keys" placeholder="' . $plc_image . '" data-metatype="image">';

				$html_input .= '<button class="btn btn-success ppom-add-option" data-option-type="paired"><i class="fa fa-plus" aria-hidden="true"></i></button>';
				$html_input .= '<button class="btn btn-danger ppom-remove-option"><i class="fa fa-minus" aria-hidden="true"></i></button>';

				$html_input .= '</li>';
			}
			$html_input .= '<input type="hidden" id="ppom-meta-opt-index" value="' . esc_attr( $opt_index0 ) . '">';
			$html_input .= '<ul/>';
		}


		return $html_input;
	}

	/* **========== Handle Admin Tabs Classes =========== */

	function ppom_tabs_classes( $settings ) {

		foreach ( $settings as $fields_meta_key => $meta ) {

			$type = isset( $meta['type'] ) ? $meta['type'] : '';

			if ( $type == 'paired-switch' ) {
				$settings['options']['tabs_class'] = array( 'ppom_handle_add_option_tab', 'col-md-12' );
			}
			if ( $fields_meta_key == 'font_size' ) {
				$settings['font_size']['tabs_class'] = array( 'ppom_handle_switcher_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'switcher_color' ) {
				$settings['switcher_color']['tabs_class'] = array( 'ppom_handle_switcher_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'font_color' ) {
				$settings['font_color']['tabs_class'] = array( 'ppom_handle_switcher_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'marker_color' ) {
				$settings['marker_color']['tabs_class'] = array( 'ppom_handle_switcher_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'marker_height' ) {
				$settings['marker_height']['tabs_class'] = array( 'ppom_handle_switcher_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'price_size' ) {
				$settings['price_size']['tabs_class'] = array( 'ppom_handle_switcher_setting_tab', 'col-md-6' );
			}
		}

		// ppom_pa($settings);
		return $settings;
	}

	// tabs render function
	function ppom_tabs_render( $tabs, $fields_type ) {

		if ( $fields_type == 'switcher' ) {
			$tabs['add_option_tab'] = array(
				'label'        => __( 'Add Option', 'woocommerce-product-addon' ),
				'class'        => array( 'ppom-tabs-label' ),
				'field_depend' => array( 'switcher' ),
			);
		}
		$tabs['switcher_setting_tab'] = array(
			'label'        => __( 'Settings', 'woocommerce-product-addon' ),
			'class'        => array( 'ppom-tabs-label' ),
			'field_depend' => array( 'switcher' ),
		);

		return $tabs;
	}
}
