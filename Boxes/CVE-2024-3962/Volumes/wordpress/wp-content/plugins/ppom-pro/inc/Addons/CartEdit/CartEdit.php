<?php
/**
 * Plugin Name: PPOM Addon Cart Edit
 * Description: Cart extra column for PPOM Meta and also edit options.
 * Version: 2.9
 * Text Domain: ppom-addon-cart-edit
 * License: GPL2
 */

namespace PPOM_Pro\Addons\CartEdit;

use PPOM_Pro\Abstract_Addon;

class CartEdit extends Abstract_Addon {

	function run_hooks() {
		// Updating Cart Item
		add_filter( 'woocommerce_add_to_cart_redirect', array( $this, 'goto_cart' ) );

		// Display info notice when editing a PPOM item from the cart. Notices are rendered at priority 10.
		add_action( 'woocommerce_before_single_product', array( $this, 'add_edit_in_cart_notice' ), 0 );
		add_filter( 'woocommerce_product_single_add_to_cart_text', array( $this, 'single_add_to_cart_text' ), 10, 2 );

		// Modify titles.
		// add_filter( 'woocommerce_cart_item_name', array( $this, 'edit_link' ), 10, 3 );		
		add_action( 'woocommerce_after_cart_item_name', array( $this, 'edit_link_popup' ), 10, 2 );

		// REMOVE WC BUNDLES CART EDIT LINK
		add_filter( 'woocommerce_bundle_is_editable_in_cart', array( $this, 'bundle_editable' ), 10, 3 );

		// PPOM Settings Filter
		add_filter( 'ppom_settings_data', array( $this, 'cart_edit_setting' ), 10, 1 );

		// Adding cart item key in ppom fields meta to make it different
		// add_action('ppom_after_scripts_loaded', array($this, 'add_ppom_cart_key'), 10, 2);
		add_filter( 'ppom_default_values', array( $this, 'ppom_retain_values' ), 88, 4 );
		add_filter( 'ppom_packageprice_selected_value', array( $this, 'ppom_package_price_selected_value' ), 88, 2 );

		if ( ! ppom_get_option( 'ppom_cart_enabled' ) ) {
			update_option( 'ppom_cart_enabled', 'yes' );
		}

		if ( ! ppom_get_option( 'ppom_edit_link_class' ) ) {
			update_option( 'ppom_edit_link_class', '' );
		}

		add_action( 'wp_enqueue_scripts', array( $this, 'load_cart_scripts' ), 99 );
	}

	function add_ppom_cart_key( $ppom_id, $product ) {
		if ( isset( $_GET['_cart_key'] ) ) {

			echo '<input type="hidden" name=ppom[fields][cart_key]" value="' . $_GET['_cart_key'] . '">';
		}
	}

	function ppom_retain_values( $default_values, $posted, $product_id, $args ) {
		$cart_items = WC()->cart->get_cart();
		$cart_key   = isset( $_GET['_cart_key'] ) ? $_GET['_cart_key'] : '';
		if ( isset( $args['cart_item_key'] ) ) {
			$cart_key = $args['cart_item_key'];
		}

		foreach ( $cart_items as $cart_item_key => $content ) {

			if ( $cart_key != $cart_item_key ) {
				continue;
			}
			if ( ! isset( $content['ppom'] ) ) {
				return $default_values;
			}

			if ( $content['product_id'] == $product_id ) {
				$default_values = $content['ppom']['fields'];
			}
		}

		return $default_values;
	}

	function ppom_package_price_selected_value( $default_value, $meta ) {

		foreach ( WC()->cart->cart_contents as $cart_item_key => $content ) {

			if ( ! isset( $content['ppom']['fields'] ) ) {
				return $default_value;
			}

			foreach ( $content['ppom']['fields'] as $key => $val ) {

				if ( $key == $meta['data_name'] ) {
					$default_value = $val;
					break;
				}
			}
		}

		return $default_value;
	}

	public static function add_settings_tab( $settings_tabs ) {

		$settings_tabs['ppom_cart'] = 'PPOM Cart';

		return $settings_tabs;
	}

	function settings_tab() {
		woocommerce_admin_fields( $this->settings );
	}

	function save_settings() {
		woocommerce_update_options( $this->settings );
	}

	function goto_cart( $url ) {

		if ( ! isset( $_POST['ppom_cart_key'] ) || $_POST['ppom_cart_key'] == null ) {
			return $url;
		}

		// Removing the current item
		WC()->cart->remove_cart_item( $_POST['ppom_cart_key'] );
		$url = wc_get_cart_url();

		return $url;
	}

	function edit_link_popup( $cart_item, $cart_item_key ) {

		add_action( 'woocommerce_before_single_product', array( $this, 'add_edit_in_cart_notice' ), 0 );
		add_filter(
			'woocommerce_product_single_add_to_cart_text',
			array(
				$this,
				'single_add_to_cart_text_popup',
			),
			10,
			2 
		);

		$ppom_cart_enabled = ppom_get_option( 'ppom_cart_enabled' );
		$ppom_edit_class   = ppom_get_option( 'ppom_edit_link_class' );
		$enable_cart_popup = ppom_get_option( 'ppom_editcart_popup' );
		$popup_edit_meta   = ppom_get_option( 'ppom-cart-edit-popup' );
		$popup_btn_label   = ppom_get_option( 'ppom_editcart_popup_label', 'Field Popup' );

		$content = '';

		if ( $ppom_cart_enabled != 'yes' ) {
			return $content;
		}

		$product_id = $cart_item['product_id'];

		// Load PPOM scripts when edits cart lineitems 
		if ( $popup_edit_meta == 'yes' ) {
			$product = wc_get_product( $product_id );
			ppom_hooks_load_input_scripts( $product );
		}

		// If repeater enabled
		// if( function_exists('ppom_is_repeater_enabled') && ppom_is_repeater_enabled($product_id) ) return $content;

		$_product          = apply_filters( 'woocommerce_cart_item_product', $cart_item['data'], $cart_item, $cart_item_key );
		$product_permalink = apply_filters( 'woocommerce_cart_item_permalink', $_product->is_visible() ? $_product->get_permalink( $cart_item ) : '', $cart_item, $cart_item_key );

		if ( class_exists( 'WC_Bundles' ) && wc_pb_is_bundled_cart_item( $cart_item ) ) {
			return $content;
		}

		$edit_link = '';
		if ( isset( $cart_item['ppom'] ) && $product_permalink ) {

			$query_args       = array();
			$cart_ppom_fields = isset( $cart_item['ppom']['fields'] ) ? $cart_item['ppom']['fields'] : '';
			$ppom_fields      = isset( $cart_item['ppom'] ) ? $cart_item['ppom'] : '';

			if ( $cart_ppom_fields ) {

				foreach ( $cart_ppom_fields as $key => $value ) {

					$field_meta = ppom_get_field_meta_by_dataname( $product_id, $key );
					$field_type = isset( $field_meta['type'] ) ? $field_meta['type'] : '';

					switch ( $field_type ) {

						case 'image':
							$image_value = array();
							foreach ( $value as $img ) {

								$image_data    = json_decode( stripslashes( $img ) );
								$image_value[] = $image_data->image_id;
							}

							$value = $image_value;
							break;
					}

					// $query_args[$key] = is_array($value) ? array_map( 'urlencode', $value ) : urlencode($value);
					$query_args[ $key ] = ( is_array( $value ) ) ? $this->ppom_urlencoded_array_map( 'urlencode', $value ) : urlencode( $value );
				}
			}

			// Adding cart key
			$query_args['_cart_key'] = $cart_item_key;

			$edit_link = add_query_arg( $query_args, $product_permalink );
			$edit_link = apply_filters( 'ppom_cart_edit_link', $edit_link, $content, $cart_item, $cart_item_key );
			// $edit_link = 

			// $edit_text = __( 'Edit Options', 'ppom-addon-cart-edit' );
			$edit_text             = ppom_get_option( 'ppom_editcart_editoptions_text', __( 'Edit Options', 'woocommerce-product-addon' ) );
			$ppom_edit_class_clean = $ppom_edit_class;
			$ppom_edit_class      .= ' ppom-ce-popup-btn ppom-cart-link';


			if ( $popup_edit_meta != 'yes' && $enable_cart_popup != 'yes' ) {

				$content .= sprintf( '<br/><a href="%1$s" class="%2$s"><small>%3$s</small></a>', $edit_link, $ppom_edit_class_clean, $edit_text );
			} else {
				$ppom_popup_id = 'ppom_cart_popup_show_' . $cart_item_key;

				$show_fields = false;
				if ( $popup_edit_meta == 'yes' ) {
					$show_fields = true;
				}

				$content .= sprintf( '<br/><a href="#" data-cartkey="%1$s" class="%2$s" data-ppom_modal-target="%3$s"><small>%4$s</small></a>', $cart_item_key, $ppom_edit_class, $ppom_popup_id, $popup_btn_label );

				$content .= $this->build_popup_html( $product_id, $ppom_popup_id, $cart_item_key, $show_fields, $ppom_fields );
			}
		}

		$content = apply_filters( 'ppom_cart_edit_content', $content, $edit_link, $cart_item, $cart_item_key );

		echo $content;
	}

	function build_popup_html( $product_id, $ppom_popup_id, $cart_item_key = '', $show_fields = false, $ppom_fields = null ) {

		$ppom_meta = $this->get_cart_lineitems_html( $product_id, $ppom_fields, $show_fields );
		$content   = '';

		$template_attrs = array();
		$template_attrs = array(
			'product_id'    => $product_id,
			'ppom_popup_id' => $ppom_popup_id,
			'show_fields'   => $show_fields,
			'ppom_meta'     => $ppom_meta,
			'class_inst'    => $this,
			'cart_item_key' => $cart_item_key,
		);

		ob_start();
		$this->load_template( 'cart-modal.php', $template_attrs );
		$content .= ob_get_contents();
		ob_end_clean();

		return apply_filters( 'ppom_ce_popup_show_html', $content, $product_id, $show_fields );
	}

	function get_cart_lineitems_html( $product_id, $ppom_fields, $show_fields ) {

		$ppom_meta['data'] = wc_get_product( $product_id );
		$ppom_meta['ppom'] = $ppom_fields;
		$ppom_meta         = ppom_make_meta_data( $ppom_meta );

		$content = '';

		$template_attrs = array();
		$template_attrs = array(
			'product_id'      => $product_id,
			'ppom_meta'       => $ppom_meta,
			'class_inst'      => $this,
			'popup_edit_meta' => $show_fields,
		);

		ob_start();
		$this->load_template( 'ppom-items-view.php', $template_attrs );
		$content .= ob_get_contents();
		ob_end_clean();

		return apply_filters( 'ppom_cartedit_items_view_html', $content, $product_id, $ppom_fields );
		// return apply_filters('ppom_ce_meta', $content, $product_id, $ppom_fields);
	}

	function ppom_urlencoded_array_map( $function, $arrar ) {
		$result = array();
		foreach ( $arrar as $key => $val ) {
			$val            = ( is_object( $val ) ) ? (array) $val : $val;
			$result[ $key ] = ( is_array( $val ) ? $this->ppom_urlencoded_array_map( $function, $val ) : $function( $val ) );
		}

		return $result;
	}

	function bundle_editable( $editable, $bundle, $cart_item ) {
		if ( class_exists( 'WC_Bundles' ) && is_array( $cart_item ) && isset( $cart_item['ppom'] ) && wc_pb_is_bundle_container_cart_item( $cart_item ) ) {
			$editable = false;
		}

		return $editable;
	}

	public function add_edit_in_cart_notice() {

		global $product;
		$cart_key = isset( $_GET['_cart_key'] ) ? wc_clean( $_GET['_cart_key'] ) : false;

		if ( $cart_key && isset( WC()->cart->cart_contents[ $cart_key ] ) ) {
			$notice = '<div>' . sprintf( __( 'You are currently editing &quot;%1$s&quot;. When finished, click the <strong>Update Cart</strong> button.', 'woocommerce-product-addon' ), $product->get_title() ) . '</div>';
			wc_add_notice( $notice, 'notice' );
		}
	}

	public function single_add_to_cart_text_popup( $text, $product ) {
		return __( 'Update Cart', 'woocommerce-product-addon' );
	}

	public function single_add_to_cart_text( $text, $product ) {

		$cart_key = isset( $_GET['_cart_key'] ) ? wc_clean( $_GET['_cart_key'] ) : false;

		if ( $cart_key && isset( WC()->cart->cart_contents[ $cart_key ] ) ) {

			if ( isset( WC()->cart->cart_contents[ $cart_key ] ) ) {
				$text = __( 'Update Cart', 'woocommerce-product-addon' );
			}
		}

		return $text;
	}

	function load_cart_scripts() {
		if ( is_cart() || is_checkout() ) {

			$ppom_cart_enabled = ppom_get_option( 'ppom_cart_enabled' );

			if ( $ppom_cart_enabled == 'yes' ) {

				wp_enqueue_style( 'ppom-cart-modal', PPOM_URL . '/css/ppom-modal.css' );
				wp_enqueue_script( 'ppom-cart-modal', PPOM_URL . '/js/ppom-modal.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

				wp_enqueue_style( 'ppom-cartedit', $this->addon_url . '/css/ppom-cartedit.css' );
				wp_enqueue_script( 'ppom-cart-edit', $this->addon_url . '/js/ppom-cartedit.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

				do_action( 'ppom_addon_cartedit_scripts_loaded' );
			}
		}
	}

	function cart_edit_setting( $ppom_settings ) {

		$ppom_settings[] = array(
			'title' => __( 'PPOM Cart Edit', 'woocommerce-product-addon' ),
			'type'  => 'title',
			'desc'  => '',
			'id'    => 'ppom_cart_edit',
		);
		$ppom_settings[] = array(
			'title'   => __( 'Enable PPOM Cart Edit', 'woocommerce-product-addon' ),
			'type'    => 'checkbox',
			'label'   => __( 'Enable', 'woocommerce-product-addon' ),
			'default' => 'no',
			'id'      => 'ppom_cart_enabled',
			'desc'    => __( 'This will enable the Edit Cart Feature', 'woocommerce-product-addon' ),
		);
		$ppom_settings[] = array(
			'title'   => __( 'Popup Edit', 'woocommerce-product-addon' ),
			'type'    => 'checkbox',
			'label'   => __( 'Enable', 'woocommerce-product-addon' ),
			'default' => 'no',
			'id'      => 'ppom-cart-edit-popup',
			'desc'    => __( 'Use Popup to Edit PPOM Options (default yes)', 'woocommerce-product-addon' ),
		);
		$ppom_settings[] = array(
			'title'    => __( 'Edit Options Text', 'woocommerce-product-addon' ),
			'type'     => 'text',
			'default'  => __( 'Edit Options', 'woocommerce-product-addon' ),
			'id'       => 'ppom_editcart_editoptions_text',
			'desc'     => __( 'You can change the edit label.', 'woocommerce-product-addon' ),
			'css'      => 'min-width:300px;',
			'desc_tip' => true,
			'class'    => 'edit_button_class',
		);
		$ppom_settings[] = array(
			'title'    => __( 'Edit Button Class', 'woocommerce-product-addon' ),
			'type'     => 'text',
			'default'  => 'no',
			'id'       => 'ppom_edit_link_class',
			'desc'     => __( 'You can add classes seperated by space', 'woocommerce-product-addon' ),
			'css'      => 'min-width:300px;',
			'desc_tip' => true,
			'class'    => 'edit_button_class',
		);
		$ppom_settings[] = array(
			'title'    => __( 'Fields Modal', 'woocommerce-product-addon' ),
			'type'     => 'checkbox',
			'default'  => '',
			'id'       => 'ppom_editcart_popup',
			'desc'     => __( 'It will show PPPOM fields inside modal instead on cart line item to make your cart page simple and clean.', 'woocommerce-product-addon' ),
			'css'      => 'min-width:300px;',
			'desc_tip' => true,
		);
		$ppom_settings[] = array(
			'title'    => __( 'Model Button Label', 'woocommerce-product-addon' ),
			'type'     => 'text',
			'default'  => '',
			'id'       => 'ppom_editcart_popup_label',
			'desc'     => __( 'Change the model button label', 'woocommerce-product-addon' ),
			'css'      => 'min-width:300px;',
			'desc_tip' => true,
		);
		$ppom_settings[] = array(
			'type' => 'sectionend',
			'id'   => 'ppom_cart_edit',
		);

		return $ppom_settings;
	}

	function load_settings() {

		$settings = array(
			'ppom_cart_enabled'              => array(
				'type'  => 'checkbox',
				'title' => __( 'Enable PPOM Cart Edit', 'woocommerce-product-addon' ),
				'desc'  => __( 'This will enable the Edit Cart Feature', 'woocommerce-product-addon' ),
			),
			'ppom-cart-edit-popup'           => array(
				'type'  => 'checkbox',
				'title' => __( 'Popup Edit', 'woocommerce-product-addon' ),
				'desc'  => __( 'Use Popup to Edit PPOM Options (default yes)', 'woocommerce-product-addon' ),
			),
			'ppom_editcart_editoptions_text' => array(
				'type'    => 'text',
				'title'   => __( 'Edit Options Text', 'woocommerce-product-addon' ),
				'default' => __( 'Edit Options', 'woocommerce-product-addon' ),
				'desc'    => __( 'You can change the edit label.', 'woocommerce-product-addon' ),
			),
			'ppom_edit_link_class'           => array(
				'type'  => 'text',
				'title' => __( 'Edit Button Class', 'woocommerce-product-addon' ),
				'desc'  => __( 'You can add classes seperated by space', 'woocommerce-product-addon' ),
			),
			'ppom_editcart_popup'            => array(
				'type'  => 'checkbox',
				'title' => __( 'Fields Modal', 'woocommerce-product-addon' ),
				'desc'  => __( 'It will show PPPOM fields inside modal instead on cart line item to make your cart page simple and clean.', 'woocommerce-product-addon' ),
			),
			'ppom_editcart_popup_label'      => array(
				'type'  => 'text',
				'title' => __( 'Model Button Label', 'woocommerce-product-addon' ),
				'desc'  => __( 'Change the model button label', 'woocommerce-product-addon' ),
			),
		);

		$panels = array(
			'ppom_addon_cartedit' => array(
				'id'          => 'ppom_addon_cartedit',
				'title'       => __( 'Cart Edit', 'woocommerce-product-addon' ),
				'desc'        => 'It will render the cart edit addon settings.',
				'icon'        => '',
				'is_sabpanel' => true,
				'active'      => 'yes',
			),
		);

		$tabs = array(
			'ppom_addons' =>
				array(
					'tab_id' => 'ppom_addons',
					'title'  => 'Addons',
					'enable' => true,
				),
		);

		PPOMSETTINGS()->register_tabs( $tabs )->register_panel( 'ppom_addons', $panels )->register_setting( 'ppom_addon_cartedit', $settings );
	}
}
