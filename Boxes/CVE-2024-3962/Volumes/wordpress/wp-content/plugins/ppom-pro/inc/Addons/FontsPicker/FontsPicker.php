<?php
/**
 * Plugin Name: PPOM Addon for Google & Custom Fonts Picker
 * Description: Fontpicker select option and add to cart selected fonts
 * Version: 2.6
 * License: GPLv2 or later
 * License URI: http://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain: ppom-fontpicker
 */


namespace PPOM_Pro\Addons\FontsPicker;

use PPOM_Pro\Abstract_Addon;

class FontsPicker extends Abstract_Addon {

	function run_hooks() {

		// Loading all input script
		add_action( 'ppom_hooks_inputs', array( $this, 'hook_input_scripts' ), 10, 2 );

		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );

		// File path
		add_filter( 'nm_input_class-fonts', array( $this, 'addon_path_fonts' ), 10, 2 );

		// Rendering inputs
		add_action( 'ppom_rendering_inputs', array( $this, 'render_input_fonts' ), 10, 5 );

		// PPOM fields data format
		add_filter( 'ppom_meta_data', array( $this, 'font_data' ), 15, 2 );

		// PPOM Admin Tabs
		add_filter( 'ppom_fields_tabs_show', array( $this, 'ppom_tabs_render' ), 10, 2 );
		add_filter( 'ppom_tabs_panel_classes', array( $this, 'ppom_tabs_classes' ), 10, 1 );

		// Admin Setting filter
		add_filter( 'render_input_types', array( $this, 'ppom_render_admin_settings' ), 10, 6 );

		add_filter( 'ppom_is_option_convertable', array( $this, 'disable_option_convertion' ), 10, 2 );

		add_filter( 'ppom_show_font_text', array( $this, 'preview_text_addtocart' ), 10, 2 );
	}

	/**
	 * Loading All PRO Inputs
	 */
	function load_addon( $inputs_array, $inputObj ) {

		// checking fixedprice addon is enable
		$inputs_array['fonts'] = $inputObj->get_input( 'fonts' );

		return $inputs_array;
	}


	/**
	 * Font Input Settings Path
	 */
	function addon_path_fonts( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.fonts.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}


	/**
	 * Load Fonts Inputs Scripts =
	 */
	function hook_input_scripts( $field, $data_name ) {

		/**
		 * @source: https://www.jqueryscript.net/text/Google-Web-Font-Picker-Plugin-With-jQuery-And-jQuery-UI-Webfont-selector.html
		 */


		if ( $field['type'] != 'fonts' ) {
			return '';
		}

		if ( $field['type'] == 'fonts' ) {

			$local_vars = array();

			// string localize
			$firstoption_msg = __( 'Select Font', 'woocommerce-product-addon' );
			$first_option    = ! empty( $field['first_option'] ) ? $field['first_option'] : $firstoption_msg;

			$dataname     = $field['data_name'];
			$text_preview = 'ppom_default_text_' . $dataname;
			$custom_fonts = isset( $field['custom_fonts'] ) ? stripslashes( $field['custom_fonts'] ) : '';
			$fonts_meta   = isset( $field['options'] ) ? $field['options'] : '';


			$custom_font_url = apply_filters( 'ppom_custom_fonts_url', $this->addon_url . '/fonts/custom.fonts.css' );
			wp_enqueue_style( 'ppom-custom-fonts', $custom_font_url );

			// Enqueue custom fonts inline
			wp_add_inline_style( 'ppom-custom-fonts', $custom_fonts );

			// FontSelect Lib Files
			wp_enqueue_style( 'ppom-fontselect-lib', $this->addon_url . '/css/fontselect-lib.css' );
			wp_enqueue_script( 'ppom-fontselect-lib', $this->addon_url . '/js/fontselect-lib.js', array( 'jquery' ), PPOM_VERSION, true );

			// Local fonts files
			wp_enqueue_style( 'ppom-fontselect', $this->addon_url . '/css/ppom-fonts-style.css' );
			wp_enqueue_script( 'ppom-fontselect', $this->addon_url . '/js/ppom-fonts.js', array( 'jquery' ), PPOM_VERSION, true );

			$local_vars = array(
				'custom_fonts_url' => $custom_font_url,
				'first_option'     => $first_option,
				'text_preview'     => $text_preview,
				'fonts_meta'       => $fonts_meta,
			);

			wp_localize_script( 'ppom-fontselect', "ppom_fonts_{$dataname}_vars", $local_vars );
		}
	}


	/**
	 * Render Fonts Input HTML
	 */
	function render_input_fonts( $meta, $data_name, $classes, $field_label, $options ) {

		if ( $meta['type'] != 'fonts' ) {
			return '';
		}

		// ppom_pa($meta);

		$meta['id']          = $data_name;
		$input_wrapper_class = 'form-group';
		$input_wrapper_class = apply_filters( 'ppom_input_wrapper_class', $input_wrapper_class, $meta );

		$label_placeholder = ! empty( $meta['label_placeholder'] ) ? $meta['label_placeholder'] : __( 'Type Here', 'woocommerce-product-addon' );
		$label_preview     = ! empty( $meta['label_preview'] ) ? $meta['label_preview'] : __( 'Type Above', 'woocommerce-product-addon' );

		$show_preview       = isset( $meta['preview_hide'] ) ? $meta['preview_hide'] : '';
		$disable_fontselect = isset( $meta['disable_fontselect'] ) ? $meta['disable_fontselect'] : false;
		$preview_data_id    = isset( $meta['preview_data_id'] ) ? $meta['preview_data_id'] : false;
		$preview_class      = isset( $meta['preview_class'] ) ? ' ' . $meta['preview_class'] : '';

		// text charactor length control
		$maxlength = isset( $meta['maxlength'] ) ? $meta['maxlength'] : '';
		$minlength = isset( $meta['minlength'] ) ? $meta['minlength'] : '';

		// color settings
		$preview_box_textcolor            = ! empty( $meta['preview_box_textcolor'] ) ? $meta['preview_box_textcolor'] : '#666';
		$preview_box_textcolor_datasource = ! empty( $meta['preview_box_textcolor_datasource'] ) ? $meta['preview_box_textcolor_datasource'] : false;
		$preview_box_bgcolor              = ! empty( $meta['preview_box_bgcolor'] ) ? $meta['preview_box_bgcolor'] : '#cacaca';

		// get default font name
		$font_name  = ! empty( $meta['default_font'] ) ? $meta['default_font'] : '';
		$fonts_meta = ! empty( $meta['options'] ) ? $meta['options'] : array();

		$preview_text = '';
		if ( isset( $_POST['ppom']['fields'][ $data_name ] ) && ! empty( $_POST['ppom']['fields'][ $data_name ] ) ) {
			$font_name    = isset( $_POST['ppom']['fields'][ $data_name ]['font'] ) ? $_POST['ppom']['fields'][ $data_name ]['font'] : '';
			$preview_text = isset( $_POST['ppom']['fields'][ $data_name ]['text'] ) ? $_POST['ppom']['fields'][ $data_name ]['text'] : '';
		} elseif ( isset( $_GET[ $data_name ] ) && ! empty( $_GET[ $data_name ] ) ) {
			$font_name    = isset( $_GET[ $data_name ]['font'] ) ? $_GET[ $data_name ]['font'] : '';
			$preview_text = isset( $_GET[ $data_name ]['text'] ) ? $_GET[ $data_name ]['text'] : '';
		}


		if ( ! empty( $preview_text ) ) {
			$label_preview = $preview_text;
		}

		if ( $preview_data_id != false && ! empty( $_GET[ $preview_data_id ] ) ) {
			$label_preview = $_GET[ $preview_data_id ];
		}

		$html = '<div class="' . esc_attr( $input_wrapper_class ) . '">';

		if ( $field_label && ! $disable_fontselect ) {
			$html .= '<label class="form-control-label" for="' . esc_attr( $data_name ) . '">';
			$html .= sprintf( __( '%s', 'woocommerce-product-addon' ), $field_label ) . '</label>';
		}

		// Font Preview Above
		if ( $show_preview != 'none' && $show_preview == 'above_font' ) {

			$html .= sprintf( __( '<input id="ppom_default_text_' . esc_attr( $data_name ) . '" name="ppom[fields][%s][text]" placeholder="%s" class="ppom-font-text form-control" type="text" maxlength="%s" minlength="%s" value="%s" />', 'woocommerce-product-addon' ), esc_attr( $data_name ), esc_attr( $label_placeholder ), esc_attr( $maxlength ), esc_attr( $minlength ), esc_attr( $preview_text ) );

			$html .= sprintf( __( '<p id="ppom-font-info-' . esc_attr( $data_name ) . '" class="ppom-font-info' . esc_attr( $preview_class ) . '" data-txt_color_source="%s" style="color:%s;background-color:%s;font-family:%s;">%s</p>', 'woocommerce-product-addon' ), esc_attr( $preview_box_textcolor_datasource ), esc_attr( $preview_box_textcolor ), esc_attr( $preview_box_bgcolor ), esc_attr( $font_name ), esc_attr( $label_preview ) );
		}

		if ( ! $disable_fontselect ) {
			$html .= '<input id="ppom-font-picker-' . esc_attr( $data_name ) . '" class="ppom-font-picker form-control" name="ppom[fields][' . esc_attr( $data_name ) . '][font]" data-font="' . esc_attr( $font_name ) . '" ';

			if ( $font_name != '' ) {
				$html .= 'value="' . stripslashes( $font_name ) . '"';
			}

			$html .= '/>';
		}

		// Font Preview Below
		if ( $show_preview != 'none' && $show_preview == 'below_font' ) {

			$html .= sprintf( __( '<input id="ppom_default_text_' . esc_attr( $data_name ) . '" name="ppom[fields][%s][text]" placeholder="%s" class="ppom-font-text form-control" type="text" maxlength="%s" minlength="%s" value="%s" />', 'woocommerce-product-addon' ), esc_attr( $data_name ), esc_attr( $label_placeholder ), esc_attr( $maxlength ), esc_attr( $minlength ), esc_attr( $preview_text ) );

			$html .= sprintf( __( '<p id="ppom-font-info-' . esc_attr( $data_name ) . '" class="ppom-font-info' . esc_attr( $preview_class ) . '" data-txt_color_source="%s" style="color:%s;background-color:%s;font-family:%s;">%s</p>', 'woocommerce-product-addon' ), esc_attr( $preview_box_textcolor_datasource ), esc_attr( $preview_box_textcolor ), esc_attr( $preview_box_bgcolor ), esc_attr( $font_name ), esc_attr( $label_preview ) );
		}

		// Font Preview Below
		if ( $show_preview != 'none' && $show_preview == 'by_data_name' ) {

			$html .= sprintf( __( '<p id="ppom-font-info-' . esc_attr( $data_name ) . '" class="ppom-font-info' . esc_attr( $preview_class ) . '" data-txt_color_source="%s" style="color:%s;background-color:%s;font-family:%s;">%s</p>', 'woocommerce-product-addon' ), esc_attr( $preview_box_textcolor_datasource ), esc_attr( $preview_box_textcolor ), esc_attr( $preview_box_bgcolor ), esc_attr( $font_name ), esc_attr( $label_preview ) );
		}

		$html .= '</div>';    // form-group

		echo apply_filters( 'ppom_fonts_html', $html );
	}


	/**
	 * Control Fonts Preview Text On Cart
	 */
	function font_data( $ppom_data, $cart_item ) {

		$product_id = $cart_item['data']->post_type == 'product' ? $cart_item['data']->get_id() : $cart_item['data']->get_parent_id();

		foreach ( $cart_item['ppom']['fields'] as $key => $value ) {

			$field_meta  = ppom_get_field_meta_by_dataname( $product_id, $key );
			$field_type  = isset( $field_meta['type'] ) ? $field_meta['type'] : '';
			$field_title = isset( $field_meta['title'] ) ? $field_meta['title'] : '';

			if ( $field_type != 'fonts' ) {
				continue;
			}

			$font_name = isset( $value['font'] ) ? $value['font'] : '';
			$font_text = isset( $value['text'] ) ? $value['text'] : '';

			$meta_value = $font_name;

			if ( apply_filters( 'ppom_show_font_text', false, $field_meta ) ) {

				if ( $font_text && $font_text != '' ) {

					$meta_value = $font_name . ' (' . $font_text . ')';
				} else {

					$meta_value = $font_name;
				}
			}
			$ppom_data[ $key ] = array(
				'name'  => $field_title,
				'value' => $meta_value,
			);

		}

		return $ppom_data;
	}


	/**
	 * Preview Textbox Value Add To Cart =
	 */
	function preview_text_addtocart( $return, $field_meta ) {

		$preview_addtocart = isset( $field_meta['preview_addtocart'] ) ? $field_meta['preview_addtocart'] : '';

		$return = true;

		if ( $preview_addtocart == 'on' ) {
			$return = false;
		}

		return $return;
	}


	/**
	 * Disabling options convertion for fonts type =
	 */
	function disable_option_convertion( $allow, $meta ) {

		if ( isset( $meta['type'] ) && $meta['type'] == 'fonts' ) {
			$allow = false;
		}

		return $allow;
	}


	/**
	 * Render Backend PPOM Meta Settings =
	 */
	function ppom_render_admin_settings( $html_input, $type, $name, $values, $options, $field_index ) {

		if ( $type == 'fonts_paired' ) {

			$opt_index0 = 1;

			$html_input .= '<ul class="ppom-options-container ppom-options-sortable">';
			// ppom_pa($values);

			if ( $values ) {
				$last_array_id = max( array_keys( $values ) );

				foreach ( $values as $opt_index => $option ) {

					$fontfamily  = isset( $option['fontfamily'] ) ? $option['fontfamily'] : '';
					$fontdisplay = isset( $option['fontdisplay'] ) ? $option['fontdisplay'] : '';
					$customfonts = isset( $option['is_customfont'] ) ? $option['is_customfont'] : '';

					$html_input .= '<li class="data-options ppom-sortable-handle" style="display: flex;" data-condition-type="simple_options">';
					$html_input .= '<span class="dashicons dashicons-move"></span>';

					$html_input .= '<input type="text" class="form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][fontfamily]" value="' . esc_attr( stripslashes( $fontfamily ) ) . '" placeholder="Font Family" data-metatype="fontfamily" data-opt-index="' . esc_attr( $opt_index ) . '">';

					$html_input .= '<input type="text" class="form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][fontdisplay]" value="' . esc_attr( $fontdisplay ) . '" placeholder="Font Display Text (Optional)" data-metatype="fontdisplay" data-opt-index="' . esc_attr( $opt_index ) . '">';

					$html_input .= '<label style="width: 30%;margin-left: 13px;margin-top: 7px;">';
					$html_input .= '<input type="checkbox" class="form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][is_customfont]" data-metatype="is_customfont" data-opt-index="' . esc_attr( $opt_index ) . '" ' . checked( $customfonts, 'on', false ) . ' style="margin-right: 5px;margin-top: 0px;">' . __( 'Custom Font', 'woocommerce-product-addon' ) . '</label>';

					$html_input .= '<button class="btn btn-success ppom-add-option" data-option-type="paired"><i class="fa fa-plus" aria-hidden="true"></i></button>';
					$html_input .= '<button class="btn btn-danger ppom-remove-option"><i class="fa fa-minus" aria-hidden="true"></i></button>';

					$html_input .= '</li>';

					$opt_index0 = $last_array_id;
					$opt_index0 ++;

				}
			} else {
				$html_input .= '<li class="data-options" style="display: flex;" data-condition-type="simple_options">';

				$html_input .= '<span class="dashicons dashicons-move"></span>';

				$html_input .= '<input type="text" class="form-control ppom-option-keys" placeholder="Font Family" data-metatype="fontfamily">';

				$html_input .= '<input type="text" class="form-control ppom-option-keys" placeholder="Display As Label (Optional)" data-metatype="fontdisplay">';

				$html_input .= '<label style="width: 30%;margin-left: 13px;margin-top: 7px;">';
				$html_input .= '<input type="checkbox" class="form-control ppom-option-keys"  data-metatype="is_customfont" style="margin-right: 5px;margin-top: 0px;">' . __( 'Custom Font', 'woocommerce-product-addon' ) . '</label>';

				$html_input .= '<button class="btn btn-success ppom-add-option" data-option-type="paired"><i class="fa fa-plus" aria-hidden="true"></i></button>';
				$html_input .= '<button class="btn btn-danger ppom-remove-option"><i class="fa fa-minus" aria-hidden="true"></i></button>';

				$html_input .= '</li>';
			}
			$html_input .= '<input type="hidden" id="ppom-meta-opt-index" value="' . esc_attr( $opt_index0 ) . '">';
			$html_input .= '<ul/>';
		}

		return $html_input;
	}


	/**
	 * PPOM Admin Tabs =
	 */
	function ppom_tabs_render( $tabs, $fields_type ) {

		$tabs['fonts_family_tab'] = array(
			'label'        => __( 'Fonts Family', 'woocommerce-product-addon' ),
			'class'        => array( 'ppom-tabs-label' ),
			'field_depend' => array( 'fonts' ),
		);

		$tabs['preview_text_tab'] = array(
			'label'        => __( 'Font Preview', 'woocommerce-product-addon' ),
			'class'        => array( 'ppom-tabs-label' ),
			'field_depend' => array( 'fonts' ),
		);

		return $tabs;
	}


	/**
	 * Handle Admin Tabs Classes
	 */
	function ppom_tabs_classes( $settings ) {

		foreach ( $settings as $fields_meta_key => $meta ) {

			$type = isset( $meta['type'] ) ? $meta['type'] : '';

			if ( $type == 'fonts_paired' ) {
				$settings['options']['tabs_class'] = array( 'ppom_handle_fonts_family_tab', 'col-md-12' );
			} elseif ( $fields_meta_key == 'label_placeholder' ) {
				$settings['maxlength']['tabs_class']                        = array(
					'ppom_handle_preview_text_tab',
					'col-md-6',
				);
				$settings['minlength']['tabs_class']                        = array(
					'ppom_handle_preview_text_tab',
					'col-md-6',
				);
				$settings['preview_addtocart']['tabs_class']                = array(
					'ppom_handle_preview_text_tab',
					'col-md-6',
				);
				$settings['preview_data_id']['tabs_class']                  = array(
					'ppom_handle_preview_text_tab',
					'col-md-6',
				);
				$settings['label_placeholder']['tabs_class']                = array(
					'ppom_handle_preview_text_tab',
					'col-md-6',
				);
				$settings['preview_hide']['tabs_class']                     = array(
					'ppom_handle_preview_text_tab',
					'col-md-6',
				);
				$settings['label_preview']['tabs_class']                    = array(
					'ppom_handle_preview_text_tab',
					'col-md-6',
				);
				$settings['preview_box_textcolor']['tabs_class']            = array(
					'ppom_handle_preview_text_tab',
					'col-md-6',
				);
				$settings['preview_box_textcolor_datasource']['tabs_class'] = array(
					'ppom_handle_preview_text_tab',
					'col-md-6',
				);
				$settings['preview_box_bgcolor']['tabs_class']              = array(
					'ppom_handle_preview_text_tab',
					'col-md-6',
				);
				$settings['preview_box_bgcolor_datasource']['tabs_class']   = array(
					'ppom_handle_preview_text_tab',
					'col-md-6',
				);
				$settings['preview_class']['tabs_class']                    = array(
					'ppom_handle_preview_text_tab',
					'col-md-6',
				);
			}
		}

		return $settings;
	}
}
