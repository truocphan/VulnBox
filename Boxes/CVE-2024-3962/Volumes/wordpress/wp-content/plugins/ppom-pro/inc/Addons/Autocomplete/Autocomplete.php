<?php
/**
 * Plugin Name: PPOM Addon Select Option Quantity
 * Description: Select quantity against each selected option.
 * Version: 1.3
 * Text Domain: ppom-atcp
 * License: GPL2
 */

namespace PPOM_Pro\Addons\Autocomplete;

class Autocomplete extends \PPOM_Pro\Abstract_Addon {
	/**
	 * Run hooks.
	 *
	 * @return void
	 */
	function run_hooks() {
		// Load action for input scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'input_scripts' ), 10, 2 );

		// Rendering selectqty inputs
		add_action( 'ppom_rendering_inputs', array( $this, 'input_render' ), 10, 5 );
		// add_action('ppom_rendering_inputs_selectqty', array($this, 'input_render'), 10, 5 );

		// File path
		add_filter( 'nm_input_class-selectqty', array( $this, 'selectqty_addon_path' ), 10, 2 );

		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'selectqty_load_addon' ), 10, 2 );

		add_filter( 'ppom_fields_tabs_show', array( $this, 'tabs_handler' ), 10, 2 );

		add_filter( 'ppom_meta_data', array( $this, 'cart_items' ), 15, 2 );
	}

	/*
	**============= Load AutoComplete Addon Settings ================
	*/
	function selectqty_addon_path( $path, $type ) {
		if ( file_exists( $this->addon_path . '/classes/input.selectqty.php' ) ) {
			$path = $this->addon_path . '/classes/input.selectqty.php';
		}

		return $path;
	}


	function cart_items( $ppom_data, $cart_item ) {

		$product_id = $cart_item['data']->post_type == 'product' ? $cart_item['data']->get_id() : $cart_item['data']->get_parent_id();

		// ppom_pa($cart_item['ppom']['fields']);

		foreach ( $cart_item['ppom']['fields'] as $key => $value ) {

			$field_meta = ppom_get_field_meta_by_dataname( $product_id, $key );

			$field_type  = isset( $field_meta['type'] ) ? $field_meta['type'] : '';
			$field_title = isset( $field_meta['title'] ) ? $field_meta['title'] : '';

			if ( $field_type != 'selectqty' ) {
				continue;
			}

			$meta_value = $value['option'] . 'x' . $value['qty'];

			$ppom_data[ $key ] = array(
				'name'  => $field_title,
				'value' => $meta_value,
			);
		}

		return $ppom_data;
	}


	/*
	**============= Loading All PRO Inputs ================
	*/
	function selectqty_load_addon( $inputs_array, $inputObj ) {

		// selectqtying selectqty addon is enable
		$inputs_array['selectqty'] = $inputObj->get_input( 'selectqty' );

		return $inputs_array;
	}


	/*
	**============= Load Scripts ================
	*/
	function input_scripts( $field, $data_name ) {
		if ( $field['type'] != 'selectqty' ) {
			return '';
		}

		wp_enqueue_script( 'selectqty_script', $this->addon_url . '/js/selectqty.js', array( 'jquery' ), true );
	}


	/*
	**============= AutoComplete Input Render ================
	*/
	function input_render( $meta, $data_name, $classes, $field_label, $options ) {

		if ( $meta['type'] != 'selectqty' ) {
			return '';
		}

		$fm = new \PPOM_InputManager( $meta, 'selectqty' );

		if ( ! isset( $meta['options'] ) ) {
			return '';
		}

		// ppom_pa($meta);

		global $product;

		$template_vars = array(
			'field_meta'    => $meta,
			'default_value' => '',
			'product'       => $product,
			'addon_path'    => $this->addon_path,
		);
		$this->load_template( 'quantities.php', $template_vars );
	}

	function tabs_handler( $tabs, $fields_type ) {
		if ( $fields_type == 'selectqty' ) {

			$tabs['add_option_tab']['field_depend'] = array( 'selectqty' );
		}

		return $tabs;
	}
}
