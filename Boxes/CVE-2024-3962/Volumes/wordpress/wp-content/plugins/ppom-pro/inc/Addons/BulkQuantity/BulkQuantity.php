<?php
/**
 * Plugin Name: PPOM Addon: Bulk Quantity
 * Description: Add Quantities and Bulk Prices
 * Version: 2.5
 * Text Domain: ppom-addon-bulkquantity
 */
namespace PPOM_Pro\Addons\BulkQuantity;

use PPOM_Pro\Abstract_Addon;
use PPOM_Meta;

class BulkQuantity extends Abstract_Addon {

    var $path, $url;

    public function run_hooks()
	{
		$this->_setup();

		// PPOM Settings Filter
        add_filter( 'ppom_settings_data', array($this, 'bulkquantity_setting'), 10, 1);
	}

    function _setup() {
	    // Loading all input in PRO
        add_filter('ppom_all_inputs', array($this, 'load_addon'), 10, 2);
        // File path
        add_filter('nm_input_class-bulkquantity', array($this, 'addon_path'), 10, 2);

        // rendering inputs
        // add_action('ppom_rendering_inputs', array($this, 'render_input'), 10, 5 );
        add_action('ppom_rendering_inputs_bulkquantity', array($this, 'render_input_new'), 10, 2 );

        // Control quantity on cart when quantities used
		// add_filter( 'woocommerce_add_to_cart_quantity', array($this, 'add_to_cart_quantity'), 10, 2);

        add_filter( 'woocommerce_cart_item_quantity', array($this, 'cart_item_quantity'), 10, 3);
        add_filter( 'woocommerce_checkout_cart_item_quantity', array($this,'control_checkout_quantity'), 10, 3);

        add_filter( 'woocommerce_order_item_quantity_html', array($this, 'control_oder_item_quantity'), 10, 2);
		add_filter( 'woocommerce_email_order_item_quantity', array($this, 'control_email_item_quantity'), 10, 2);
		add_filter( 'woocommerce_order_item_get_quantity', array($this, 'control_order_item_quantity'), 10, 2);

        // Changing price display on Shop/Product Page
        add_filter('woocommerce_get_price_html', array($this, 'change_price_display'), 30, 2);

        // Handling shipping cost for bulkquantity
        // add_filter('woocommerce_get_shipping_classes', array($this, 'calculate_shipping'), 99, 1);

        // Settings Panel Framework
        $this->load_settings();
    }

    // Loading all PRO inputs
	function load_addon( $inputs_array, $inputObj) {

	   // checking fixedprice addon is enable
		$inputs_array['bulkquantity'] = $inputObj->get_input ( 'bulkquantity' );

		return $inputs_array;
	}

	function addon_path($path, $type) {

		if( file_exists($this->addon_path. '/classes/input.bulkquantity.php') ) {
			$path = $this->addon_path. "/classes/input.{$type}.php";
		}

		return $path;
	}

	function render_input($meta, $data_name, $classes, $field_label, $options) {

		if( $meta['type'] != 'bulkquantity' ) return '';

		$type       = $meta['type'];
        $id         = $data_name;
        $label      = $field_label;

		if( $options == '' ) {
			echo __("Please set options for this from settings", "woocommerce-product-addon");
			return;
		}

    	$html       = '<div id="ppom-input-bulkquantity" class="form-group bulkquantity">';

        if( $field_label ){
            $html   .= '<label class="form-control-label" for="'.$data_name.'">';
            $html   .= sprintf(__("%s", "woocommerce-product-addon"), $field_label) .'</label>';
        }

        // display settings
        $display_type = ppom_get_option('ppom-bq-display-type');

        if(empty($display_type)) $display_type = 'bq_standard';

		wp_enqueue_style('bq-style', $this->addon_url."/enqueue/bq-style.css");
		wp_enqueue_script('bq-script', $this->addon_url."/enqueue/bq-script.js");
		if($display_type == 'bq_packaged'){

			wp_enqueue_style('bq-style-packaged', $this->addon_url."/enqueue/style.css");
			wp_enqueue_script('bq-script-packaged', $this->addon_url."/enqueue/script.js");

		}
			$template_vars = array('args' => $meta,'label'=>$label);
	        ob_start();
	        ppom_load_file( $this->addon_path .'/templates/input.bulkquantity.php', $template_vars);
	        $html .= ob_get_clean();

		$html      .= '</div>';    //form-group
    	// filter: nmforms_input_htmls
        echo apply_filters("nmforms_input_html", $html, $meta, $options);

	}

	function render_input_new($meta, $default_value){

        if( $meta['type'] != 'bulkquantity' ) return '';

        // ppom_pa($meta); return;

        $type       = $meta['type'];
        $id         = $meta['data_name'];
        $data_name	= $meta['data_name'];
        $field_label= $meta['title'];
        $options	= $meta['options'];

		if( $options == '' ) {
			echo __("Please set options for this from settings", "woocommerce-product-addon");
			return;
		}

    	$html       = '<div id="ppom-input-bulkquantity" class="form-group bulkquantity">';

        if( $field_label ){
            $html   .= '<label class="form-control-label" for="'.$data_name.'">';
            $html   .= sprintf(__("%s", "woocommerce-product-addon"), $field_label) .'</label>';
        }

        // display settings
        $display_type = ppom_get_option('ppom-bq-display-type');

        if(empty($display_type)) $display_type = 'bq_standard';

		wp_enqueue_style('bq-style', $this->addon_url."/enqueue/bq-style.css");
		wp_enqueue_script('bq-script', $this->addon_url."/enqueue/bq-script.js");
		if($display_type == 'bq_packaged'){

			wp_enqueue_style('bq-style-packaged', $this->addon_url."/enqueue/style.css");
			wp_enqueue_script('bq-script-packaged', $this->addon_url."/enqueue/script.js");

		}
			$template_vars = array('args' => $meta,'label'=>$field_label);
	        ob_start();
	        ppom_load_file( $this->addon_path .'/templates/input.bulkquantity.php', $template_vars);
	        $html .= ob_get_clean();

		$html      .= '</div>';    //form-group
    	// filter: nmforms_input_htmls
        echo apply_filters("ppom_bulkquantity_html", $html, $meta, $options);


    }

	// When quantities is used then reset quantity to 1
	function add_to_cart_quantity( $quantity, $product_id ) {

		if( function_exists('ppom_is_cart_quantity_updatable') ) {
			if( ! ppom_is_cart_quantity_updatable( $product_id) ) {
				$quantity = 1;
			}
		}

		return $quantity;
	}


    public function cart_item_quantity( $quantity, $cart_item_key, $cart_item ) {


    	// Check if bulkquantity is in cart
    	$product = $cart_item['data'];
    	$bulkquantity_field = ppom_has_field_by_type(ppom_get_product_id($product), 'bulkquantity');
		if ( ! $bulkquantity_field ) return $quantity;

		$ppom_meta = ppom_make_meta_data( $cart_item );
		if( isset( $ppom_meta['ppom_has_quantities'] )
		        && $ppom_meta['ppom_has_quantities'] != 0){

		    $bulkquantity_found = $ppom_meta['ppom_has_quantities']['value'];
			$quantity = '<span class="ppom-cart-quantity">'.$bulkquantity_found.'</span>';
		}

		return $quantity;
	}

    public function control_checkout_quantity( $quantity, $cart_item, $cart_item_key ) {

		// ppom_pa($cart_item);
    	$ppom_meta = ppom_make_meta_data( $cart_item );
		if( isset( $ppom_meta['ppom_has_quantities'] )
		        && $ppom_meta['ppom_has_quantities'] != 0){

			$bulkquantity_found = $ppom_meta['ppom_has_quantities']['value'];
			$input_value = intval($bulkquantity_found);
			$quantity = $input_value;
		}

		return $quantity;
	}

    function control_oder_item_quantity($quantity, $item) {

    	$ppom_has_quantities = 0;

		// ppom_pa($item->get_meta_data());
		foreach( $item->get_meta_data() as $meta ) {
			if( $meta -> key == 'ppom_has_quantities') {
				$ppom_has_quantities = $meta->value;
			}
		}

		if( $ppom_has_quantities == 0 ) return $quantity;

		$quantity = '<strong class="product-quantity">' . sprintf( "&times; %s", $ppom_has_quantities ) . '</strong>';

		return $quantity;
	}

	function control_email_item_quantity($quantity, $item) {

		$ppom_has_quantities = 0;

		foreach( $item->get_meta_data() as $meta ) {
			if( $meta -> key == 'ppom_has_quantities') {
				$ppom_has_quantities = $meta->value;
			}
		}

		if( $ppom_has_quantities == 0 ) return $quantity;

		$quantity = '<strong class="product-quantity">' . sprintf( "%s", $ppom_has_quantities ) . '</strong>';

		return $quantity;
	}

	function control_order_item_quantity($quantity, $item) {

		$ppom_has_quantities = 0;

		foreach( $item->get_meta_data() as $meta ) {
			if( $meta -> key == 'ppom_has_quantities') {
				$ppom_has_quantities = $meta->value;
			}
		}

		if( $ppom_has_quantities == 0 ) return $quantity;

		$quantity = $ppom_has_quantities;

		return $quantity;
	}

	function change_price_display( $price, $product ) {

		$product_id = ppom_get_product_id($product);
		$ppom		= new PPOM_Meta( $product_id );

		if( ! $ppom->is_exists ) return $price;

		$ppom_quantities_found = ppom_has_field_by_type( $product_id, 'bulkquantity' );

		if( !isset($ppom_quantities_found[0]) ) return $price;

		$bq = $ppom_quantities_found[0];

		$pricerange = isset($bq['show_pricerange']) ? $bq['show_pricerange'] : '';

		if ( $pricerange !== 'on' ) {
			return $price;
		}

		$options = $bq['options'];
		$display_data = json_decode(stripcslashes($options), true);

		$bq_prices = array();
		// Getting all prices in an array
		foreach($display_data as $data) {
			$base_price = array_key_exists( 'Base Price', $data ) ? $data['Base Price'] : 0;

			foreach($data as $label => $value) {
				if( $label === 'Base Price' || $label === 'Quantity Range' ) {
					continue;
				}

				if( is_numeric( $value ) ) {
					$bq_prices[] = $value + $base_price;
				}
			}
		}

		$from_price = min($bq_prices);
		$to_price	= max($bq_prices);

		// show price range
		return wc_format_price_range( $from_price, $to_price);
	}


	// Calculate shipping
	function calculate_shipping( $shipping_classes ) {

		ppom_pa($shipping_classes);
		// Trying to update shipping...
		return $shipping_classes;
	}

	/*
    **============= BulkQuantity settings meta ================
    */
    function bulkquantity_setting( $ppom_settings ) {

        // Settings meta
        $ppom_settings[] = array(
            'title'     => __( 'PPOM Bulk Quantity Settings', 'woocommerce-product-addon' ),
            'type'     => 'title',
            'desc'     => '',
            'id'       => 'ppom_bq_id'
        );
        $ppom_settings[] = array(
                'title'             => __( 'Display type', 'woocommerce-product-addon' ),
                'type'              => 'select',
                'label'             => __( 'Button', 'woocommerce-product-addon' ),
                'default'           => 'Bulk Quantity Standard',
                'options' => array( 'bq_standard'=>'Bulk Quantity Standard',
                                    'bq_packaged'=> 'Bulk Quantity Packaged'
                                ),
                'id'       => 'ppom-bq-display-type',
                'desc'       => __( 'you can control Bulk quantity view in two way, see demo for each type for more details.', 'woocommerce-product-addon' ),
                'desc_tip'      => true,
        );
        $ppom_settings[] = array(
                'type' => 'sectionend',
                'id'   => 'ppom_bq_id',
        );

        return $ppom_settings;
    }

    function load_settings() {

        $settings = array(
    		'ppom-bq-display-type' => array(
				'type'              => 'select',
				'title'             => __( 'Display type', 'woocommerce-product-addon' ),
				'default'           => 'Bulk Quantity Standard',
				'options' => array(
					'bq_standard' => 'Bulk Quantity Standard',
                    'bq_packaged' => 'Bulk Quantity Packaged'
                ),
				'desc'       => __( 'you can control Bulk quantity view in two way, see demo for each type for more details.', 'woocommerce-product-addon' ),
				'tooltip'    => true,
	        )
        );

        $panels = array(
            'ppom_addon_bulkquantity' => array(
                'id'        => 'ppom_addon_bulkquantity',
                'title'		=> __( 'Bulk Quantity', 'woocommerce-product-addon' ),
                'desc'      => 'It will render the bulkquantity settings.',
                'icon'      => '',
                'active'     => 'yes',
                'is_sabpanel' => true,
            ),
        );

        $tabs = array(
            'ppom_addons' =>
            array(
                'title'   => 'Addons',
                'tab_id'    => 'ppom_addons',
                'enable'  => true,
            )
        );

        PPOMSETTINGS()->register_tabs($tabs)->register_panel('ppom_addons', $panels)->register_setting('ppom_addon_bulkquantity', $settings);
    }
}