<?php
/**
 * Plugin Name: PPOM Addon Fields Repeater
 * Description: PPOM Fields repeater/cloner clone icon.
 * Version: 1.2
 * Text Domain: ppom-repeater
 * License: GPL2
 */

namespace PPOM_Pro\Addons\Repeater;

use PPOM_Pro\Abstract_Addon;
use PPOM_Pro\Traits\StringUtility;
use PPOM_Pro\Utility\FieldClone;

class Repeater extends Abstract_Addon {
	use StringUtility;

	/**
	 * @var string
	 */
	private $icon_lib;

	const SETTING_KEY_FRONTEND_REPEAT_BTN_POSITION = 'ppom_repeater_clone_position';
	const SETTING_KEY_REPEATER_STATUS              = 'productmeta_validation';

	/**
	 * Override abstract method of Abstract_Addon::run_hooks
	 *
	 * @return void
	 */
	function run_hooks() {
		$this->icon_lib = ppom_get_option( 'ppom_repeater_icon_lib', 'dashicons' );

		/**
		 * Disable unique field checking mechanism
		 *
		 * QM-2
		 */
		add_filter( 'ppom_has_unique_fields', '__return_true', 99, 2 );

		add_filter( 'ppom_before_ppom_fields', array( $this, 'render_frontend_before_ppom_fields' ) );
		add_filter( 'ppom_after_ppom_fields', array( $this, 'render_frontend_after_ppom_fields' ) );

		// Load Custom Scripts
		add_action( 'ppom_after_scripts_loaded', array( $this, 'load_frontend_scripts' ), 10, 2 );
		add_action( 'ppom_addon_cartedit_scripts_loaded', array( $this, 'load_scripts_cart_edit' ) );

		// saving ppom meta field with clone_meta key
		add_filter( 'ppom_meta_data_saving', array( $this, 'update_ppom_field' ), 22, 2 );

		// PPOM Settings
		add_action( 'ppom_field_meta_general_tab', array( $this, 'render_admin_add_clone_option' ), 22, 1 );

		$this->handle_enable_repeater_toggle();

		// adding dataname in class 
		add_filter( 'ppom_input_classes', array( $this, 'add_dataname_class' ), 22, 2 );
		add_filter( 'ppom_input_meta_classes', array( $this, 'add_dataname_class' ), 22, 2 );
		add_filter( 'ppom_legacy_input_meta_classes', array( $this, 'add_dataname_class' ), 22, 2 );

		add_filter( 'ppom_get_field_by_dataname_dataname', array( $this, 'change_dataname_for_clone_felds' ), 22, 2 );

		add_filter( 'ppom_add_to_cart_validation', array( $this, 'disable_validation_when_repeater' ), 99, 3 );
	}

	/**
	 * Handler to saving the "Enable PPOM Repeater" toggle to the PPOM Fields Group.
	 * Saves repeater feature status of the PPOM Fields Group.
	 *
	 * @return void
	 */
	private function handle_enable_repeater_toggle() {
		// for the resh PPOM Fields Group creations
		add_filter( 'ppom_settings_meta_data_new', array( $this, 'save_clone_settings' ), 22, 1 );

		// for the updating a PPOM Fields Group.
		add_filter( 'ppom_settings_meta_data_update', array( $this, 'save_clone_settings' ), 22, 1 );
	}

	/**
	 * Is the repeater enabled for the Form Fields Group (meta)
	 *
	 * @param  \PPOM_Meta $ppom_meta
	 * @return bool
	 */
	private function is_repeater_enabled( $ppom_meta ) {
		return $ppom_meta->ppom_settings->{self::SETTING_KEY_REPEATER_STATUS} === 'on';
	}

	/**
	 * Disable frontend add to cart validation if Repeater is on
	 *
	 * QM-1
	 *
	 * @param  bool       $passed Current validation status
	 * @param  \PPOM_Meta $ppom_meta Product Field Group (Meta)
	 * @param  int        $product_id WC Product ID
	 * @return bool overridden validation status
	 */
	public function disable_validation_when_repeater( $passed, $ppom_meta, $product_id ) {
		if ( $this->is_repeater_enabled( $ppom_meta ) ) {
			return true;
		}

		return $passed;
	}

	/**
	 * Represents the button location of the Repeat Button.
	 *
	 * @return string accepted values: top|bottom
	 */
	private function frontend_repeat_btn_position() {
		return ppom_get_option( self::SETTING_KEY_FRONTEND_REPEAT_BTN_POSITION, 'bottom' );

	}

	/**
	 * In frontend: inject the wrapper related to repeater before the field group.
	 *
	 * @param  \PPOM_Form $form_obj Frontend form rendering class.
	 * @return void
	 */
	public function render_frontend_before_ppom_fields( $form_obj ) {
		if ( ! $this->is_repeater_enabled( $form_obj::$ppom ) ) {
			return;
		}

		echo '<div class="ppom-repeater-wrapper form-row" data-repeater-id="0">';

		if ( $this->frontend_repeat_btn_position() == 'top' ) {
			$this->render_clone_tools();
		}
	}

	/**
	 * In frontend, inject the closing wrapper that related to repeater after the field group.
	 *
	 * @param  \PPOM_Form $form_obj Frontend form rendering class.
	 * @return void
	 */
	public function render_frontend_after_ppom_fields( $form_obj ) {
		if ( ! $this->is_repeater_enabled( $form_obj::$ppom ) ) {
			return;
		}

		if ( $this->frontend_repeat_btn_position() == 'bottom' ) {
			$this->render_clone_tools();
		}

		echo '</div>  <!-- ppom-repeater-wrapper -->';
	}

	/**
	 * Render the "repeater" button in frontend.
	 *
	 * @return void
	 */
	private function render_clone_tools() {
		$clone_title  = ppom_get_option( 'ppom_repeater_clone_title', 'Clone' );
		$remove_title = ppom_get_option( 'ppom_repeater_remove_title', 'Remove' );
		$icons_size   = ppom_get_option( 'ppom_repeater_icons_size', '25px' );
		$clone_mode   = ppom_get_option( 'ppom_repeater_clone_mode' );

		ob_start();
		$this->load_template(
			'clone-tools.php',
			[
				'clone_title'  => $clone_title,
				'remove_title' => $remove_title,
				'clone_mode'   => $clone_mode,
				'icons_size'   => $icons_size,
				'icon_lib'     => $this->icon_lib,
			] 
		);
		echo ob_get_clean();
	}

	/**
	 * Loads frontend scripts
	 *
	 * @param  \PPOM_Meta  $ppom_meta
	 * @param  \WC_Product $product
	 * @return void
	 */
	function load_frontend_scripts( $ppom_meta, $product ) {
		// productmeta_validation is actually saving the clone_enabl settings, not link with validation

		if ( ! $ppom_meta->ppom_settings ) {
			return;
		}

		if ( ! $this->is_repeater_enabled( $ppom_meta ) ) {
			return;
		}

		$clone_mode = ppom_get_option( 'ppom_repeater_clone_mode' );

		wp_enqueue_script( 'ppom-repeater', PPOM_PRO_URL . '/assets/repeater/frontend/build/main.js', array( 'jquery' ), PPOM_PRO_VERSION );
		wp_localize_script( 'ppom-repeater', 'ppom_repeater_vars', [ 'clone_mode' => $clone_mode ] );
		wp_enqueue_style( 'ppom-repeater', $this->addon_url . '/assets/ppom-repeater.css' );
		if ( $this->icon_lib == 'dashicons' ) {
			wp_enqueue_style( 'dashicons' );
		}
	}

	// cart edit addon compatibility
	function load_scripts_cart_edit() {

		$clone_mode = ppom_get_option( 'ppom_repeater_clone_mode' );

		wp_enqueue_script( 'ppom-repeater', PPOM_PRO_URL . '/assets/repeater/frontend/build/main.js', array( 'jquery' ), PPOM_PRO_VERSION );
		wp_localize_script( 'ppom-repeater', 'ppom_repeater_vars', [ 'clone_mode' => $clone_mode ] );
		wp_enqueue_style( 'ppom-repeater', $this->addon_url . '/assets/ppom-repeater.css' );
		if ( $this->icon_lib == 'dashicons' ) {
			wp_enqueue_style( 'dashicons' );
		}
	}

	/**
	 * Render Enable Repeater toggle in Admin -> PPOM Edit Group
	 *
	 * @param  \PPOM_Meta $ppom Manages a PPOM Fields group
	 * @return void
	 */
	function render_admin_add_clone_option( $ppom ) {
		$is_enabled = '';

		if ( $ppom ) {
			$product_meta_id = intval( $_REQUEST ['productmeta_id'] );
			$ppom_settings   = $ppom->get_settings_by_id( $product_meta_id ); // QM-5
			$is_enabled      = isset( $ppom_settings->{self::SETTING_KEY_REPEATER_STATUS} ) ? $ppom_settings->{self::SETTING_KEY_REPEATER_STATUS} : '';
		}
		?>

		<?php _e( 'Enable PPOM Repeater', 'woocommerce-product-addon' ); ?>
		<div class="onoffswitch">
			<input <?php checked( $is_enabled, 'on' ); ?> type="checkbox" class="onoffswitch-checkbox" id="ppom-repeater-switch"
										  tabindex="0">
			<label class="onoffswitch-label" for="ppom-repeater-switch">
				<span class="onoffswitch-inner"></span>
				<span class="onoffswitch-switch"></span>
			</label>
			<input type="hidden" value="<?php echo $is_enabled; ?>" name="ppom_repeater_enable"
				   id="ppom_repeater_enable">
		</div>

		<?php
	}

	/**
	 * If Repeater is "On": mark the "productmeta_validation" item of the Product Fields Group(meta) array as "On" during the PPOM Field Group saving
	 *
	 * QM-3
	 *
	 * @param  array $meta Meta of the PPOM Fields Group
	 * @return array revised Meta of the PPOM Fields Group.
	 */
	public function save_clone_settings( $meta ) {
		if ( isset( $_POST['ppom_repeater_enable'] ) ) {
			$meta[ self::SETTING_KEY_REPEATER_STATUS ] = $_POST['ppom_repeater_enable'];
		}

		return $meta;
	}

	/**
	 * In frontend; Add data name to the HTML form elements
	 *
	 * @param  array $classes Current classes of the HTML form element.
	 * @param  array $meta Meta details of the PPOM field.
	 * @return array
	 */
	public function add_dataname_class( $classes, $meta ) {
		$data_name = $meta['data_name'];

		if( in_array($data_name, $classes, true) ) {
			return $classes;
		}

		$classes[] = $meta['data_name'];

		return $classes;
	}

	/**
     * Remove __clone_ suffix from the data name of the HTML Element.
     *
     * @param  string $data_name Data Name of the submitted HTML Element.
     * @param  \PPOM_Meta $ppom PPOM Meta Group.
     * @return string cloned dataname transformed to original data name with removing the cloning indicator suffix.
     */
	public function change_dataname_for_clone_felds( $data_name, $ppom ) {
		if ( ! $this->is_repeater_enabled( $ppom ) ) {
			return $data_name;
		}

		return FieldClone::get_original_dataname($data_name);
	}

	/**
	 * During the saving of the field group editing form: If Repeater is on; marks the the value of is_cloned of the field arrays as true.
	 *
	 * @param  array $ppom_meta Array of the field arrays.
	 * @param  int   $productmeta_id Product Meta Group ID.
	 * @return array Updated $ppom_meta array
	 */
	function update_ppom_field( $ppom_meta, $productmeta_id ) {
		$is_repeated_enabled = isset( $_POST['ppom_repeater_enable'] ) && $_POST['ppom_repeater_enable'] == 'on';

		return array_map(
			function ( $meta ) use ( $is_repeated_enabled ) {
				if ( $is_repeated_enabled ) {
					  $meta['is_cloned'] = true;
				} else {
					unset( $meta['is_closed'] );
				}

				return $meta;
			},
			$ppom_meta 
		);
	}

	/**
	 * Register Repeater Settings to show in the PPOM General Settings (WooCommerce->PPOM Settings->Addons->Fields Repeater Addon)
	 *
	 * @return void
	 */
	function load_settings() {
		$settings = array(
			'ppom_repeater_clone_title'                    => array(
				'type'    => 'text',
				'title'   => __( 'Clone Title', 'woocommerce-product-addon' ),
				'desc'    => __( 'Add HTML code here for pdf header and add inline css for styling.', 'woocommerce-product-addon' ),
				'tooltip' => true,
			),
			'ppom_repeater_remove_title'                   => array(
				'type'    => 'text',
				'title'   => __( 'Remove Title', 'woocommerce-product-addon' ),
				'desc'    => __( 'Add HTML code here for pdf footer and add inline css for styling.', 'woocommerce-product-addon' ),
				'tooltip' => true,
			),
			'ppom_repeater_icons_size'                     => array(
				'type'    => 'text',
				'title'   => __( 'Icons Size', 'woocommerce-product-addon' ),
				'desc'    => __( 'Clone/Remove icons size e.g 25px', 'woocommerce-product-addon' ),
				'tooltip' => true,
			),
			'ppom_repeater_clone_mode'                     => array(
				'type'    => 'select',
				'options' => [
					'first_box' => 'Clone from first box only',
					'each_box'  => 'Clone from each box',
				],
				'title'   => __( 'Clone Mode', 'woocommerce-product-addon' ),
				'desc'    => __( 'How to clone the fields', 'woocommerce-product-addon' ),
			),
			self::SETTING_KEY_FRONTEND_REPEAT_BTN_POSITION => array(
				'type'    => 'select',
				'options' => [
					'top'    => 'Top',
					'bottom' => 'Bottom',
				],
				'title'   => __( 'Clone icons position', 'woocommerce-product-addon' ),
				'desc'    => __( 'The icons placements', 'woocommerce-product-addon' ),
			),
			'ppom_repeater_icon_lib'                       => array(
				'type'    => 'select',
				'options' => [
					'dashicons'   => 'Dashicons',
					'fontawesome' => 'FontAwesome',
				],
				'title'   => __( 'Icons Lib', 'woocommerce-product-addon' ),
				'desc'    => __( 'Choose fonts library', 'woocommerce-product-addon' ),
			),
		);

		$panels = array(
			'ppom_addon_repeater' => array(
				'id'          => 'ppom_addon_repeater',
				'title'       => __( 'Fields Repeater Addon', 'woocommerce-product-addon' ),
				'desc'        => 'Addon Settings.',
				'icon'        => '',
				'active'      => 'on',
				'is_sabpanel' => true,
			),
		);

		$tabs = array(
			'ppom_addons' =>
					array(
						'title'  => 'Addons',
						'tab_id' => 'ppom_addons',
						'enable' => true,
					),
		);

		PPOMSETTINGS()->register_tabs( $tabs )->register_panel( 'ppom_addons', $panels )->register_setting( 'ppom_addon_repeater', $settings );
	}
}
