jQuery(function($){
    const SELECTOR_ORIGIN_FIELD = 'select[data-metatype="origin"]';

    // Show setup settings only if the feature is enabled
    $(document).on('click', '.ppom_cfr_enable input[type=checkbox]', (e) => {
        setFormVisibility($(e.target));
    });

    const showAvailableMagicTags = (originSelectEl) => {
        const originDataName = originSelectEl.val();

        const originType = $(`input[data-metatype="data_name"][value="${originDataName}"]`) ?. parents('.ppom-fields-actions').find('input[data-metatype="type"]').val();

        if( ! originDataName ) {
            originSelectEl.siblings('.magic-tags').hide();
            return;
        }

        originSelectEl.siblings('.magic-tags').show();

        const magicTagOptionTitle = originSelectEl.siblings('.magic-tags').find('.mt-option_title');

        if( ['quantities', 'qtypack'].includes( originType ) ) {
            magicTagOptionTitle.show();
        }else{
            magicTagOptionTitle.hide();
        }
    }

    $(document).on('change', '.ppom-field-repeat-origin', (e) => {
        const originSelectEl = $(e.target);

        showAvailableMagicTags(originSelectEl);
    });

    /**
     * Prepares the Checkout Fields Repeater setup form if the Checkout Fields Repeater tab is clicked.
     */
    $(document).on('click', '.ppom-field-repeater-tab-js', (e) => {
        e.preventDefault();
        setFormVisibility($(e.target).parents('.ppom-fields-actions').find(`input[data-metatype="${conditionalFieldRepater.constants.SETTING_KEY_ENABLE}"]`));
        setAvailableOrigins();
        populateOriginOptions();
    });

    // Attach an index value to the newly created field.
    $(document).on('ppom_new_field_created', function(e, newField, fieldNo){
        const metaField = $(newField).find(SELECTOR_ORIGIN_FIELD);
        const fieldName = `ppom[${fieldNo}][${conditionalFieldRepater.constants.SETTING_KEY_FORM}][${metaField.attr('data-metatype')}]`;
        metaField.attr('name', fieldName);
    });

    // Available fields that source of the repeaters.
    let availableOrigins = [];

    /**
     * Set setup form visibility according to the enable checkbox.
     *
     * @param {jQuery} checkboxEl
     */
    const setFormVisibility = (checkboxEl) => {
        const isEnabled = $(checkboxEl).is(':checked');

        checkboxEl.parents('.ppom-slider').find('.ppom_cfr_setup_form').css('visibility', isEnabled ? 'visible' : 'hidden' );
    }

    const setAvailableOrigins = () => {
        // reset the origins data
        availableOrigins = [];

        $(".ppom-slider").each(function(i, item) {
            const itemEl = $(item);

            const title = itemEl.find(
                'input[data-metatype="title"]').val();
                const value = itemEl.find(
                'input[data-metatype="data_name"]').val();

            const type = itemEl.find('input[data-metatype="type"]').val();

            if( $.trim( value ) !== '' && ['number', 'quantities', 'qtypack'].includes(type) ) {
                const ownField = availableOrigins.filter((field)=>field.value===value).length > 0;

                if( ownField ) {
                    return;
                }

                availableOrigins.push({title, value});
            }
        });
    }

    /**
     * Reset all options of the Select Element.
     *
     * @param {jQuery} selectEl
     */
    const resetSelectOptions = (selectEl) => {
        selectEl.html('');
        const option = `<option value="">${conditionalFieldRepater.i18n.none}</option>`;
        $(option).appendTo(selectEl)
    }

    /**
     * Fills the HTML Select element that responsible from the repeater source with available options.
     */
    const populateOriginOptions = () => {
        // Update all select elements in the conditional field repeater form for every field popup in the page.
        $('.ppom-slider').each(function() {
            // Is this current modal? Returns true for the current opened field group modal.
            const isOpened = $(this).is(':visible');

            var conditionalElementsValue = $(this).find(
                'input[data-metatype="data_name"]').val();

            // Do not add origin options for non-exists fields (select form in the conditional field repeater part of the field modals)
            if (! isOpened && $.trim(conditionalElementsValue) === '') {
                return;
            }

            const selectEl = $(this).find(SELECTOR_ORIGIN_FIELD);
            resetSelectOptions(selectEl);
            const current_value = selectEl.attr("data-existingvalue");

            for( const field of availableOrigins ) {
                const selected = current_value === field.value ? 'selected ' : '';

                // Do not show the own in the available origin list.
                if( field.value === conditionalElementsValue ) {
                    continue;
                }

                const html = '<option ' + selected + 'value="' +
                    field.value + '">' +
                    field.title +
                    '</option>';

                $(html).appendTo(selectEl);
            }

            showAvailableMagicTags(selectEl);
        });
    }

    $(document).on('click', '.ppom-copy-to-clipboard', (e) => {
        e.preventDefault();
        const shortcode = e.target.textContent;

        navigator.clipboard.writeText(shortcode).then(() => alert( `${conditionalFieldRepater.i18n.text_copied}:${shortcode}` ))
    });

    // save the selected origin value to "data-existingvalue" attr.
    $(document).on('change', '.ppom-field-repeat-origin', function(e) {
        e.preventDefault();

        var element_values = $(this).val();
        $(this).attr('data-existingvalue', element_values);
    });
});