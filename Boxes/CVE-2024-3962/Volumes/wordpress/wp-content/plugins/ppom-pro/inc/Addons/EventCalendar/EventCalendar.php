<?php
/**
 * Plugin Name: PPOM Addon Event Calendar
 * Description: An addon to PPOM
 * Version: 1.1
 * Text Domain: ppom-eventcalendar
 * License: GPL2
 */

namespace PPOM_Pro\Addons\EventCalendar;

use PPOM_Pro\Abstract_Addon;
use PPOM_Pro\Traits\Meta_Utility;

class EventCalendar extends Abstract_Addon {
	use Meta_Utility;

	function run_hooks() {
		// Load action for input scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'hook_input_scripts' ), 10, 2 );

		// Rendering ce inputs
		add_action( 'ppom_rendering_inputs', array( $this, 'render_input_eventcalendar' ), 10, 5 );

		// File path
		add_filter( 'nm_input_class-eventcalendar', array( $this, 'addon_path_eventcalendar' ), 10, 2 );

		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );

		// hook for render tabs
		add_filter( 'ppom_fields_tabs_show', array( $this, 'tabs_render' ), 10, 2 );
		add_filter( 'ppom_tabs_panel_classes', array( $this, 'ppom_tabs_classes' ), 10, 1 );

		// Admin input settings
		add_filter( 'render_input_types', array( $this, 'admin_settings' ), 10, 6 );

		// Admin file enque hook
		add_action( 'admin_enqueue_scripts', array( $this, 'load_script' ) );

		// hook for complete wc order
		// add_action( 'woocommerce_thankyou', array($this,'order_completed'), 10, 1 );
		add_action( 'woocommerce_order_status_completed', array( $this, 'order_completed' ), 10, 1 );

		// change date formate
		add_filter( 'ppom_eventcalendar_formats', array( $this, 'change_date_formate' ), 10, 2 );

		// PPOM Settings Filter
		add_filter( 'ppom_settings_data', array( $this, 'eventcalendar_setting' ), 10, 1 );

		// plugin page setting hook
		$ppom_basename = plugin_basename( __FILE__ );
		add_filter( "plugin_action_links_{$ppom_basename}", array( $this, 'ppom_eventcalendar_settings_link' ) );
	}


	/*
	**============= Load scripts ================
	*/
	function hook_input_scripts( $field, $data_name ) {
		if ( $field['type'] != 'eventcalendar' ) {
			return '';
		}

		// ppom_pa($field);

		$tickets_vaiation      = isset( $field['options'] ) ? $field['options'] : array();
		$calendar              = isset( $field['calendar'] ) ? $field['calendar'] : array();
		$disabled_weekends     = isset( $field['hide_weekends'] ) ? $field['hide_weekends'] : '';
		$ticket_message        = isset( $field['ticket_message'] ) ? $field['ticket_message'] : '';
		$date_format           = isset( $field['date_formate'] ) ? stripcslashes( $field['date_formate'] ) : '';
		$startofday            = isset( $field['startofday'] ) ? $field['startofday'] : '';
		$tooltip_ticket_msg    = isset( $field['tooltip_ticket_msg'] ) ? $field['tooltip_ticket_msg'] : '';
		$simple_ticket_msg     = isset( $field['simple_ticket_msg'] ) ? $field['simple_ticket_msg'] : '';
		$global_price          = isset( $field['global_price'] ) ? $field['global_price'] : '';
		$disabled_global_price = isset( $field['disabled_global_price'] ) ? $field['disabled_global_price'] : '';

		// get eventcalendar setting
		$hide_baseqty = ppom_get_option( 'ppom-eventcalendar-hide-baseqty' );

		// string localize
		$price_msg = sprintf( __( '(Price/Ticket : %s)', 'woocommerce-product-addon' ), '%PRICE%' );

		$localize_vars = array();

		if ( $field['type'] == 'eventcalendar' ) {

			wp_enqueue_style( 'ppom-eventcalendar', $this->addon_url . '/css/ppom-frontent-ce.css' );
			wp_enqueue_style( 'ppom-ce-ui', $this->addon_url . '/css/jquery-ui.css' );
			wp_enqueue_script(
				'ppom-eventcalendar',
				$this->addon_url . '/js/ppom-frontent-ce.js',
				array(
					'jquery',
					'jquery-ui-datepicker',
				),
				PPOM_PRO_VERSION,
				true 
			);

			$localize_vars = array(
				'ce_meta'               => $calendar,
				'data_name'             => $data_name,
				'disabled_weekends'     => $disabled_weekends,
				'ticket_message'        => $ticket_message,
				'date_formate'          => $date_format,
				'startofday'            => $startofday,
				'tooltip_ticket_msg'    => $tooltip_ticket_msg,
				'simple_ticket_msg'     => $simple_ticket_msg,
				'price_msg'             => $price_msg,
				'hide_baseqty'          => $hide_baseqty,
				'tickets_vaiation'      => $tickets_vaiation,
				'global_price'          => $global_price,
				'disabled_global_price' => $disabled_global_price,
			);

			wp_localize_script( 'ppom-eventcalendar', "ppom_ce_{$data_name}_vars", $localize_vars );
		}

		add_filter( 'woocommerce_quantity_input_classes', array( $this, 'quantities_input_class' ), 99, 2 );
	}


	/*
	**============= Order Completed Hook ================
	*/
	function order_completed( $order_id ) {

		$wc_order   = wc_get_order( $order_id );
		$order_paid = $wc_order->is_paid();

		foreach ( $wc_order->get_items() as $order_item ) {

			$product_id = version_compare( WC_VERSION, '3.0', '<' ) ? $order_item['product_id'] : $order_item->get_product_id();

			$item_meta = $order_item->get_meta( '_ppom_fields' );

			$eventcalendar_meta = ppom_has_field_by_type( $product_id, 'eventcalendar' );

			foreach ( $eventcalendar_meta as $index => $saved_meta ) {

				$data_name    = isset( $saved_meta['data_name'] ) ? $saved_meta['data_name'] : '';
				$calender     = isset( $saved_meta['calendar'] ) ? $saved_meta['calendar'] : '';
				$date_formate = isset( $saved_meta['date_formate'] ) ? $saved_meta['date_formate'] : '';

				$order_meta = isset( $item_meta['fields'][ $data_name ] ) ? $item_meta['fields'][ $data_name ] : array();

				foreach ( $order_meta as $date => $tickets ) {

					$ppom_saved_meta = isset( $calender[ $date ] ) ? $calender[ $date ] : array();

					$ticket_in_stock = isset( $ppom_saved_meta['ticket'] ) ? $ppom_saved_meta['ticket'] : '';

					$var_ticket = 0;
					foreach ( $tickets as $variation_opt => $qty ) {
						$var_ticket += $qty;
					}

					$newticket = $ticket_in_stock - $var_ticket;

					$calender[ $date ] = array(
						'ticket' => $newticket,
					);

					$saved_meta['calendar'] = $calender;
				}

				// ppom_pa($saved_meta);
				$this->update_meta_settings( $saved_meta );
			}
		}
	}

	/*
	**============= Change Date Formate for cart and checkout by filter ================
	*/
	function change_date_formate( $date_format, $field_meta ) {

		$date_format = $this->display_formatted_date( $date_format );

		return $date_format;
	}


	/*
	**============= function for change date formate ================
	*/
	function display_formatted_date( $date_format ) {


		if ( $date_format == 'd MM, y' ) {
			$date_format = 'd F, y';
		} elseif ( $date_format == 'mm/dd/yy' ) {
			$date_format = 'm/d/Y';
		} elseif ( $date_format == 'yy-mm-dd' ) {
			$date_format = 'Y-m-d';
		} elseif ( $date_format == 'DD, d MM, yy' ) {
			$date_format = 'l, d F, Y';
		}

		return $date_format;
	}


	/*
	**============= Admin Site File Enqueue ================
	*/
	function load_script( $hook ) {

		if ( ! isset( $_GET['page'] ) || $_GET['page'] != 'ppom' ) {
			return;
		}

		wp_enqueue_script( 'ppom-eventcalendar', $this->addon_url . '/js/ppom-admin-ce.js', array( 'jquery' ), PPOM_PRO_VERSION, true );
	}


	/*
	**============= ce inputs path load ================
	*/
	function addon_path_eventcalendar( $path, $type ) {
		if ( file_exists( $this->addon_path . '/classes/input.eventcalendar.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}


	/*
	**============= Loading all PRO inputs ================
	*/
	function load_addon( $inputs_array, $inputObj ) {

		// checking ce addon is enable
		$inputs_array['eventcalendar'] = $inputObj->get_input( 'eventcalendar' );

		return $inputs_array;
	}


	/*
	**============= Frontent meta rendering ================
	*/
	function render_input_eventcalendar( $meta, $data_name, $classes, $field_label, $options ) {

		if ( $meta['type'] != 'eventcalendar' ) {
			return '';
		}

		// ppom_pa($meta);

		$meta['id']          = $data_name;
		$input_wrapper_class = 'form-group';
		$input_wrapper_class = 'ppom-input-eventcalendar';
		$input_wrapper_class = apply_filters( 'ppom_input_wrapper_class', $input_wrapper_class, $meta );

		$date_format    = isset( $meta['date_formate'] ) ? $meta['date_formate'] : '';
		$formatted_date = $this->display_formatted_date( $date_format );

		$html  = '';
		$html .= '<div class="' . esc_attr( $input_wrapper_class ) . '">';

		$save_meta = isset( $_POST['ppom']['fields'][ $data_name ] ) ? $_POST['ppom']['fields'][ $data_name ] : array();

		// get event total price
		// $total_price = $this->event_total_price($meta, $save_meta);


		if ( $field_label ) {
			$html .= '<label class="form-control-label" for="' . esc_attr( $data_name ) . '">';
			$html .= sprintf( __( '%s', 'woocommerce-product-addon' ), $field_label ) . '</label>';
		}

		ob_start();
		$templates_name = 'eventcalendar.php';
		$template_vars  = array(
			'meta'        => $meta,
			'date_format' => $formatted_date,
			'saved_meta'  => $save_meta,
		);
		$this->load_template( $templates_name, $template_vars );
		$html .= ob_get_clean();

		$html .= '</div>';    // form-group

		echo apply_filters( 'ppom_eventcalendar_html', $html );
	}


	/*
	**============= Event Total Price Display ================
	*/
	function event_total_price( $meta, $save_meta ) {

		$ticket_price       = 0;
		$total_price        = 0;
		$disbl_global_price = isset( $meta['disabled_global_price'] ) ? $meta['disabled_global_price'] : '';
		$global_price       = isset( $meta['global_price'] ) ? $meta['global_price'] : 0;

		$options = isset( $meta['options'] ) ? $meta['options'] : array();

		if ( $disbl_global_price != 'on' ) {

			$options[] = array(
				'price'  => $global_price,
				'option' => 'Simple',
				'id'     => 'simple',
			);
		}

		foreach ( $options as $index => $meta ) {

			$variation_option = isset( $meta['option'] ) ? $meta['option'] : '';
			$variation_id     = isset( $meta['id'] ) ? $meta['id'] : '';
			$variation_price  = isset( $meta['price'] ) ? $meta['price'] : '';

			foreach ( $save_meta as $date => $ticket_meta ) {

				$quantity = isset( $ticket_meta[ $variation_option ] ) ? $ticket_meta[ $variation_option ] : 0;

				$ticket_price = $variation_price * intval( $quantity );
				$total_price += $ticket_price;
			}
		}

		return $total_price;
	}


	/*
	**============= Admin Settings  ================
	*/
	function admin_settings( $html_input, $type, $name, $values, $options, $field_index ) {

		if ( $type == 'calendar-paired' ) {

			$html_input .= '<div class="ppom-eventcalendar-wrapper">';

			$html_input .= '<div class="ppom-eventcalendar-ranger">';

			$html_input .= '<div class="row">';
			$html_input .= '<div class="col-md-4 col-sm-4">';
			$html_input .= '<label>' . __( 'Start Date', 'woocommerce-product-addon' ) . '</label>';
			$html_input .= '<input type="date" class="form-control ppom-eventcalendar-startdate" />';
			$html_input .= '</div>';
			$html_input .= '<div class="col-md-4 col-sm-4">';
			$html_input .= '<label>' . __( 'End Date', 'woocommerce-product-addon' ) . '</label>';
			$html_input .= '<input type="date" class="form-control ppom-eventcalendar-enddate" />';
			$html_input .= '</div>';
			$html_input .= '<div class="col-md-3 col-sm-3">';
			$html_input .= '<label>' . __( 'Tickets Available', 'woocommerce-product-addon' ) . '</label>';
			$html_input .= '<input type="number" class="form-control ppom-eventcalendar-ticket" placeholder="Tickets">';
			$html_input .= '</div>';
			$html_input .= '</div>';

			$html_input .= '<div class="ppom-eventcalendar-addrange text-right">';
			$html_input .= '<button class="btn btn-primary">' . __( 'Add New Date Range', 'woocommerce-product-addon' ) . '</button>';
			$html_input .= '</div>';
			$html_input .= '</div>';

			$html_input .= '<br>';

			$html_input .= '<table class="table">';
			$html_input .= '<thead>';
			$html_input .= '<tr>';
			$html_input .= '<th>' . __( 'Dates', 'woocommerce-product-addon' ) . '</th>';
			$html_input .= '<th>' . __( 'Tickets Available', 'woocommerce-product-addon' ) . '</th>';
			$html_input .= '<th><button class="btn ppom-eventcalendar-rm-all">' . __( 'Remove All', 'woocommerce-product-addon' ) . '</button></th>';
			$html_input .= '</tr>';
			$html_input .= '</thead>';
			$html_input .= '<tbody>';

			if ( $values ) {
				foreach ( $values as $dates => $date_meta ) {

					$price  = isset( $date_meta['price'] ) ? $date_meta['price'] : '';
					$ticket = isset( $date_meta['ticket'] ) ? $date_meta['ticket'] : '';

					$html_input .= '<tr class="old-tr">';
					$html_input .= '<td>' . $dates . '</td>';
					$html_input .= '<td data-event="ticket">';
					$html_input .= '<input type="number" class="form-control ppom-eventcalendar-field" name="ppom[' . esc_attr( $field_index ) . '][calendar][' . esc_attr( $dates ) . '][ticket]" placeholder="ticket" value="' . esc_attr( $ticket ) . '" data-metatype="ticket" data-date="' . esc_attr( $dates ) . '">';
					$html_input .= '</td>';
					$html_input .= '<td>';
					$html_input .= '<button class="btn ppom-eventcalendar-rm">' . __( 'Remove', 'woocommerce-product-addon' ) . '</button>';
					$html_input .= '</td>';
					$html_input .= '</tr>';
				}
			}
			$html_input .= '</tbody>';
			$html_input .= '</table>';
			$html_input .= '</div>';

		} elseif ( $type == 'ticket-variation-paired' ) {

			$opt_index0  = 1;
			$html_input .= '<ul class="ppom-options-container ppom-options-sortable ppom-eventcalendar-options">';

			if ( $values ) {

				$last_array_id = max( array_keys( $values ) );

				foreach ( $values as $opt_index => $option ) {

					$option_id   = ppom_get_option_id( $option );
					$html_input .= '<li class="data-options ppom-sortable-handle" style="display: flex;" data-condition-type="simple_options">';
					$html_input .= '<span class="dashicons dashicons-move"></span>';

					$html_input .= '<input type="text" class="option-title form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][option]" value="' . esc_attr( stripslashes( $option['option'] ) ) . '" placeholder="' . __( 'Option', 'woocommerce-product-addon' ) . '" data-metatype="option" data-opt-index="' . esc_attr( $opt_index ) . '">';

					$html_input .= '<input type="text" class="option-price form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][price]" value="' . esc_attr( $option['price'] ) . '" placeholder="' . __( 'Price (optional)', 'woocommerce-product-addon' ) . '" data-metatype="price" data-opt-index="' . esc_attr( $opt_index ) . '">';

					$html_input .= '<button class="btn btn-success ppom-add-option" data-option-type="paired"><i class="fa fa-plus" aria-hidden="true"></i></button>';
					$html_input .= '<button class="btn btn-danger ppom-remove-option"><i class="fa fa-minus" aria-hidden="true"></i></button>';

					$html_input .= '</li>';

					$opt_index0 = $last_array_id;
					$opt_index0 ++;

				}
			} else {
				$html_input .= '<li class="data-options" style="display: flex;" data-condition-type="simple_options">';
				$html_input .= '<span class="dashicons dashicons-move"></span>';

				$html_input .= '<input type="text" class="option-title form-control ppom-option-keys" placeholder="' . __( 'Option', 'woocommerce-product-addon' ) . '" data-metatype="option">';

				$html_input .= '<input type="text" class="option-price form-control ppom-option-keys" placeholder="' . __( 'Price (optional)', 'woocommerce-product-addon' ) . '" data-metatype="price">';

				$html_input .= '<button class="btn btn-success ppom-add-option" data-option-type="paired"><i class="fa fa-plus" aria-hidden="true"></i></button>';
				$html_input .= '<button class="btn btn-danger ppom-remove-option"><i class="fa fa-minus" aria-hidden="true"></i></button>';

				$html_input .= '</li>';
			}

			$html_input .= '<input type="hidden" id="ppom-meta-opt-index" value="' . esc_attr( $opt_index0 ) . '">';
			$html_input .= '<ul/>';
		}

		return $html_input;
	}


	/*
	**============= Show variation tabs ================
	*/
	function tabs_render( $tabs, $fields_type ) {

		$tabs['eventcalendar_tab'] = array(
			'label'        => __( 'Manage Tickets', 'woocommerce-product-addon' ),
			'class'        => array( 'ppom-tabs-label' ),
			'field_depend' => array( 'eventcalendar' ),
		);

		$tabs['ticket_variation_tab'] = array(
			'label'        => __( 'Tickets Variation And Price', 'woocommerce-product-addon' ),
			'class'        => array( 'ppom-tabs-label' ),
			'field_depend' => array( 'eventcalendar' ),
		);

		$tabs['calendar_style_tab'] = array(
			'label'        => __( 'Design', 'woocommerce-product-addon' ),
			'class'        => array( 'ppom-tabs-label' ),
			'field_depend' => array( 'eventcalendar' ),
		);

		return $tabs;
	}


	/*
	**============= Show tabs panel classes ================
	*/
	function ppom_tabs_classes( $settings ) {

		foreach ( $settings as $fields_meta_key => $meta ) {

			$type = isset( $meta['type'] ) ? $meta['type'] : '';

			if ( $type == 'calendar-paired' ) {
				$settings['calendar']['tabs_class'] = array( 'ppom_handle_eventcalendar_tab', 'col-md-12' );
			} elseif ( $fields_meta_key == 'calendar_bgcolor' ) {
				$settings['calendar_bgcolor']['tabs_class'] = array( 'ppom_handle_calendar_style_tab', 'col-md-6' );
			} elseif ( $fields_meta_key == 'calendar_header_color' ) {
				$settings['calendar_header_color']['tabs_class'] = array(
					'ppom_handle_calendar_style_tab',
					'col-md-6',
				);
			} elseif ( $fields_meta_key == 'date_bgcolor' ) {
				$settings['date_bgcolor']['tabs_class'] = array( 'ppom_handle_calendar_style_tab', 'col-md-6' );
			} elseif ( $fields_meta_key == 'selected_date_bgcolor' ) {
				$settings['selected_date_bgcolor']['tabs_class'] = array(
					'ppom_handle_calendar_style_tab',
					'col-md-6',
				);
			} elseif ( $fields_meta_key == 'qty_box_bgcolor' ) {
				$settings['qty_box_bgcolor']['tabs_class'] = array( 'ppom_handle_calendar_style_tab', 'col-md-6' );
			} elseif ( $fields_meta_key == 'qty_box_textcolor' ) {
				$settings['qty_box_textcolor']['tabs_class'] = array( 'ppom_handle_calendar_style_tab', 'col-md-6' );
			} elseif ( $fields_meta_key == 'qty_cross_icon' ) {
				$settings['qty_cross_icon']['tabs_class'] = array( 'ppom_handle_calendar_style_tab', 'col-md-6' );
			} elseif ( $fields_meta_key == 'global_price' ) {
				$settings['global_price']['tabs_class'] = array( 'ppom_handle_ticket_variation_tab', 'col-md-6' );
			} elseif ( $fields_meta_key == 'disabled_global_price' ) {
				$settings['disabled_global_price']['tabs_class'] = array(
					'ppom_handle_ticket_variation_tab',
					'col-md-12',
				);
			} elseif ( $type == 'ticket-variation-paired' ) {
				$settings['options']['tabs_class'] = array( 'ppom_handle_ticket_variation_tab', 'col-md-12' );
			}
		}

		return $settings;
	}


	/*
	**============= Event Calendar settings meta ================
	*/
	function eventcalendar_setting( $ppom_settings ) {

		// Settings meta
		$ppom_settings[] = array(
			'title' => __( 'PPOM Event Calendar', 'woocommerce-product-addon' ),
			'type'  => 'title',
			'desc'  => '',
			'id'    => 'ppom_eventcalendar_id',
		);

		$ppom_settings[] = array(
			'title'   => __( 'Hide Quantity Box', 'woocommerce-product-addon' ),
			'type'    => 'checkbox',
			'label'   => __( 'Button', 'woocommerce-product-addon' ),
			'default' => '',
			'id'      => 'ppom-eventcalendar-hide-baseqty',
			'desc'    => __( 'Hide product quantity box.', 'woocommerce-product-addon' ),
		);

		$ppom_settings[] = array(
			'type' => 'sectionend',
			'id'   => 'ppom_eventcalendar_id',
		);


		return $ppom_settings;
	}

	function load_settings() {

		$settings = array(
			'ppom-eventcalendar-hide-baseqty' => array(
				'type'  => 'checkbox',
				'title' => __( 'Hide Quantity Box', 'woocommerce-product-addon' ),
				'desc'  => __( 'Hide product quantity box.', 'woocommerce-product-addon' ),
			),
		);

		$panels = array(
			'ppom_addon_eventcalendar' => array(
				'id'          => 'ppom_addon_eventcalendar',
				'title'       => __( 'Event Calendar', 'woocommerce-product-addon' ),
				'desc'        => 'It will render the event calendar settings.',
				'icon'        => '',
				'active'      => 'yes',
				'is_sabpanel' => true,
			),
		);

		$tabs = array(
			'ppom_addons' =>
				array(
					'title'  => 'Addons',
					'tab_id' => 'ppom_addons',
					'enable' => true,
				),
		);

		PPOMSETTINGS()->register_tabs( $tabs )->register_panel( 'ppom_addons', $panels )->register_setting( 'ppom_addon_eventcalendar', $settings );
	}


	/*
	**========== Settings Link On Plugin Page ===========
	*/
	function ppom_eventcalendar_settings_link( $links ) {

		$wc_settings_page = admin_url( 'admin.php?page=wc-settings' );
		$ppom_pdf_url     = add_query_arg( array( 'tab' => 'ppom_settings' ), $wc_settings_page );

		$ppom_links   = array();
		$ppom_links[] = sprintf( __( '<a href="%s">Settings</a>', 'woocommerce-product-addon' ), esc_url( $ppom_pdf_url ) );


		foreach ( $ppom_links as $link ) {

			array_push( $links, $link );
		}

		return $links;
	}

	// Adding class in product page quantity field: ppom-qty-found to hide
	function quantities_input_class( $classes, $product ) {

		$classes[] = 'ppom-qty-found';

		return $classes;
	}
}
