import { rename_ids } from './utilities';

/**
 * PPOM Repeater Addon JS
 */
 jQuery(function($){
    var PPOM_Repeater = {

        cloned_counter: 0,

        init: function() {
            // alert('i');
            this.handle_click_clone();
            this.handle_click_remove();
            this.catch_file_upload_event();
        },

        handle_click_clone: function() {
          jQuery(document).on('click',".ppom-repeater-clone", function(e){
             e.preventDefault();
            ++PPOM_Repeater.cloned_counter;

            const $fields = $(this).closest(".ppom-repeater-wrapper");

            PPOM_Repeater.clone_fields($fields, function(cloned_fields){
               rename_ids(cloned_fields, PPOM_Repeater.cloned_counter, function(ppom_inputs){
                    PPOM_Repeater.apply_conditions(ppom_inputs);
                    PPOM_Repeater.init_input_js(ppom_inputs);
                    ppom_update_option_prices();
               });

               $('.ppom-rendering-fields').trigger( 'ppom_repeated', [ cloned_fields ] );
            });
          });
        },

        handle_click_remove: function() {
          jQuery(document).on('click',".ppom-repeater-remove", function(e){
             e.preventDefault();
            // --PPOM_Repeater.cloned_counter;
            const $fields = $(this).closest(".ppom-repeater-wrapper").remove();
            ppom_update_option_prices();
            // PPOM_Repeater.clone_fields($fields);
          });
        },

        catch_file_upload_event() {
            $(document).on('ppom_file_uploaded', function(e){

                if( e.file_meta.org_data_name === undefined ) return;
                const org_dname = e.file_meta.org_data_name;
                const $wrapper_id = $(`#ppom-file-container-${e.file_meta.data_name}`).closest('.ppom-repeater-wrapper').data('repeater-id');
                $(`.ppom-file-cb-${e.file_meta.data_name}`).map( (i, input) => {
                    const $name = `ppom[fields][${org_dname}__clone_${$wrapper_id}][${e.file.id}][org]`;
                    $(input).attr('name', $name);
                });
            })
        },

        clone_fields: function($fields, callback) {
            const $container = $(".ppom-rendering-fields");
            const cloned_fields = $fields.clone().attr('data-repeater-id',PPOM_Repeater.cloned_counter).appendTo($container);
            callback(cloned_fields);
        },
        init_input_js(ppom_inputs){
            $.each(ppom_inputs, function(index, input) {

                var InputSelector = jQuery("#" + input.data_name);

                switch(input.type){

                    case 'date':
                        if (input.jquery_dp === 'on') {
                            InputSelector.removeClass('hasDatepicker')
                            .removeData('datepicker')
                            .unbind();

                            InputSelector.datepicker({
                                changeMonth: true,
                                changeYear: true,
                                dateFormat: input.date_formats.ppom_js_stripSlashes(),
                                yearRange: input.year_range,
                            });

                            if (typeof input.past_dates !== 'undefined') {
                                if (input.past_dates.length > 0) {
                                    var minDate = input.past_dates.trim();
                                    // accommodate for previous values with "on" as the option
                                    if (minDate === "on") { minDate = new Date(); }
                                    InputSelector.datepicker('option', 'minDate', minDate);
                                }
                            }

                            if (input.no_weekends === 'on') {
                                InputSelector.datepicker('option', 'beforeShowDay', jQuery.datepicker.noWeekends);
                            }
                        }
                    break;

                    case 'color':

                    // $(`.ppom-input-${input.data_name}`).find('.iris-picker').remove();
                    InputSelector.css('background-color', input.default_color);
                    var iris_options = {
                        'palettes': ppom_get_palette_setting(input),
                        'hide': input.show_onload == 'on' ? false : true,
                        'color': input.default_color,
                        'mode': input.palettes_mode != '' ? input.palettes_mode : 'hsv',
                        'width': input.palettes_width != '' ? input.palettes_width : 200,
                        change: function(event, ui) {

                            InputSelector.css('background-color', ui.color.toString());
                            InputSelector.css('color', '#fff');

                            // Getting Color Code for update price
                            InputSelector.val(ui.color.toString());
                        }
                    }

                    // console.log(iris_options);
                    InputSelector.iris(iris_options);
                    InputSelector.iris('hide');
                    break;

                    case 'file':
                        const file_inputs = ppom_inputs.filter( f => f.type == 'file');
                        file_inputs.map( file => ppom_setup_file_upload_input(file) );
                        break;
                }
            });
        },

        apply_conditions(ppom_inputs) {
            const ppom_condtions = {...ppom_input_vars.conditions};
            Object.keys(ppom_condtions).map( (field, index) => {
                ppom_inputs.map( f => {
            // console.log(f);
                    if( f.org_data_name === field ){
                        // console.log(f,ppom_condtions[field]);
                        var f_wrapper = $(`.ppom-field-wrapper.${f.data_name}`);
                        f_wrapper.attr('data-cond-total', ppom_condtions[field].rules.length)
                        .attr('data-cond-bind',ppom_condtions[field].bound)
                        .attr('data-cond-visibility',ppom_condtions[field].visibility);
                        ppom_condtions[field].rules.map( (rule,index) => {
                            var element_newname = ppom_inputs.find( i => i.org_data_name === rule.elements );
                            // console.log(element_newname);
                            f_wrapper
                            .removeClass(`ppom-cond-${rule.elements}`)
                            .addClass(`ppom-cond-${element_newname.data_name}`)
                            .removeClass(`ppom-locked-${rule.elements}`)
                            .addClass(`ppom-locked-${element_newname.data_name}`)
                            .attr(`data-cond-input${++index}`,element_newname.data_name);

                        })
                    }
                })
            })
        }
    }

    PPOM_Repeater.init();
});