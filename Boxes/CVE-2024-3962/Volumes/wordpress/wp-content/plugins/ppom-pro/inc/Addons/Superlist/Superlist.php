<?php
/**
 * Plugin Name: PPOM Addon Super List
 * Description: PPOM Super List addon contains many pre-defined lists to render as Select field on product page. It includes Countries, Currencies, Months etc. For more details for all available lists please visit demo.
 * Version: 1.0
 * Text Domain: ppom-superlist
 * License: GPL2
 */

namespace PPOM_Pro\Addons\Superlist;

use PPOM_Pro\Abstract_Addon;

class Superlist extends Abstract_Addon {

	function run_hooks() {
		// Load action for input scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'ppom_superlist_hook_input_scripts' ), 10, 2 );

		// Rendering superlist inputs
		add_action( 'ppom_rendering_inputs', array( $this, 'superlist_input_render' ), 10, 5 );

		// File path
		add_filter( 'nm_input_class-superlist', array( $this, 'ppom_superlist_addon_path' ), 10, 2 );

		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'ppom_superlist_load_addon' ), 10, 2 );
	}

	/*
	**============= Load Superlist Addon Settings ================
	*/
	function ppom_superlist_addon_path( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.superlist.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}


	/*
	**============= Loading All PRO Inputs ================
	*/
	function ppom_superlist_load_addon( $inputs_array, $inputObj ) {

		// ppom_atcping superlist addon is enable
		$inputs_array['superlist'] = $inputObj->get_input( 'superlist' );

		return $inputs_array;
	}


	/*
	**============= Load Scripts ================
	*/
	function ppom_superlist_hook_input_scripts( $field, $data_name ) {

		if ( $field['type'] != 'ppom_atcp' && $field['type'] != 'multiple_select' ) {
			return '';
		}

		wp_enqueue_style( 'ppom-multiselect-css', $this->addon_url . '/css/ppom-auto-complete.css', true );

		if ( $field['type'] == 'ppom_atcp' ) {

			$options = isset( $field['options'] ) ? $field['options'] : '';

			$options_array = array();

			foreach ( $options as $opt ) {

				$option_label    = isset( $opt['label'] ) ? $opt['label'] : '';
				$options_array[] = $option_label;
			}

			wp_enqueue_style( 'ppom_jquery_ui_css', PPOM_URL . '/js/ui/css/smoothness/jquery-ui-1.10.3.custom.min.css', true );

			wp_enqueue_script(
				'ppom_atcp_script',
				$this->addon_url . '/js/ppom_atcp.js',
				array(
					'jquery',
					'jquery-ui-autocomplete',
				),
				true 
			);

			// localizing script file
			wp_localize_script(
				'ppom_atcp_script',
				'ppom_atcp_vars',
				array(
					'all_available_tags' => $options_array,
				)
			);

		} elseif ( $field['type'] == 'multiple_select' ) {

			wp_enqueue_style( 'ppom_select2_css', $this->addon_url . '/css/select2.min.css', true );

			wp_enqueue_script( 'ppom_select2_js', $this->addon_url . '/js/select2.min.js', array( 'jquery' ), true );

			wp_enqueue_script( 'ppom_multiple_select_js', $this->addon_url . '/js/multiple_select.js', array( 'jquery' ), true );
		}
	}


	/*
	**============= AutoComplete Input Render ================
	*/
	function superlist_input_render( $meta, $data_name, $classes, $field_label, $options ) {

		if ( $meta['type'] != 'superlist' ) {
			return '';
		}


		if ( $meta['listoptions'] == 'countries' ) {

			$this->load_template(
				'country-fields.php',
				array(
					'meta'        => $meta,
					'data_name'   => $data_name,
					'classes'     => $classes,
					'field_label' => $field_label,
					'options'     => $options,
				) 
			);

		}

		if ( $meta['listoptions'] == 'color' ) {

			$this->load_template(
				'color-fields.php',
				array(
					'meta'        => $meta,
					'data_name'   => $data_name,
					'classes'     => $classes,
					'field_label' => $field_label,
					'options'     => $options,
				) 
			);

		}

		if ( $meta['listoptions'] == 'languages' ) {

			$this->load_template(
				'languages-fields.php',
				array(
					'meta'        => $meta,
					'data_name'   => $data_name,
					'classes'     => $classes,
					'field_label' => $field_label,
					'options'     => $options,
				) 
			);

		}

		if ( $meta['listoptions'] == 'currency' ) {

			$this->load_template(
				'currency-fields.php',
				array(
					'meta'        => $meta,
					'data_name'   => $data_name,
					'classes'     => $classes,
					'field_label' => $field_label,
					'options'     => $options,
				) 
			);

		}

		if ( $meta['listoptions'] == 'currency_symbol' ) {

			$this->load_template(
				'currencysymbol-fields.php',
				array(
					'meta'        => $meta,
					'data_name'   => $data_name,
					'classes'     => $classes,
					'field_label' => $field_label,
					'options'     => $options,
				) 
			);

		}

		if ( $meta['listoptions'] == 'domainname' ) {

			$this->load_template(
				'domainname-fields.php',
				array(
					'meta'        => $meta,
					'data_name'   => $data_name,
					'classes'     => $classes,
					'field_label' => $field_label,
					'options'     => $options,
				) 
			);

		}

		if ( $meta['listoptions'] == 'monthsname' ) {

			$this->load_template(
				'monthsname-fields.php',
				array(
					'meta'        => $meta,
					'data_name'   => $data_name,
					'classes'     => $classes,
					'field_label' => $field_label,
					'options'     => $options,
				) 
			);

		}

		if ( $meta['listoptions'] == 'starname' ) {

			$this->load_template(
				'starname-fields.php',
				array(
					'meta'        => $meta,
					'data_name'   => $data_name,
					'classes'     => $classes,
					'field_label' => $field_label,
					'options'     => $options,
				) 
			);

		}

		// if ($meta['listoptions'] == 'screensize') {

		// $this->load_template('screensize-fields.php', array('meta'=>$meta, 'data_name'=>$data_name, 'classes' =>$classes, 'field_label' =>$field_label, 'options' => $options));

		// }
	}
}
