"use strict"
jQuery(function($) {

    /*******************************************
     *     PPOM Quantites Pack Addon JS        *
     *******************************************/

    /*
     **============= Get All PPOM Meta ================ 
     */
    const field_meta = ppom_input_vars.field_meta;


    const ppom_qtypack = {

        inputMeta: Array(),

        /*
         **============= Quantities Pack Init ================ 
         */
        init: function(fieldID, fieldTitle) {

            this.eventsHandler();

            this.inputValidation();
        },


        /*
         **============= Store Quantites Pack Meta In Array ================ 
         */
        storePackMeta: function(field_meta) {

            const fieldID = field_meta.data_name;
            const fieldTitle = field_meta.title;

            ppom_qtypack.inputMeta[fieldID] = {};
            ppom_qtypack.inputMeta[fieldID]['title'] = fieldTitle;

            ppom_qtypack.getQuantities(fieldID);
        },


        /*
         **============= Quantities Pack Events Handler  ================ 
         */
        eventsHandler: function() {

            /*========== Get Quanitites Values And Store In Array ===========*/
            $(document).on('keyup change', '.ppom-quantity-pack-input', function(e) {
                e.preventDefault();

                const fieldID = $(this).attr('data-data_name');
                let inputVal = $(this).val();

                const field_smeta = field_meta.find(m => m.data_name === fieldID);
                // console.log(field_smeta);

                if (inputVal && field_smeta) {

                    // Calculate and store quanitites in array
                    ppom_qtypack.getQuantities(fieldID);

                    // Input Validations
                    ppom_qtypack.inputValidationHandler(fieldID, $(this));

                    // Calculate and store quanitites in array
                    ppom_qtypack.getQuantities(fieldID);

                    ppom_qtypack.inputValidation();
                }
            });
        },


        /*
         **============= Store Quantities Pack Callback Function  ================ 
         */
        getQuantities: function(fieldID) {

            const packSize = ppom_qtypack.getSettings(fieldID, 'pack_size');

            ppom_qtypack.inputMeta[fieldID]['packSize'] = packSize;

            let ppomInputWrapper = $(".ppom-input-" + fieldID);
            let list = $('.ppom-quantity-pack-input', ppomInputWrapper);

            //convert to array
            list = Array.from(list);

            let totalQty = 0;
            let optPrice = 0;

            list.map((elem, index) => {

                const QTY = parseInt($(elem).val()) || 0;
                const the_price = parseFloat( $(elem).attr('data-price') );

                if (isNaN(QTY)) { return false; }

                optPrice += QTY * the_price;
                totalQty += QTY;

                // console.log(elem,optPrice, totalQty);
                ppom_qtypack.inputMeta[fieldID]['qty'] = totalQty;
                ppom_qtypack.inputMeta[fieldID]['optPrice'] = optPrice;

            });


            // Create Hidden Input for Store the QTY
            ppom_qtypack.createHiddinInput(fieldID);
        },


        /*
         **============= Input Validation Handler  ================ 
         */
        inputValidationHandler: (fieldID, dom) => {

            const packSize = ppom_qtypack.getSettings(fieldID, 'pack_size');
            const packsize_msg = ppom_qtypack.getSettings(fieldID, 'packsize_message');

            const storeQTY = ppom_qtypack.inputMeta[fieldID].qty;

            const oldValue = $(dom).attr('data-oldvalue') || 0;

            let inputVal = $(dom).val();

            if ((storeQTY > parseInt(packSize) && parseInt(oldValue) < parseInt(inputVal)) || parseInt(inputVal) > parseInt(packSize)) {
                alert(packsize_msg);
                inputVal = oldValue;
                $(dom).val(oldValue);
            }

            // Set Input Quantities Old Value
            $(dom).attr('data-oldvalue', inputVal);
        },


        /*
         **============= Get Quantities Pack Addon Settings  ================ 
         */
        getSettings: (data_name, arg) => {

            /*============= localize script ================*/
            const settingObj = window["ppom_qtypack" + data_name + "_vars"];

            return settingObj[arg];
        },


        inputValidation: function() {

            let list = $('.ppom-quantities-pack table');

            //convert to array
            list = Array.from(list);

            let total_pack = 0;
            let total_qty = 0;
            list.map((elem, index) => {
                const fieldID = $(elem).attr('data-fieldID');

                const qty = ppom_qtypack.inputMeta[fieldID].qty;
                const packSize = ppom_qtypack.inputMeta[fieldID].packSize;

                total_qty += qty;
                total_pack += parseInt(packSize);

                if (total_qty < parseInt(total_pack)) {
                    jQuery('form.cart button[type="submit"]').attr('disabled', true);
                }
                else {
                    jQuery('form.cart button[type="submit"]').attr('disabled', false);
                }

            });
        },


        /*
         **============= Create Hidden Input For Save All Quantities Pack Meta ================ 
         */
        createHiddinInput: function(fieldID) {

            const qty = ppom_qtypack.inputMeta[fieldID].qty;
            const optPrice = ppom_qtypack.inputMeta[fieldID].optPrice;
            const the_title = ppom_qtypack.inputMeta[fieldID].title;

            var container = $(".ppom-input-" + fieldID);

            // Create Hidden Input ID
            var the_id = 'ppom-qtypack' + fieldID;

            // remove/reset
            $("#" + the_id).remove();

            $('<input/>')
                // .attr({ 'type': 'checkbox', 'name': 'ppom[fields][' + fieldID + '][qtypack_price]' })
                .attr({ 'type': 'checkbox' })
                .attr('id', the_id)
                .attr('data-price', optPrice)
                .attr('data-label', the_title)
                .prop('checked', true)
                .css('display', 'none')
                // .val(optPrice)
                .appendTo(container);

            ppom_update_option_prices();
        },
    }


    /*
     **============= PPOM Meta In Loop ================ 
     */
    field_meta.map((meta, index) => {
        if (meta.type == "qtypack") {
            ppom_qtypack.storePackMeta(meta);
        }
    });

    ppom_qtypack.init();
});
