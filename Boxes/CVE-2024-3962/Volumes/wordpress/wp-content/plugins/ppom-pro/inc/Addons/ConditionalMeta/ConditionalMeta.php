<?php
/**
 * Plugin Name: PPOM Addon Conditional Meta
 * Description: An addon to PPOM
 * Version: 1.0
 * Text Domain: ppom-conditional-meta
 * License: GPL2
 */

namespace PPOM_Pro\Addons\ConditionalMeta;

use PPOM_Pro\Abstract_Addon;

class ConditionalMeta extends Abstract_Addon {
	function run_hooks() {

		// Field Input Path
		add_filter( 'nm_input_class-conditional_meta', array( $this, 'addon_path' ), 10, 2 );

		// Loading All Input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );

		// Load PPOM Scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'hook_input_scripts' ), 10, 2 );

		// PPOM Fields Rendering
		add_action( 'ppom_rendering_inputs', array( $this, 'render_input' ), 10, 5 );

		// hook for render tabs
		add_filter( 'ppom_fields_tabs_show', array( $this, 'ppom_admin_tabs' ), 10, 2 );
		add_filter( 'ppom_tabs_panel_classes', array( $this, 'ppom_tabs_classes' ), 10, 1 );

		// Admin input settings
		add_filter( 'render_input_types', array( $this, 'admin_settings' ), 10, 6 );

		// Setting PPOM Meta ID based on query string
		add_filter( 'ppom_product_meta_id', array( $this, 'ppom_meta_id' ), 10, 2 );

		// Get PPOM Conditional Meta Ids
		add_filter( 'ppom_meta_ids_in_cart', array( $this, 'set_conditional_meta_ids' ), 10, 2 );

		add_filter( 'ppom_make_meta_data_field_type', array( $this, 'change_field_type' ), 10, 2 );
	}

	/*
	**======= Conditional Meta Input Path Load ========
	*/
	function addon_path( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.conditional_meta.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}

	/*
	**======== Loading All PRO Inputs =========
	*/
	function load_addon( $inputs_array, $inputObj ) {

		// checking Conditional Meta addon is enable
		$inputs_array['conditional_meta'] = $inputObj->get_input( 'conditional_meta' );

		return $inputs_array;
	}


	/*
	**======== Load Scripts =========
	*/
	function hook_input_scripts( $field, $data_name ) {

		if ( $field['type'] != 'conditional_meta' ) {
			return '';
		}

		if ( $field['type'] == 'conditional_meta' ) {

			$selected_optionclr = isset( $field['selected_optionclr'] ) ? $field['selected_optionclr'] : '';
			$custom_css         = '';
			if ( $selected_optionclr ) {
				$custom_css .= '.' . $data_name . ' .ppom-conditional-meta-img input:checked+img {
                      border: 2px solid ' . esc_attr( $selected_optionclr ) . ' !important;
                }';
			}

			wp_enqueue_style( 'ppom-cm-css', $this->addon_url . '/css/ppom-conditional-meta.css' );
			wp_enqueue_script( 'ppom-cm-js', $this->addon_url . '/js/ppom-conditional-meta.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

			wp_add_inline_style( 'ppom-cm-css', $custom_css );
		}
	}


	/*
	**====== Render VQMatrix Input ========
	*/
	function render_input( $meta, $data_name, $classes, $field_label, $options ) {

		if ( $meta['type'] != 'conditional_meta' ) {
			return '';
		}

		$meta['id']          = $data_name;
		$input_wrapper_class = 'form-group';
		$input_wrapper_class = apply_filters( 'ppom_input_wrapper_class', $input_wrapper_class, $meta );

		$html  = '';
		$html .= '<div class="' . esc_attr( $input_wrapper_class ) . '">';

		if ( $field_label ) {
			$html .= '<label class="form-control-label" for="' . esc_attr( $data_name ) . '">';
			$html .= sprintf( __( '%s', 'woocommerce-product-addon' ), $field_label ) . '</label>';
		}

		$templates_name = 'ppom-image.php';

		$template_vars = array(
			'meta'      => $meta,
			'data_name' => $data_name,
			'class_obj' => $this,
		);

		ob_start();
		$this->load_template( $templates_name, $template_vars );
		$html .= ob_get_clean();

		$html .= '</div>';    // form-group

		echo apply_filters( 'ppom_vqmatrix_html', $html );
	}


	function ppom_meta_id( $ppom_meta_id, $product_id ) {

		if ( ! isset( $_GET['ppom-meta'] ) ) {
			return $ppom_meta_id;
		}

		return explode( ',', $_GET['ppom-meta'] );
	}


	/*
	**============= Admin Settings  ================
	*/
	function admin_settings( $html_input, $type, $name, $values, $options, $field_index ) {

		if ( $type == 'conditional-images' ) {

			$html_input .= '<div class="pre-upload-box table-responsive">';

			$html_input .= '<button class="btn btn-info ppom-pre-upload-image-btn" data-metatype="conditional_meta">' . __( 'Select/Upload Image', 'woocommerce-product-addon' ) . '</button>';
			// ppom_pa($value);

			$opt_index0  = 0;
			$html_input .= '<ul class="ppom-options-container">';
			if ( $values ) {

				$last_array_id = max( array_keys( $values ) );

				foreach ( $values as $opt_index => $pre_uploaded_image ) {

					$image_link = ( isset( $pre_uploaded_image['link'] ) ? $pre_uploaded_image['link'] : '' );
					$image_id   = ( isset( $pre_uploaded_image['id'] ) ? $pre_uploaded_image['id'] : '' );
					$image_url  = ( isset( $pre_uploaded_image['url'] ) ? $pre_uploaded_image['url'] : '' );

					$image_name = isset( $pre_uploaded_image['link'] ) ? basename( $pre_uploaded_image['link'] ) : '';

					$html_input .= '<li class="data-options" data-condition-type="image_options">';
					$html_input .= '<span class="dashicons dashicons-move" style="margin-bottom: 7px;margin-top: 2px;"></span>';
					$html_input .= '<span class="ppom-uploader-img-title">' . $image_name . '</span>';
					$html_input .= '<div style="display: flex;">';
					$html_input .= '<div class="ppom-uploader-img-center">';
					$html_input .= '<img width="60" src="' . esc_url( $image_link ) . '" style="width: 34px;">';
					$html_input .= '</div>';
					$html_input .= '<input type="hidden" name="ppom[' . esc_attr( $field_index ) . '][images][' . esc_attr( $opt_index ) . '][link]" value="' . esc_url( $image_link ) . '" data-opt-index="' . esc_attr( $opt_index ) . '" data-metatype="link">';
					$html_input .= '<input type="hidden" name="ppom[' . esc_attr( $field_index ) . '][images][' . esc_attr( $opt_index ) . '][id]" value="' . esc_attr( $image_id ) . '" data-opt-index="' . esc_attr( $opt_index ) . '" data-metatype="id">';
					$html_input .= '<input class="form-control ppom-image-option-title" type="text" placeholder="Title" value="' . esc_attr( stripslashes( $pre_uploaded_image['title'] ) ) . '" name="ppom[' . esc_attr( $field_index ) . '][images][' . esc_attr( $opt_index ) . '][title]" data-opt-index="' . esc_attr( $opt_index ) . '" data-metatype="title">';
					$html_input .= '<input class="form-control" type="text" placeholder="Meta IDs" value="' . esc_attr( $pre_uploaded_image['meta_id'] ) . '" name="ppom[' . esc_attr( $field_index ) . '][images][' . esc_attr( $opt_index ) . '][meta_id]" data-opt-index="' . esc_attr( $opt_index ) . '" data-metatype="meta_id">';
					$html_input .= '<input class="form-control" type="text" placeholder="URL" value="' . esc_url( stripslashes( $pre_uploaded_image['url'] ) ) . '" name="ppom[' . esc_attr( $field_index ) . '][images][' . esc_attr( $opt_index ) . '][url]" data-opt-index="' . esc_attr( $opt_index ) . '" data-metatype="url">';

					$html_input .= '<button class="btn btn-danger ppom-pre-upload-delete" style="height: 35px;"><i class="fa fa-times" aria-hidden="true"></i></button>';
					$html_input .= '</div>';
					$html_input .= '</li>';

					$opt_index0 = $last_array_id;
					$opt_index0 ++;
				}
			}
			$html_input .= '</ul>';
			$html_input .= '<input type="hidden" id="ppom-meta-opt-index" value="' . esc_attr( $opt_index0 ) . '">';

			$html_input .= '</div>';

		}

		return $html_input;
	}


	/*
	**======== Add Selected Conditional Meta IDs =========
	*/
	function set_conditional_meta_ids( $meta_ids, $cart_meta ) {

		if ( isset( $cart_meta['ppom']['conditional_meta'] ) && $cart_meta['ppom']['conditional_meta'] != '' ) {
			$meta_ids = $cart_meta['ppom']['conditional_meta'];
		}

		return $meta_ids;
	}


	/*
	**======== Change Field Type For Show Image On Cart =========
	*/
	function change_field_type( $field_type, $field_meta ) {

		if ( $field_type == 'conditional_meta' ) {
			$field_type = 'image';
		}

		return $field_type;
	}

	function get_attached_meta_ids( $product_id ) {

		$ppom_obj = new \PPOM_Meta( $product_id );

		$ppom_product_id = get_post_meta( $product_id, PPOM_PRODUCT_META_KEY, true );

		if ( $ppom_product_id == 0 || $ppom_product_id == 'None' ) {
			$ppom_product_id = null;
		}

		$ppom_in_category = $ppom_obj->ppom_has_category_meta( $product_id );

		if ( $ppom_in_category && ! is_admin() ) {

			if ( is_array( $ppom_product_id ) && ! in_array( $ppom_in_category, $ppom_product_id ) ) {

				$ppom_priority = apply_filters( 'ppom_meta_priority', 'category_first' );

				if ( $ppom_priority == 'category_first' ) {
					$ppom_product_id = array_merge( $ppom_in_category, $ppom_product_id );
				} else {
					$ppom_product_id = array_merge( $ppom_product_id, $ppom_in_category );
				}           
			} elseif ( ! $ppom_product_id ) {

				$ppom_product_id = $ppom_in_category;
			}
		}

		return $ppom_product_id;
	}


	/*
	**======== Show variation tabs =========
	*/
	function ppom_admin_tabs( $tabs, $fields_type ) {

		$tabs['add_conditional_images_tab'] = array(
			'label'        => __( 'Add Images', 'woocommerce-product-addon' ),
			'class'        => array( 'ppom-tabs-label' ),
			'field_depend' => array( 'conditional_meta' ),
		);

		return $tabs;
	}


	/*
	**====== Show tabs panel classes =========
	*/
	function ppom_tabs_classes( $settings ) {

		foreach ( $settings as $fields_meta_key => $meta ) {

			$type = isset( $meta['type'] ) ? $meta['type'] : '';

			if ( $type == 'conditional-images' ) {
				$settings['images']['tabs_class'] = array( 'ppom_handle_add_conditional_images_tab', 'col-md-12' );
			}
		}

		return $settings;
	}
}
