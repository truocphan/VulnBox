<?php
/**
 * Plugin Name: PPOM Chained Add-on
 * Description: PPOM Addon to render chained input in dropdown.Unlimited cascading lists can be render without refreshing the page.
 * Version: 1.0
 * Text Domain: ppom-chained
 * License: GPL2
 */

namespace PPOM_Pro\Addons\Chained;

use PPOM_Pro\Abstract_Addon;

class Chained extends Abstract_Addon {

	function run_hooks() {

		// File path
		add_filter( 'nm_input_class-chained', array( $this, 'addon_cd_path' ), 19, 2 );
		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );
		// Load Custom Scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'load_scripts' ), 10, 2 );
		// rendering inputs
		add_action( 'ppom_rendering_inputs_chained', array( $this, 'render_input' ), 10, 5 );

		// Admin Setting filter
		add_filter( 'render_input_types', array( $this, 'ppom_render_admin_settings' ), 10, 6 );

		// Adding option keys into PPOM options (converted)
		add_filter( 'ppom_option_meta', array( $this, 'update_converted_option_keys' ), 9, 5 );

		// PPOM Admin Tabs
		add_filter( 'ppom_fields_tabs_show', array( $this, 'ppom_tabs_render' ), 10, 2 );
		add_filter( 'ppom_tabs_panel_classes', array( $this, 'ppom_tabs_classes' ), 10, 1 );

	}


	// file path function
	function addon_cd_path( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.chained.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		// ppom_pa($path);
		return $path;
	}

	/*
	**============= Loading all PRO inputs ================
	*/
	function load_addon( $inputs_array, $inputObj ) {

		$inputs_array['chained'] = $inputObj->get_input( 'chained' );

		return $inputs_array;
	}

	function render_input( $meta, $default_value ) {

		if ( $meta['type'] != 'chained' ) {
			return '';
		}

		// global $product;
		// $options = ppom_convert_options_to_key_val($meta['options'], $meta, $product);

		$options = $this->prepare_chained_options( $meta['options'] );
		// ppom_pa($options);

		$html = '';
		ob_start();

		$template_design = 'chained';

		// ppom_pa($meta);
		$this->load_template(
			'chained.php',
			array(
				'field_meta'    => $meta,
				'default_value' => $default_value,
				'addon_type'    => $template_design,
				'options'       => $options,
			) 
		);

		$html .= ob_get_clean();

		echo apply_filters( 'ppom_chained_html', $html );
	}


	// preppare options for rendering as chained
	function prepare_chained_options( $options ) {

		// extract features
		$features_only = array_map(
			function ( $item ) {
				return $item['features'];
			},
			$options 
		);

		// remove duplicates
		$features_only = array_unique( $features_only );

		$listable_array = [];
		foreach ( $features_only as $feature ) {
			$key           = sanitize_key( $feature );
			$temp['key']   = $key;
			$temp['title'] = $feature;
			$temp['data']  = array_filter(
				$options,
				function ( $opt ) use ( $feature ) {
					return $opt['features'] == $feature;
				} 
			);

			$listable_array[] = $temp;
		}

		return $listable_array;
	}


	// Load Custom Scripts function
	function load_scripts( $field, $data_name ) {

		if ( $field['type'] != 'chained' ) {
			return '';
		}

		$options = $field['options'];
		$options = $this->prepare_chained_options( $options );

		$options = array_reverse( $options );

		// ppom_pa($options);
		if ( $field['type'] == 'chained' ) {

			// wp_enqueue_style('progress_css',$this->$this->addon_url.'/css/progress.css');
			wp_enqueue_script( 'chained-js', $this->addon_url . '/js/chained.js', PPOM_PRO_VERSION, true );
			wp_enqueue_script( 'jquery-chained-js', $this->addon_url . '/js/jquery.chained.js', PPOM_PRO_VERSION, true );

			$local_vars = array(
				'options'    => $options,
				'field_meta' => $field,
			);

			wp_localize_script( 'chained-js', 'chained_vars', $local_vars );
		}
	}

	/*
	**========== Render Backend PPOM Meta Settings ===========
	*/
	function ppom_render_admin_settings( $html_input, $type, $name, $values, $options, $field_index ) {

		if ( $type == 'chained_options' ) {

			$plc_option   = ( ! empty( $placeholders ) ) ? $placeholders[0] : __( 'Option', 'woocommerce-product-addon' );
			$plc_chain    = ( isset( $placeholders[2] ) && ! empty( $placeholders ) ) ? $placeholders[2] : __( 'Chain', 'woocommerce-product-addon' );
			$plc_subchain = ( isset( $placeholders[3] ) && ! empty( $placeholders ) ) ? $placeholders[3] : __( 'Sub-Chain', 'woocommerce-product-addon' );
			$plc_id       = ( isset( $placeholders[3] ) && ! empty( $placeholders ) ) ? $placeholders[3] : __( 'Unique Option ID)', 'woocommerce-product-addon' );

			$opt_index0  = 1;
			$html_input .= '<ul class="ppom-options-container ppom-options-sortable">';

			if ( $values ) {
				// ppom_pa($values);
				$last_array_id = max( array_keys( $values ) );

				foreach ( $values as $opt_index => $option ) {

					$chained  = isset( $option['chained'] ) ? $option['chained'] : '';
					$features = isset( $option['features'] ) ? $option['features'] : '';

					$option_id   = ppom_get_option_id( $option );
					$html_input .= '<li class="data-options ppom-sortable-handle" style="display: flex;" data-condition-type="simple_options">';
					$html_input .= '<span class="dashicons dashicons-move"></span>';
					$html_input .= '<input type="text" class="option-title form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][option]" value="' . esc_attr( stripslashes( $option['option'] ) ) . '" placeholder="' . $plc_option . '" data-metatype="option" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="option-chained form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][chained]" value="' . esc_attr( $chained ) . '" placeholder="' . $plc_chain . '" data-metatype="chained" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="option-features form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][features]" value="' . esc_attr( $features ) . '" placeholder="' . $plc_subchain . '" data-metatype="features" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="option-id form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][id]" value="' . esc_attr( $option_id ) . '" placeholder="' . $plc_id . '" data-metatype="id" data-opt-index="' . esc_attr( $opt_index ) . '">';

					$html_input .= '<button class="btn btn-success ppom-add-option" data-option-type="paired"><i class="fa fa-plus" aria-hidden="true"></i></button>';
					$html_input .= '<button class="btn btn-danger ppom-remove-option"><i class="fa fa-minus" aria-hidden="true"></i></button>';

					$html_input .= '</li>';

					$opt_index0 = $last_array_id;
					$opt_index0 ++;
				}           
			} else {
				$html_input .= '<li class="data-options" style="display: flex;" data-condition-type="simple_options">';
				$html_input .= '<span class="dashicons dashicons-move"></span>';
				$html_input .= '<input type="text" class="option-title form-control ppom-option-keys" placeholder="' . $plc_option . '" data-metatype="option">';

				$html_input .= '<input type="text" class="option-chained form-control ppom-option-keys" placeholder="' . $plc_chain . '" data-metatype="chained">';

				$html_input .= '<input type="text" class="option-features form-control ppom-option-keys" placeholder="' . $plc_subchain . '" data-metatype="features">';

				$html_input .= '<input type="text" class="option-id form-control ppom-option-keys" placeholder="' . $plc_id . '" data-metatype="id">';

				$html_input .= '<button class="btn btn-success ppom-add-option" data-option-type="paired"><i class="fa fa-plus" aria-hidden="true"></i></button>';
				$html_input .= '<button class="btn btn-danger ppom-remove-option"><i class="fa fa-minus" aria-hidden="true"></i></button>';

				$html_input .= '</li>';
			}
			$html_input .= '<input type="hidden" id="ppom-meta-opt-index" value="' . esc_attr( $opt_index0 ) . '">';
			$html_input .= '<ul/>';
		}

		return $html_input;
	}

	function update_converted_option_keys( $new_option, $option_key, $option, $meta, $product ) {
		// ppom_pa($option);
		if ( ! isset( $meta['type'] ) ) {
			return $option;
		}

		switch ( $meta['type'] ) {
			case 'chained':
				$new_option[ $option_key ]['features'] = isset( $option['features'] ) ? $option['features'] : '';
				break;
		}

		return $new_option;
	}

	/* **========== Handle Admin Tabs Classes =========== */

	function ppom_tabs_classes( $settings ) {

		foreach ( $settings as $fields_meta_key => $meta ) {

			$type = isset( $meta['type'] ) ? $meta['type'] : '';

			if ( $type == 'chained_options' ) {
				$settings['options']['tabs_class'] = array( 'ppom_handle_add_option_tab', 'col-md-12' );
			}
		}

		// // ppom_pa($settings);
		return $settings;
	}

	// tabs render function
	function ppom_tabs_render( $tabs, $fields_type ) {

		if ( $fields_type == 'chained' ) {
			$tabs['add_option_tab'] = array(
				'label'        => __( 'Add Options', 'woocommerce-product-addon' ),
				'class'        => array( 'ppom-tabs-label' ),
				'field_depend' => array( 'chained' ),
			);
		}

		return $tabs;
	}
}
