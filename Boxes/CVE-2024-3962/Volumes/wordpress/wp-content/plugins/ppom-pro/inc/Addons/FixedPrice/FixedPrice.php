<?php
/**
 * Plugin Name: PPOM Addon: Package(Fixed) Price
 * Description: Package Price Addon allow admin to set prices for complex products like in printing packages of 1000 envelops
 * Version: 2.1
 * License: GPLv2 or later
 * License URI: http://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain: ppom-addon-bulkquantity
 */

namespace PPOM_Pro\Addons\FixedPrice;

use PPOM_Pro\Abstract_Addon;

class FixedPrice extends Abstract_Addon {
	function run_hooks() {
		require_once $this->addon_path . '/PPOM_FPP.php';

		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_fixedprice' ), 10, 2 );
		// rendering inputs
		add_action( 'ppom_rendering_inputs', array( $this, 'render_fixed_addon' ), 10, 5 );

		// File path
		add_filter( 'nm_input_class-fixedprice', array( $this, 'fixedprice_path' ), 10, 2 );

		// Option label filter
		add_filter( 'ppom_option_label', array( $this, 'change_option_label' ), 10, 4 );

		add_filter( 'woocommerce_cart_item_quantity', array( $this, 'control_cart_quantity' ), 15, 2 );

		// Changing price displa on loop for price matrix
		add_filter( 'woocommerce_get_price_html', array( $this, 'make_product_price_range' ), 10, 2 );
		add_filter( 'wc_price_args', array( $this, 'change_decimal_place' ), 99, 1 );

	}

	function load_fixedprice( $inputs_array, $inputObj ) {

		// checking fixedprice addon is enable
		$inputs_array['fixedprice'] = $inputObj->get_input( 'fixedprice' );

		return $inputs_array;
	}

	function fixedprice_path( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.fixedprice.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}

	function change_option_label( $option_label, $option, $meta, $product ) {
		// ppom_pa($option);
		if ( $meta['type'] != 'fixedprice' ) {
			return $option_label;
		}

		$decimal_place = ! empty( $meta['decimal_place'] ) ? $meta['decimal_place'] : self::default_decimal_places();

		$unit_plural = isset( $meta['unit_plural'] ) ? $meta['unit_plural'] : 'items';
		$unit_single = isset( $meta['unit_single'] ) ? $meta['unit_single'] : 'item';


		$per_pc = $this->get_unit_price( $option, $meta );
		$per_pc = apply_filters( 'ppom_option_price', $per_pc );

		$option_label = sprintf(
			__( '%1$d %2$s - %3$s/%4$s  -  Total %5$s', 'woocommerce-product-addon' ),
			$option['option'],
			$unit_plural,
			wc_price( $per_pc ),
			$unit_single,
			wc_price( $option['price'] )
		);

		return $option_label;
	}

	/**
	 * Frontend meta rendering
	 */
	function render_fixed_addon( $args, $data_name, $classes, $field_label, $options ) {
		if ( $args['type'] != 'fixedprice' ) {
			return '';
		}
		global $product;

		// ppom_pa($args);

		$type  = ( isset( $args['type'] ) ? $args ['type'] : '' );
		$title = ( isset( $args['title'] ) ? stripslashes( $args ['title'] ) : '' );
		// $data_name	= ( isset($args['data_name']) ? $args ['data_name'] : $title);
		// $classes    = ( isset($args['class'] ) ? $args['class'] : '');
		$id             = $data_name;
		$first_option   = isset( $args['first_option'] ) ? $args['first_option'] : '';
		$unit_plural    = isset( $args['unit_plural'] ) ? $args['unit_plural'] : '';
		$unit_single    = isset( $args['unit_single'] ) ? $args['unit_single'] : '';
		$view_type      = isset( $args['view_type'] ) ? $args['view_type'] : '';
		$decimal_place  = ! empty( $args['decimal_place'] ) ? $args['decimal_place'] : self::default_decimal_places();
		$options        = ppom_convert_options_to_key_val( $options, $args, $product );
		$field_name     = "ppom[fields][{$data_name}]";
		$selected_value = apply_filters( 'ppom_packageprice_selected_value', null, $args );

		$args['id'] = $id;

		if ( empty( $data_name ) ) {
			printf( __( 'Please provide data name property for %s', 'woocommerce-product-addon' ), $title );

			return;
		}

		$classes  = implode( ' ', $classes );
		$classes .= ' fixedprice';


		if ( ! $options ) {
			return;
		}

		$input_wrapper_class = 'ppom-fixed-price-wrapper form-group';
		$input_wrapper_class = apply_filters( 'ppom_input_wrapper_class', $input_wrapper_class, $args );

		$html = '<div class="ppom-input-fixedprice ppom-unlocked ' . esc_attr( $input_wrapper_class ) . '" data-input="' . $view_type . '">';

		if ( $field_label ) {
			$html .= '<label class="form-control-label" for="' . $id . '">';
			$html .= sprintf( __( '%s', 'woocommerce-product-addon' ), $field_label ) . '</label>';
		}
		if ( $view_type == 'select' ) {
			$html .= '<select ';
			$html .= 'id="' . esc_attr( $id ) . '" ';
			$html .= 'name="' . esc_attr( $field_name ) . '" ';
			$html .= 'class="' . esc_attr( $classes ) . '" ';
			$html .= 'data-data_name="' . esc_attr( $id ) . '" ';

			// Attributes
			/*
			foreach($attributes as $attr => $value) {

				$html      .= esc_attr($attr) . '="'.esc_attr($value).'" ';
			}*/

			$html .= '>';  // Closing select


			// ppom_pa($options);
			foreach ( $options as $key => $value ) {

				// for multiple selected

				$option_label = $value['label'];
				$option_price = $value['price'];
				$raw_label    = $value['raw'];
				$unit_price   = 0;
				$fixed_qty    = 0;
				if ( $value['price'] ) {
					// $unit_price	= wc_format_decimal( floatval($value['price'])/floatval($value['raw']), intval($decimal_place));
					$unit_price = $this->get_unit_price( $value, $args );
					$unit_price = apply_filters( 'ppom_option_price', $unit_price );
					$fixed_qty  = $value['raw'];
				}

				if ( is_array( $selected_value ) ) {

					foreach ( $selected_value as $s ) {
						$html .= '<option ' . selected( $s, $key, false ) . ' value="' . esc_attr( $key ) . '" ';
						$html .= 'data-price="' . esc_attr( $option_price ) . '" ';
						$html .= 'data-label="' . esc_attr( $option_label ) . '"';
						$html .= 'data-unitprice="' . esc_attr( $unit_price ) . '"';
						$html .= 'data-decimal_place="' . esc_attr( $decimal_place ) . '"';
						$html .= 'data-qty="' . esc_attr( $fixed_qty ) . '"';
						$html .= '>' . $option_label . '</option>';
					}
				} else {
					$html .= '<option ' . selected( $selected_value, $key, false ) . ' ';
					$html .= 'value="' . esc_attr( $key ) . '" ';
					$html .= 'data-price="' . esc_attr( $option_price ) . '" ';
					$html .= 'data-label="' . esc_attr( $raw_label ) . '"';
					$html .= 'data-title="' . esc_attr( $title ) . '"'; // Input main label/title
					$html .= 'data-unitprice="' . esc_attr( $unit_price ) . '"';
					$html .= 'data-decimal_place="' . esc_attr( $decimal_place ) . '"';
					$html .= 'data-qty="' . esc_attr( $fixed_qty ) . '"';
					$html .= '>' . $option_label . '</option>';
				}
			}

			$html .= '</select>';
		} else {
			// ppom_pa($options);
			foreach ( $options as $key => $value ) {
				// for multiple selected
				$option_id    = $id . '-' . $value['option_id'];
				$option_label = $value['label'];
				$option_price = $value['price'];
				$raw_label    = $value['raw'];
				$unit_price   = 0;
				$fixed_qty    = 0;
				if ( $value['price'] ) {
					// $unit_price	= wc_format_decimal( floatval($value['price'])/floatval($value['raw']), intval($decimal_place));
					$unit_price = $this->get_unit_price( $value, $args );
					$unit_price = apply_filters( 'ppom_option_price', $unit_price );
					$fixed_qty  = $value['raw'];
				}
				$html .= '<div>';
				$html .= '<label class="form-check-label">';
				$html .= '<input style="position: relative; top: 1px;" ';
				$html .= 'type = "radio"';
				$html .= 'id="' . esc_attr( $option_id ) . '" ';
				$html .= 'data-data_name="' . esc_attr( $id ) . '" ';
				$html .= 'name="' . esc_attr( $field_name ) . '" ';
				$html .= 'value="' . esc_attr( $key ) . '" ';
				$html .= 'class="' . esc_attr( $classes ) . '" ';
				// $html       .= 'class="'.esc_attr($classes).'" ppom-check-input';
				$html .= 'data-price="' . esc_attr( $option_price ) . '" ';
				$html .= 'data-label="' . esc_attr( $option_label ) . '"';
				$html .= 'data-unitprice="' . esc_attr( $unit_price ) . '"';
				$html .= 'data-decimal_place="' . esc_attr( $decimal_place ) . '"';
				$html .= 'data-qty="' . esc_attr( $fixed_qty ) . '"';
				$html .= '>';
				$html .= '<span>' . $option_label . '</span>';
				$html .= '</label>';
				$html .= '</div>';
			}       
		}
		$html .= '</div>';    // form-group

		// filter: nmforms_input_htmls
		echo apply_filters( 'nmforms_input_html', $html, $args, $selected_value );

	}

	function control_cart_quantity( $quantity, $cart_item_key ) {

		$cart_item = WC()->cart->get_cart_item( $cart_item_key );

		// ppom_pa($cart_item);

		$has_fixedprice = false;
		if ( isset( $cart_item['ppom']['ppom_option_price'] ) ) {

			$option_prices = json_decode( stripslashes( $cart_item['ppom']['ppom_option_price'] ), true );
			if ( $option_prices ) {
				foreach ( $option_prices as $op ) {

					if ( isset( $op['apply'] ) && $op['apply'] == 'fixedprice' ) {
						$quantity = '<span class="ppom-cart-quantity">' . $op['quantity'] . '</span>';
					}
				}
			}
		}

		return $quantity;
	}

	// alter price on shop page if price matrix found
	function make_product_price_range( $price, $product ) {

		$product_id = ppom_get_product_id( $product );

		$fp_addon_found = ppom_has_field_by_type( $product_id, 'fixedprice' );
		if ( empty( $fp_addon_found ) && apply_filters( 'ppom_fp_hide_product_price_if_zero', true, $product ) ) {
			if ( $product->get_price() <= 0 ) {
				return '';
			}
		}

		if ( empty( $fp_addon_found ) ) {
			return $price;
		}

		$from_pice = '';
		$to_price  = '';

		if ( ! in_array( $product->get_type(), array( 'variable', 'grouped', 'external' ) ) ) {

			$price_range = array();

			foreach ( $fp_addon_found as $meta ) {

				// ppom_pa($meta);

				if ( ! ppom_is_field_visible( $meta ) ) {
					continue;
				}

				if ( $meta['type'] == 'fixedprice' ) {

					$options = $meta['options'];
					$ranges  = ppom_convert_options_to_key_val( $options, $meta, $product );
					// ppom_pa($ranges);

					foreach ( $ranges as $range ) {
						if ( $range['price'] == '' ) {
							continue;
						}
						$price_range[] = $this->get_unit_price( $range, $meta );
					}

					// ppom_pa($price_range);
					if ( ! empty( $price_range ) ) {

						$from_pice = min( $price_range );
						$to_price  = max( $price_range );
						$price     = wc_format_price_range( $from_pice, $to_price );
					}
				}
			}       
		}

		return apply_filters( 'ppom_loop_fixedprice', $price, $from_pice, $to_price );
	}

	function change_decimal_place( $args ) {

		global $product;

		$product_id = ppom_get_product_id( $product );

		$fp_addon_found = ppom_has_field_by_type( $product_id, 'fixedprice' );

		if ( empty( $fp_addon_found ) ) {
			return $args;
		}

		foreach ( $fp_addon_found as $meta ) {

			$decimal_place    = ! empty( $meta['decimal_place'] ) ? $meta['decimal_place'] : self::default_decimal_places();
			$args['decimals'] = $decimal_place;
		}

		return $args;
	}

	public static function default_decimal_places() {
		return apply_filters( 'ppom_fixedprice_default_decimal', 3 );
	}

	public static function get_unit_price( $option, $meta ) {
		$decimal_place = ! empty( $meta['decimal_place'] ) ? $meta['decimal_place'] : self::default_decimal_places();

		if ( ! is_array( $option ) || empty( $option ) ) {
			return apply_filters( 'ppom_fixedprice_unit_price', wc_format_decimal( '', intval( $decimal_place ) ), $option, $meta );
		}

		$option_val   = isset( $option['raw'] ) ? $option['raw'] : $option['option'];
		$option_price = isset( $option['raw_price'] ) ? $option['raw_price'] : $option['price'];
		$unit_price   = wc_format_decimal( $option_price / $option_val, intval( $decimal_place ) );

		// $unit_price   = apply_filters('ppom_option_price', $unit_price);
		return apply_filters( 'ppom_fixedprice_unit_price', $unit_price, $option, $meta );
	}
}
