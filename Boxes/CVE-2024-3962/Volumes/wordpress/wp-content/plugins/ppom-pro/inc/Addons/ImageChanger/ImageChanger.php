<?php
/***
 * Plugin Name: PPOM Addon Image Changer
 * Description: Color Palette Addon can change the main Product image. Set Color Option id to image id.
 * Version: 1.0
 * Text Domain: ppom-addon-imgchanger
 * License: GPL2
 */

namespace PPOM_Pro\Addons\ImageChanger;

use PPOM_Pro\Abstract_Addon;

class ImageChanger extends Abstract_Addon {

	function run_hooks() {
		add_action( 'ppom_hooks_inputs', array( $this, 'load_script' ), 10, 2 );

		// disable Kalium custom product gallery
		add_filter( 'kalium_woocommerce_use_custom_product_image_gallery_layout', '__return_false', 99 );

		add_filter( 'woocommerce_product_get_gallery_image_ids', array( $this, 'add_gallery_images' ), 10, 2 );

		// disable show_popup value for images, otherwise it will not pick the correct index
		add_filter( 'ppom_image_input_meta_value_by_key', [ $this, 'disable_show_popup' ], 10, 3 );

		/***
		 * remove theme support for wc-product-gallery-lightbox or wc-product-gallery-zoom
		 * and add support for wc-product-gallery-slider
		 */
		add_action( 'after_setup_theme', [ $this, 'add_theme_support_slider' ], 99 );


	}

	function add_gallery_images( $images, $product ) {

		$ppom_palettes_found = ppom_has_field_by_type( $product->get_id(), 'palettes' );
		$ppom_image_found    = ppom_has_field_by_type( $product->get_id(), 'image' );

		// var_dump($ppom_palettes_found);
		$ppom_palettes_found = '' !== $ppom_palettes_found ? $ppom_palettes_found : [];
		$ppom_image_found    = '' !== $ppom_image_found ? $ppom_image_found : [];

		// merge both
		$merged = array_merge( $ppom_palettes_found, $ppom_image_found );

		if ( ! $merged ) {
			return $images;
		}

		/***
		 * getting all image ids
		 * image has options in 'images' key
		 * palettes has options in 'options' key
		 * */
		$image_ids = array_map(
			function ( $field ) {
				return isset( $field['images'] ) ? $field['images'] : $field['options'];
			},
			$merged 
		);

		// remove extra key
		$image_ids = reset( $image_ids );

		$image_ids = array_map(
			function ( $option ) {
				return $option['id'];
			},
			$image_ids 
		);

		// removing empty ids
		$image_ids = array_filter( $image_ids );
		// ppom_pa($image_ids); exit;

		// now merging with existing image_ids attached to product
		return array_merge( $images, $image_ids );
	}

	function load_script( $field, $data_name ) {

		// only works for palettes and image type
		if ( $field['type'] != 'palettes' &&
			 $field['type'] != 'image'
		) {
			return '';
		}


		/***
		 * image has options in 'images' key
		 * palettes has options in 'options' key
		 * */
		$options = isset( $field['images'] ) ? $field['images'] : $field['options'];

		$new_options = array();
		foreach ( $options as $value ) {
			$option_name                 = isset( $value['id'] ) ? $value['id'] : '';
			$new_options[ $option_name ] = $this->get_image_url_by_id( $option_name );
		}

		// Getting index off set for the right index to be slide
		global $post;
		$product        = wc_get_product( $post->ID );
		$gallery_images = $product->get_gallery_image_ids();
		$index          = count( $gallery_images ) - count( $new_options );

		// ppom_pa($new_options); exit;
		// wp_enqueue_style('ppom-arm-css', $this->addon_url."/css/anjan.css");
		wp_enqueue_script( 'ppom-imgchanger-js', $this->addon_url . '/js/ppom-imgchanger.js', array( 'jquery' ), PPOM_VERSION, true );

		wp_localize_script(
			'ppom-imgchanger-js',
			'ppom_imgchanger_vars',
			array(
				'options'      => $new_options,
				'index_offset' => $index,
			) 
		);
	}

	function get_image_url_by_id( $attachment_id ) {

		// $gallery_thumbnail = wc_get_image_size('woocommerce_single');

		// $thumbnail_size = apply_filters('woocommerce_single', array($gallery_thumbnail['width'], $gallery_thumbnail['height']));

		$imgs_src = wp_get_attachment_image_src( $attachment_id, 'woocommerce_single' );
		// ppom_pa($imgs_src); exit;
		$image_src = isset( $imgs_src['0'] ) ? $imgs_src['0'] : null;

		return $image_src;
	}


	function disable_show_popup( $value, $key, $field_meta ) {

		if ( 'show_popup' === $key ) {
			$value = '';
		}

		return $value;
	}

	function add_theme_support_slider() {

		if ( $this->get_theme_name() == 'Flatsome' ) {
			return '';
		}

		remove_theme_support( 'wc-product-gallery-zoom' );
		remove_theme_support( 'wc-product-gallery-lightbox' );
		add_theme_support( 'wc-product-gallery-slider' );
	}

	/**
	 * Get Theme Information
	 */
	function get_theme_name() {

		$theme_info = wp_get_theme();
		$is_child   = $this->is_childtheme_active( $theme_info );

		if ( $is_child ) {
			$theme_name = $theme_info->parent()->Name;
		} else {
			$theme_name = $theme_info->get( 'Name' );
		}

		return apply_filters( 'ppom_imageselect_theme_name', $theme_name, $theme_info );
	}

	function is_childtheme_active( $theme_data ) {

		$parent = $theme_data->parent();
		if ( ! empty( $parent ) ) {
			return true;
		}

		return false;
	}
}
