<?php
/**
 * Plugin Name: PPOM Addon Variation Quantity Matrix
 * Description: An addon to PPOM
 * Version: 1.1
 * Text Domain: ppom-vqmatrix
 * License: GPL2
 */

namespace PPOM_Pro\Addons\VariationMatrix;

use PPOM_Pro\Abstract_Addon;

class VariationMatrix extends Abstract_Addon {

	function run_hooks() {
		// Field Input Path
		add_filter( 'nm_input_class-vqmatrix', array( $this, 'addon_path' ), 10, 2 );

		// Loading All Input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );

		// Load PPOM Scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'hook_input_scripts' ), 10, 2 );

		// PPOM Fields Rendering
		add_action( 'ppom_rendering_inputs', array( $this, 'render_input' ), 10, 5 );

		// hook for render tabs
		add_filter( 'ppom_fields_tabs_show', array( $this, 'ppom_admin_tabs' ), 10, 2 );
		add_filter( 'ppom_tabs_panel_classes', array( $this, 'ppom_tabs_classes' ), 10, 1 );

		// Admin input settings
		add_filter( 'render_input_types', array( $this, 'admin_settings' ), 10, 6 );

		// Cart Html
		add_filter( 'ppom_vqmatrix_cart_html', array( $this, 'show_on_cart' ), 10, 3 );
	}

	/*
	**======= vqmatrix Input Path Load ========
	*/
	function addon_path( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.vqmatrix.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}

	/*
	**======== Loading All PRO Inputs =========
	*/
	function load_addon( $inputs_array, $inputObj ) {

		// checking vqmatrix addon is enable
		$inputs_array['vqmatrix'] = $inputObj->get_input( 'vqmatrix' );

		return $inputs_array;
	}


	/*
	**======== Load Scripts =========
	*/
	function hook_input_scripts( $field, $data_name ) {

		if ( $field['type'] != 'vqmatrix' ) {
			return '';
		}

		if ( $field['type'] == 'vqmatrix' ) {

			$enable_plusminus = isset( $field['enable_plusminus'] ) ? $field['enable_plusminus'] : '';

			wp_enqueue_style( 'ppom-vqmatrix', $this->addon_path . '/css/ppom-vqmatrix.css' );

			if ( $enable_plusminus == 'on' ) {

				wp_enqueue_script( 'ppom-plusminus-lib', $this->addon_path . '/js/ppom-plusminus.js', array( 'jquery' ), PPOM_PRO_VERSION, true );
				wp_enqueue_script( 'ppom-vqmatrix', $this->addon_path . '/js/ppom-vqmatrix.js', array( 'jquery' ), PPOM_PRO_VERSION, true );
			}
		}
	}


	/*
	**====== Render VQMatrix Input ========
	*/
	function render_input( $meta, $data_name, $classes, $field_label, $options ) {

		if ( $meta['type'] != 'vqmatrix' ) {
			return '';
		}

		$meta['id']          = $data_name;
		$input_wrapper_class = 'form-group';
		$input_wrapper_class = 'ppom-input-quantities';

		$input_wrapper_class = apply_filters( 'ppom_input_wrapper_class', $input_wrapper_class, $meta );

		$layout         = isset( $meta['price_view'] ) ? $meta['price_view'] : '';
		$template_vars  = array();
		$templates_name = '';

		$html  = '';
		$html .= '<div class="' . esc_attr( $input_wrapper_class ) . '">';

		if ( $field_label ) {
			$html .= '<label class="form-control-label" for="' . esc_attr( $data_name ) . '">';
			$html .= sprintf( __( '%s', 'woocommerce-product-addon' ), $field_label ) . '</label>';
		}

		if ( $layout == 'on' ) {
			$templates_name = 'vqmatrix-horizontal.php';
		} else {
			$templates_name = 'vqmatrix-vertical.php';
		}

		$template_vars = array(
			'meta'      => $meta,
			'data_name' => $data_name,
		);

		ob_start();
		$this->load_template( $templates_name, $template_vars );
		$html .= ob_get_clean();

		$html .= '</div>';    // form-group

		echo apply_filters( 'ppom_vqmatrix_html', $html );
	}


	/*
	**============= Get Attachment Image  ================
	*/
	function get_attachment_image( $attachment ) {
		if ( intval( $attachment ) ) {
			$img_url = wp_get_attachment_url( $attachment );
		} else {
			$img_url = $attachment;
		}

		return $img_url;
	}


	function show_on_cart( $value, $field_meta, $total_qty ) {

		$html  = '';
		$html .= '<table class="ppom-vqmatrix-cart-wrapper table table-bordered" style="width:100%">';
		$html .= '<tr>';
		$html .= '<th>' . __( 'Items', 'woocommerce-product-addon' ) . '</th>';
		$html .= '<th>' . __( 'QTY', 'woocommerce-product-addon' ) . '</th>';
		$html .= '</tr>';

		foreach ( $value as $label => $qty ) {

			if ( ! empty( $qty ) ) {
				$total_qty += $qty;

				$html .= '<tr>';
				$html .= '<td>' . $label . '</td>';
				$html .= '<td>' . $qty . '</td>';
				$html .= '</tr>';
			}
		}

		$html .= '<tr>';
		$html .= '<td><strong>' . __( 'Total', 'woocommerce-product-addon' ) . '</strong></td>';
		$html .= '<td><strong>' . $total_qty . '</strong></td>';
		$html .= '</tr>';

		$html .= '</table>';

		return $html;
	}


	/*
	**============= Admin Settings  ================
	*/
	function admin_settings( $html_input, $type, $name, $values, $options, $field_index ) {

		if ( $type == 'vqmatrix-row' ) {

			$opt_index0  = 1;
			$html_input .= '<ul class="ppom-options-container">';

			if ( $values ) {

				$last_array_id = max( array_keys( $values ) );

				foreach ( $values as $opt_index => $option ) {

					$html_input .= '<li class="data-options" style="display: flex;">';

					$html_input .= '<span class="dashicons dashicons-move"></span>';
					$html_input .= '<input type="text" class="option-title form-control ppom-fields-option" name="ppom[' . esc_attr( $field_index ) . '][row_options][' . esc_attr( $opt_index ) . '][option]" value="' . esc_attr( stripslashes( $option['option'] ) ) . '" placeholder="' . __( 'option', 'woocommerce-product-addon' ) . '" data-metatype="option" data-opt-index="' . esc_attr( $opt_index ) . '" data-optiontype="row_options">';
					$html_input .= '<input type="text" class="form-control ppom-fields-option" name="ppom[' . esc_attr( $field_index ) . '][row_options][' . esc_attr( $opt_index ) . '][img_id]" value="' . esc_attr( $option['img_id'] ) . '" placeholder="' . __( 'Image ID (URL)', 'woocommerce-product-addon' ) . '" data-metatype="img_id" data-opt-index="' . esc_attr( $opt_index ) . '" data-optiontype="row_options">';
					$html_input .= '<input type="text" class="option-id form-control ppom-fields-option" name="ppom[' . esc_attr( $field_index ) . '][row_options][' . esc_attr( $opt_index ) . '][option_id]" value="' . esc_attr( $option['option_id'] ) . '" placeholder="' . __( 'Option ID', 'woocommerce-product-addon' ) . '" data-metatype="option_id" data-opt-index="' . esc_attr( $opt_index ) . '" data-optiontype="row_options">';

					$html_input .= '<button class="btn btn-success ppom-add-option" data-option-type="paired-quantity"><i class="fa fa-plus" aria-hidden="true"></i></button>';
					$html_input .= '<button class="btn btn-danger ppom-remove-option"><i class="fa fa-minus" aria-hidden="true"></i></button>';

					$html_input .= '</li>';

					$opt_index0 = $last_array_id;
					$opt_index0 ++;
				}
			} else {
				$html_input .= '<li class="data-options" style="display: flex;">';
				$html_input .= '<span class="dashicons dashicons-move"></span>';

				$html_input .= '<input type="text" class="option-title form-control ppom-fields-option" placeholder="' . __( 'option', 'woocommerce-product-addon' ) . '" data-metatype="option" data-optiontype="row_options">';

				$html_input .= '<input type="text" class="form-control ppom-fields-option" placeholder="' . __( 'Image ID (URL)', 'woocommerce-product-addon' ) . '" data-metatype="img_id" data-optiontype="row_options">';
				$html_input .= '<input type="text" class="option-id form-control ppom-fields-option" placeholder="' . __( 'Option ID', 'woocommerce-product-addon' ) . '" data-metatype="option_id" data-optiontype="row_options">';

				$html_input .= '<button class="btn btn-success ppom-add-option" data-option-type="paired-quantity"><i class="fa fa-plus" aria-hidden="true"></i></button>';
				$html_input .= '<button class="btn btn-danger ppom-remove-option"><i class="fa fa-minus" aria-hidden="true"></i></button>';

				$html_input .= '</li>';
			}

			$html_input .= '<input type="hidden" id="ppom-meta-opt-index" value="' . esc_attr( $opt_index0 ) . '">';
			$html_input .= '<ul/>';
		} elseif ( $type == 'vqmatrix-colunm' ) {

			$opt_index0  = 1;
			$html_input .= '<ul class="ppom-options-container">';

			if ( $values ) {

				$last_array_id = max( array_keys( $values ) );

				foreach ( $values as $opt_index => $option ) {
					$html_input .= '<li class="data-options" style="display: flex;">';
					$html_input .= '<span class="dashicons dashicons-move"></span>';
					$html_input .= '<input type="text" class="option-title form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][option]" value="' . esc_attr( stripslashes( $option['option'] ) ) . '" placeholder="' . __( 'option', 'woocommerce-product-addon' ) . '" data-metatype="option" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][img_id]" value="' . esc_attr( stripslashes( $option['img_id'] ) ) . '" placeholder="' . __( 'Image ID (URL)', 'woocommerce-product-addon' ) . '" data-metatype="img_id" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][price]" value="' . esc_attr( $option['price'] ) . '" placeholder="' . __( 'price (if any)', 'woocommerce-product-addon' ) . '" data-metatype="price" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][min]" value="' . esc_attr( $option['min'] ) . '" placeholder="' . __( 'Min. Qty', 'woocommerce-product-addon' ) . '" data-metatype="min" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][max]" value="' . esc_attr( $option['max'] ) . '" placeholder="' . __( 'Max. Qty', 'woocommerce-product-addon' ) . '" data-metatype="max" data-opt-index="' . esc_attr( $opt_index ) . '">';
					$html_input .= '<input type="text" class="option-id form-control ppom-option-keys" name="ppom[' . esc_attr( $field_index ) . '][options][' . esc_attr( $opt_index ) . '][option_id]" value="' . esc_attr( $option['option_id'] ) . '" placeholder="' . __( 'Option ID', 'woocommerce-product-addon' ) . '" data-metatype="option_id" data-opt-index="' . esc_attr( $opt_index ) . '">';

					$html_input .= '<button class="btn btn-success ppom-add-option" data-option-type="paired-quantity"><i class="fa fa-plus" aria-hidden="true"></i></button>';
					$html_input .= '<button class="btn btn-danger ppom-remove-option"><i class="fa fa-minus" aria-hidden="true"></i></button>';

					$html_input .= '</li>';

					$opt_index0 = $last_array_id;
					$opt_index0 ++;
				}
			} else {
				$html_input .= '<li class="data-options" style="display: flex;">';
				$html_input .= '<span class="dashicons dashicons-move"></span>';
				$html_input .= '<input type="text" class="option-title form-control ppom-option-keys" placeholder="' . __( 'option', 'woocommerce-product-addon' ) . '" data-metatype="option">';
				$html_input .= '<input type="text" class="form-control ppom-option-keys" placeholder="' . __( 'Image ID (URL)', 'woocommerce-product-addon' ) . '" data-metatype="img_id">';
				$html_input .= '<input type="text" class="form-control ppom-option-keys" placeholder="' . __( 'price (if any)', 'woocommerce-product-addon' ) . '" data-metatype="price">';
				$html_input .= '<input type="text" class="form-control ppom-option-keys" placeholder="' . __( 'Min. Qty', 'woocommerce-product-addon' ) . '" data-metatype="min">';
				$html_input .= '<input type="text" class="form-control ppom-option-keys" placeholder="' . __( 'Max. Qty', 'woocommerce-product-addon' ) . '" data-metatype="max">';
				$html_input .= '<input type="text" class="option-id form-control ppom-option-keys" placeholder="' . __( 'Option ID', 'woocommerce-product-addon' ) . '" data-metatype="option_id">';

				$html_input .= '<button class="btn btn-success ppom-add-option" data-option-type="paired-quantity"><i class="fa fa-plus" aria-hidden="true"></i></button>';
				$html_input .= '<button class="btn btn-danger ppom-remove-option"><i class="fa fa-minus" aria-hidden="true"></i></button>';

				$html_input .= '</li>';
			}

			$html_input .= '<input type="hidden" id="ppom-meta-opt-index" value="' . esc_attr( $opt_index0 ) . '">';
			$html_input .= '<ul/>';
		}

		return $html_input;
	}


	/*
	**======== Show variation tabs =========
	*/
	function ppom_admin_tabs( $tabs, $fields_type ) {

		foreach ( $tabs as $key => $value ) {

			if ( $key == 'add_option_tab' && $fields_type == 'vqmatrix' ) {

				$tabs['add_option_tab'] = array(
					'label'        => __( 'Priced Options', 'woocommerce-product-addon' ),
					'class'        => array( 'ppom-tabs-label' ),
					'field_depend' => array( 'vqmatrix' ),
				);
			}
		}

		$tabs['vm_row_tab'] = array(
			'label'        => __( 'Simple Options', 'woocommerce-product-addon' ),
			'class'        => array( 'ppom-tabs-label' ),
			'field_depend' => array( 'vqmatrix' ),
		);

		return $tabs;
	}


	/*
	**====== Show tabs panel classes =========
	*/
	function ppom_tabs_classes( $settings ) {
		// ppom_pa($settings);
		foreach ( $settings as $fields_meta_key => $meta ) {

			$type = isset( $meta['type'] ) ? $meta['type'] : '';

			if ( $fields_meta_key == 'row_options' ) {
				$settings['row_options']['tabs_class'] = array( 'ppom_handle_vm_row_tab', 'col-md-12' );
			} elseif ( $type == 'vqmatrix-colunm' ) {
				$settings['price_view']['tabs_class'] = array( 'ppom_handle_add_option_tab', 'col-md-12' );
				$settings['options']['tabs_class']    = array( 'ppom_handle_add_option_tab', 'col-md-12' );
			}
		}

		return $settings;
	}
}
