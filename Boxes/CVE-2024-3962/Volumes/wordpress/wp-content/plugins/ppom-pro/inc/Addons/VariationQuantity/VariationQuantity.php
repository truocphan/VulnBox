<?php
/**
 * Plugin Name: PPOM Addon WC Variation Quantity
 * Description: An addon to PPOM
 * Version: 1.4
 * Text Domain: ppom-addon-wcvq
 * License: GPL2
 */

namespace PPOM_Pro\Addons\VariationQuantity;

use PPOM_Pro\Abstract_Addon;

class VariationQuantity extends Abstract_Addon {

	function run_hooks() {
		add_action( 'init', array( $this, 'init_wc' ) );

		// Field Input Path
		add_filter( 'nm_input_class-wcvq', array( $this, 'addon_path' ), 10, 2 );

		// Loading All Input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );

		// Load action for input scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'hook_input_scripts' ), 10, 2 );

		add_action( 'woocommerce_before_variations_form', array( $this, 'before_variations_form' ) );

		add_filter(
			'woocommerce_dropdown_variation_attribute_options_html',
			array(
				$this,
				'filter_dropdown_option_html',
			),
			12,
			2 
		);

		add_filter( 'woocommerce_show_variation_price', array( $this, 'ppom_hide_variation_price_html' ), 99, 3 );
	}

	function init_wc() {

		if ( isset( $_POST['ppom']['wc_variation'] ) ) {
			$product = wc_get_product( $_POST['product_id'] );
			if ( $product->is_type( 'variable' ) ) {
				add_filter( 'woocommerce_add_to_cart_validation', array( $this, 'stop_adding' ), 99, 5 );
			}
		}
	}

	function stop_adding( $passed, $product_id, $quantity, $variation_id, $variations ) {

		if ( $passed && isset( $_POST['ppom']['wc_variation'] ) ) {
			foreach ( $_POST['ppom']['wc_variation'] as $variation_id => $qty ) {
				if ( $qty === '0' ) {
					continue;
				}
				WC()->cart->add_to_cart( $product_id, $qty, $variation_id );
			}
		}

		$passed = false;

		return $passed;
	}


	/*
	**======= vqmatrix Input Path Load ========
	*/
	function addon_path( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.wcvq.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}


	/*
	**======== Loading All PRO Inputs =========
	*/
	function load_addon( $inputs_array, $inputObj ) {

		// checking wcvq addon is enable
		$inputs_array['wcvq'] = $inputObj->get_input( 'wcvq' );

		return $inputs_array;
	}


	/*
	**================== Load Scripts ===================
	*/
	function hook_input_scripts( $field, $data_name ) {

		if ( $field['type'] != 'wcvq' ) {
			return '';
		}

		$localize_vars = array();

		if ( $field['type'] == 'wcvq' ) {

			$enable_plusminus = isset( $field['enable_plusminus'] ) ? $field['enable_plusminus'] : '';

			wp_enqueue_style( 'ppom-wcvq', $this->addon_url . '/css/ppom-wcvq.css' );

			if ( $enable_plusminus == 'on' ) {

				wp_enqueue_script( 'ppom-wcvq-plusminus', $this->addon_url . '/js/ppom-plusminus.js', array( 'jquery' ), PPOM_PRO_VERSION, true );
				wp_enqueue_script( 'ppom-wcvq', $this->addon_url . '/js/ppom-wcvq.js', array( 'jquery' ), PPOM_PRO_VERSION, true );
			}
		}
	}


	/*
	**============= WC Variations Checked Default Value ================
	*/
	function filter_dropdown_option_html( $html, $args ) {
		global $product;

		$wcvq_enable = $this->is_enable_wcvq( $product );

		echo '<pre>';
		print_r( $wcvq_enable );
		echo '</pre>';

		if ( $wcvq_enable ) {
			// ppom_pa($html);

			$show_option_none_text = $args['show_option_none'] ? $args['show_option_none'] : __( 'Choose an option', 'woocommerce-product-addon' );
			$show_option_none_html = '<option value="">' . esc_html( $show_option_none_text ) . '</option>';

			$html = str_replace( $show_option_none_html, '', $html );
		}

		return $html;
	}


	/*
	**============= Hide WC Variations Prices ================
	*/
	function ppom_hide_variation_price_html( $show, $parent, $variation ) {

		$wcvq_enable = $this->is_enable_wcvq( $parent );

		if ( $wcvq_enable ) {
			$show = false;
		}

		return $show;
	}

	/*
	**============= WC Variations Rendering ================
	*/
	function before_variations_form() {

		global $product;

		$wcvq_enable = $this->is_enable_wcvq( $product );

		$product_id     = ppom_get_product_id( $product );
		$variation_meta = ppom_has_field_by_type( $product_id, 'wcvq' );
		$wcvq_images    = isset( $variation_meta[0]['enable_img'] ) ? $variation_meta[0]['enable_img'] : '';

		$default_value = isset( $variation_meta[0]['default_value'] ) ? $variation_meta[0]['default_value'] : '';
		$min_value     = isset( $variation_meta[0]['min_value'] ) ? $variation_meta[0]['min_value'] : '';
		$max_value     = isset( $variation_meta[0]['max_value'] ) ? $variation_meta[0]['max_value'] : '';

		if ( $wcvq_enable ) {

			$ppom_children = $product->get_children();
			if ( is_array( $ppom_children ) && count( $ppom_children ) > 0 ) {
				echo '<div class="ppom-wcvq-wrapper ppom-wrapper">';

				echo '<div class="form-row">';

				$ppom_options = array();

				foreach ( $ppom_children as $ppom_child ) {

					$ppom_child_product = wc_get_product( $ppom_child );

					$attached_img_id = $ppom_child_product->get_image_id();
					$variation_image = wp_get_attachment_url( $attached_img_id );

					$ppom_child_name = $ppom_child_product->get_name();
					$ppom_child_name = wc_get_formatted_variation( $ppom_child_product, true, false, false );

					if ( ppom_get_option( 'ppom_hide_option_price' ) == 'yes' ) {
						$ppom_child_price = $ppom_child_product->get_price_html();
						$ppom_child_name .= " [{$ppom_child_price}]";
					}

					$variationprice = $ppom_child_product->get_price();

					echo '<div class="ppom-wcvq-inner-wrap">';

					echo '<label class="from-label">' . $ppom_child_name . '</label>';
					if ( $variation_image && $wcvq_images == 'on' ) {
						echo '<span class="ppom-wcvq-image"><img src="' . esc_url( $variation_image ) . '" style="width:40px;margin-right: 4px;" ></span>';
					}

					if ( ! $ppom_child_product->is_in_stock() ) {
						printf( __( '<p class="stock out-of-stock">%s</p>', 'woocommerce-product-addon' ), 'Out of Stock' );
					} else {

						echo '<span><input type="number" value="' . intval( $default_value ) . '" ';
						echo 'min="' . $min_value . '" max="' . $max_value . '"';
						echo 'data-price="' . esc_attr( $variationprice ) . '" data-label="' . esc_attr( $ppom_child_name ) . '" class="ppom-wcvq-input" name="ppom[wc_variation][' . esc_attr( $ppom_child ) . ']" /></span>';
					}

					echo '</div>';
				}
				echo '</div>';
				echo '</div>';
			}
		}
	}


	/*
	**========= Enable PPOM WCVQ =========
	*/
	function is_enable_wcvq( $product ) {

		$product_id     = ppom_get_product_id( $product );
		$variation_meta = ppom_has_field_by_type( $product_id, 'wcvq' );
		$wcvq_enable    = isset( $variation_meta[0]['enable_wcvq'] ) ? $variation_meta[0]['enable_wcvq'] : '';

		$enable = false;

		if ( $wcvq_enable == 'on' ) {
			$enable = true;
		}

		return $enable;
	}
}
