// "use strict";

/*******************************************
 *          PPOM Fancy Cropper JS           *
 *******************************************/

$ = jQuery;

const ppom_fancycropper = {

    


    /*
     **============= Fancy Cropper Init ================ 
     */
    init: function(dataName) {
        
        this.uploadInput = jQuery('.ppom-fancycropper-uploader');
        this.uploadedImageWrapper = jQuery('.ppom-fancycropper-image-uploaded');
        this.viewports = {};
        this.cropieStart = Array();
        this.fieldsCounter = Array();
        this.cropieBoundary = {};
        this.fileCounter = 0;
        this.fileSize = '9999|mb';
        this.croppedMeta = Array();
        this.productID = ppom_input_vars.product_id;
        this.fields_meta = ppom_input_vars.field_meta;

        this.image_uploader_init();
        this.eventsHandler();
        this.qtyBtnActions();
    },


    storeFieldsID: () => {
        ppom_fancycropper.fields_meta.map((meta, index) => {
            if (meta.type == "fancycropper") {

                ppom_fancycropper.fieldsCounter[meta.data_name] = 0;
            }
        });
    },


    /*
     **============= Image Uploader Startup ================ 
     */
    image_uploader_init: function() {

        ppom_fancycropper.storeFieldsID();

        this.uploadInput.on('change', function() {
            ppom_fancycropper.readFile(this);
            this.value = null;
        });
    },


    /*
     **============= Read Uploaded Image File ================ 
     */
    readFile: (input) => {

        const fieldID = jQuery(input).attr('data-field-id');

        const settingObj = window["ppom_fancycropper" + fieldID + "_vars"];

        const fileAllowed2 = settingObj['fileAllowed'];
        let file_loop = 1;

        if (parseInt(fileAllowed2) >= input.files.length && (ppom_fancycropper.fieldsCounter[fieldID] + input.files.length) <= parseInt(fileAllowed2)) {

            for (let i = 0; i < input.files.length; i++) {

                // Generate Upload Image ID
                const imageID = ppom_fancycropper.genereteUniqueID(10);

                // Generate Popup ID
                const popupID = `ppom-fancycropper-modal-${imageID}`;

                // Store Image Meta On Array
                ppom_fancycropper.croppedMeta[popupID] = {};
                ppom_fancycropper.croppedMeta[popupID].cropped = {};
                ppom_fancycropper.croppedMeta[popupID].productID = ppom_fancycropper.productID;
                ppom_fancycropper.croppedMeta[popupID].fieldID = fieldID;

                if (input.files && input.files[i]) {

                    ppom_fancycropper.croppedMeta[popupID].fileName = input.files[i].name;

                    // File Size Validation
                    if (!ppom_fancycropper.Filevalidation(popupID, input.files[i])) { return false }

                    // FileReader Startup
                    var reader = new FileReader();

                    reader.onload = function(e) {

                        ppom_fancycropper.cropieStart[popupID] = {};

                        // Add Uploaded Image URL
                        ppom_fancycropper.cropieStart[popupID]['url'] = e.target.result;

                        // Get Uploaded Image HTML BOX
                        const imageHTML = ppom_fancycropper.uploadedImageHTML(event, imageID, popupID);

                        // Render Uploaded Images
                        const wrapperID = jQuery('[data-wrapper-id="' + fieldID + '"]');
                        jQuery('.ppom-fancycropper-image-uploaded', wrapperID).prepend(imageHTML);

                        // Get Popup HTML
                        const popup = ppom_fancycropper.cropperPopupHTML(popupID);

                        // Add Cropie Boundary
                        ppom_fancycropper.setBoundary(popupID);

                        // Add Defualt Crpie ViewPort
                        ppom_fancycropper.setDefualtViewport(popupID);

                        // Render Popup On Body
                        jQuery(popup).find('[data-wrapper-id="' + fieldID + '"] .ppom-fancycropper-popup-render').end().appendTo('[data-wrapper-id="' + fieldID + '"] .ppom-fancycropper-popup-render').attr('data-remodal-id', popupID).addClass('ppom-fancycropper-state');
                        // jQuery('.ppom-fancycropper-popup-render', wrapperID).append(popup).attr('data-remodal-id', popupID).addClass('ppom-fancycropper-state');

                        ppom_fancycropper.cropieBasicSettings(popupID);

                        // Init Croppie JS
                        ppom_fancycropper.cropie_init(popupID);

                        jQuery('[data-remodal-id="' + popupID + '"] .ppom-fancycropper-nocropped').html(ppom_fancycropper.getSettings(popupID, 'emptyImagesMsg'));

                        const cropperOption = ppom_fancycropper.getSettings(popupID, 'cropper_options');
                        if (cropperOption.length === 0) {
                            jQuery('.ppom-fancycropper-viewport-wrapper').addClass('ppom-fancycropper-viewport-free');
                        }

                        // File Added
                        ppom_fancycropper.fieldsCounter[fieldID]++;
                    }

                    reader.readAsDataURL(input.files[i]);
                }
                else {
                    alert("Sorry - you're browser doesn't support the FileReader API");
                }

                file_loop++;
            }
        }
        else {

            alert('Sorry File Limit');
            return false;
        }

    },


    /*
     **============= Cropie JS Init ================ 
     */
    cropie_init: function(popupID) {

        this.cropieStart[popupID]['view'] = jQuery(document).find('[data-remodal-id="' + popupID + '"] .ppom-fancycropper-handler').croppie(ppom_fancycropper.cropieBasicSettings(popupID, false));
    },


    /*
     **============= Cropie ViewPort Controller  ================ 
     */
    eventsHandler: function() {

        /*========== ViewPort Size Change Event ===========*/
        jQuery(document).on('change', '.ppom-fancycropper-vp-js', function() {

            const vp_w = parseInt(jQuery('option:selected', this).data('width'));
            const vp_h = parseInt(jQuery('option:selected', this).data('height'));

            const popupID = jQuery(this).closest('.ppom-fancycropper-remodal').attr('data-remodal-id');

            var parentW = 500;
            var w = parentW < vp_w ? parentW : vp_w;
            var h = parentW < vp_w ? Math.round(parentW * vp_h / vp_w) : vp_h;

            if (isNaN(w) && isNaN(h)) {

                ppom_fancycropper.setDefualtViewport(popupID);
            }
            else {

                ppom_fancycropper.setViewPorts(popupID, w, h);
            }

            ppom_fancycropper.cropieStart[popupID]['view'].croppie('destroy');

            ppom_fancycropper.cropieStart[popupID]['view'].croppie(ppom_fancycropper.cropieBasicSettings(popupID, true));

            // Reset the org viewport size
            ppom_fancycropper.setViewPorts(popupID, vp_w, vp_h);
        });


        /*========== Rotate Image ===========*/
        jQuery(document).on('click', '.ppom-fancycropper-rotate-img', function() {

            const popupID = jQuery(this).closest('.ppom-fancycropper-remodal').attr('data-remodal-id');

            ppom_fancycropper.cropieStart[popupID]['view'].croppie('rotate', parseInt(jQuery(this).data('deg')));
        });


        /*========== ViewPort Size Save event ===========*/
        jQuery(document).on('click', '.ppom-fancycropper-apply', function(ev) {

            ev.preventDefault();

            const popupID = jQuery(this).closest('.ppom-fancycropper-remodal').attr('data-remodal-id');
            const vp_wrapper = jQuery(this).closest('.ppom-fancycropper-viewport-wrapper');
            const selected_option_id = vp_wrapper.find('select option:selected').data('option-id');
            const selected_optionType = vp_wrapper.find('select option:selected').data('option-type');

            // Check if options is free then return false
            if (selected_optionType == 'free') {
                alert(ppom_fancycropper.getSettings(popupID, 'vpOptionAlertMsg'));
                return false;
            }

            const randname = Math.floor(Math.random() * 1000);

            const cropperOption = ppom_fancycropper.getSettings(popupID, 'cropper_options');
            
            jQuery.event.trigger({
                type: 'ppom_croppie_apply',
                img_id: popupID,
                options: cropperOption,
                dataname: ppom_fancycropper.croppedMeta[popupID].fieldID,
                time: new Date()
            });

            // Get Cropped Image
            ppom_fancycropper.cropieStart[popupID]['view'].croppie('result', {

                type: 'canvas',
                size: ppom_fancycropper.viewports,
                format: 'png',
            }).then(function(resp) {

                if (cropperOption.length !== 0) {
                    jQuery.each(cropperOption, function(i, meta) {

                        const meta2 = { ...meta };

                        const option_id = meta2.option_id;

                        if (selected_option_id == option_id) {

                            meta2.croppedURL = resp;
                            ppom_fancycropper.croppedMeta[popupID].cropped[randname] = meta2;
                        }
                    });
                }
                else {
                    const meta2 = {
                        raw: 'Cropped',
                        price: 0,
                    };

                    meta2.croppedURL = resp;
                    ppom_fancycropper.croppedMeta[popupID].cropped[randname] = meta2;
                }

                // Uploaded image added on popup by popupID
                ppom_fancycropper.croppedMeta[popupID].imageURL = ppom_fancycropper.cropieStart[popupID]['url'];

                // Render cropped images box HTML
                ppom_fancycropper.CroppedImageHTML(resp, popupID, randname);

                // Alert Show when image cropped
                alert(ppom_fancycropper.getSettings(popupID, 'croppedImgAlertMsg'));

                // Cropped Images Count
                ppom_fancycropper.croppedCounter(popupID);

                // Prices Handler Callback
                ppom_fancycropper.pricesInit(popupID);

                // console.log(ppom_fancycropper.croppedMeta);

            });
        });


        /*========== Cropped Images Quantity Event ===========*/
        jQuery(document).on('change keyup', '.ppom-fancycropper-quantity', function(e) {

            const popupID = jQuery(this).attr('data-popup-id');

            // Prices Hander
            ppom_fancycropper.pricesInit(popupID);
        });


        /*========== Remove Cropped Images event ===========*/
        jQuery(document).on('click', '.ppom-fancycropper-quantity-rm', function(e) {

            const popupID = jQuery(this).attr('data-popup-id');
            const ID = jQuery(this).attr('data-id');

            jQuery(this).closest('.ppom-fancycropper-cart-box').remove();

            // Delete selected cropped image by ID
            delete ppom_fancycropper.croppedMeta[popupID].cropped[ID];

            // Cropped Images Count
            ppom_fancycropper.croppedCounter(popupID);

            // Prices Handler Callback
            ppom_fancycropper.pricesInit(popupID);
        });


        /*========== Save All Images Event ===========*/
        jQuery(document).on('click', '.ppom_fancycropper_meta_save', function(e) {

            const popupID = jQuery(this).closest('.ppom-fancycropper-remodal').attr('data-remodal-id');

            const data = ppom_fancycropper.croppedMeta[popupID];

            jQuery('[data-remodal-id="' + popupID + '"] .ppom-fancycropper-save-loader').show();
            jQuery(this).prop('disabled', true);

            ppom_fancycropper.saveCroppedImages(data, popupID);
        });


        /*========== Open Popup Event ===========*/
        jQuery(document).on('click', '.ppom-fancycropper-open', function() {

            const $id = jQuery(this).attr('data-popup-id');

            const inst = jQuery('[data-remodal-id=' + $id + ']').remodal();

            inst.open();
        });


        /*========== Popup Opened Trigger ===========*/
        jQuery(document).on('opened', '.remodal', function(e) {

            const popupID = e.target.dataset.remodalId

            const popupWrapper = jQuery('[data-remodal-id=' + popupID + ']');

            if (popupWrapper.hasClass('ppom-fancycropper-state')) {

                // Cropie Bind Event
                ppom_fancycropper.cropieStart[popupID]['view'].croppie('bind', {
                    url: ppom_fancycropper.cropieStart[popupID]['url'],
                });
            }

            popupWrapper.removeClass('ppom-fancycropper-state');
        });


        /*========== Delete Popup And All Meta Event ===========*/
        jQuery(document).on('click', '.ppom-fancycropper-delete', function() {

            const popupID = jQuery(this).attr('data-popup-id');

            const data_name = jQuery(this).closest('.ppom-field-wrapper').attr('data-data_name');

            // Delete selected cropped image by ID
            delete ppom_fancycropper.croppedMeta[popupID];

            // Created Hidden Input ID Generate
            var the_id = 'ppom-fancycropper-' + data_name + '-' + popupID;

            // remove/reset
            jQuery("#" + the_id).remove();

            jQuery(this).closest('.card').remove();

            jQuery('[data-remodal-id=' + popupID + ']').remove();

            ppom_update_option_prices();

            ppom_fancycropper.fieldsCounter[data_name]--;
        });


        /*========== Popup Tabs event ===========*/
        jQuery(document).on('click', '.ppom-fancycropper-tabs button', function(event) {
            event.preventDefault();

            const tabe_id = jQuery(this).attr('data-tab-id');
            const ul = jQuery(this).closest('.ppom-fancycropper-remodal');

            ul.find('.tab-active').removeClass('tab-active');
            jQuery(this).parent().addClass('tab-active');
            ul.find('.ppom-fancycropper-tabs-content [data-content-id="tab-1"]').hide();
            ul.find('.ppom-fancycropper-tabs-content [data-content-id="tab-2"]').hide();
            ul.find('.ppom-fancycropper-tabs-content [data-content-id="tab-3"]').hide();
            ul.find('[data-content-id="' + tabe_id + '"]').show();
        });
    },


    /*
     **============= FancyCropper Prices Handler  ================ 
     */
    pricesInit: function(popupID) {

        ppom_fancycropper.croppedMeta[popupID].totalPrice = 0;

        jQuery('[data-remodal-id="' + popupID + '"] .ppom_fancycropper_totals').html('');

        if (ppom_fancycropper.croppedCounter(popupID) > 0) {
            jQuery('[data-remodal-id="' + popupID + '"] .ppom-fancycropper-nocropped').html('');
            jQuery('[data-remodal-id="' + popupID + '"] .ppom_fancycropper_meta_save').show();
        }
        else {
            jQuery('[data-remodal-id="' + popupID + '"] .ppom_fancycropper_meta_save').hide();
            jQuery('[data-remodal-id="' + popupID + '"] .ppom-fancycropper-nocropped').html(ppom_fancycropper.getSettings(popupID, 'emptyImagesMsg'));
        }

        let list = document.querySelectorAll(".ppom-fancycropper-quantity");

        //convert to array
        list = Array.from(list);

        list.map((elem, index) => {

            const QTY = parseInt(jQuery(elem).val()) || 1;
            const ID = jQuery(elem).attr('data-id');

            // Return if quantity note set
            if (isNaN(QTY)) { return false; }

            // Return if selected object not found
            if (!ppom_fancycropper.croppedMeta[popupID].cropped[ID]) { return false; }

            // saved quantity on selected cropped image
            ppom_fancycropper.croppedMeta[popupID].cropped[ID].qty = QTY;

            // Get cropped meta by ID
            const input_qty = ppom_fancycropper.croppedMeta[popupID].cropped[ID].qty || 0;
            const price = ppom_fancycropper.croppedMeta[popupID].cropped[ID].price || 0;
            const raw = ppom_fancycropper.croppedMeta[popupID].cropped[ID].raw;

            // Calculate option prices
            const price_calc = parseInt(input_qty) * parseFloat(price);

            // Saved options prices on options object
            ppom_fancycropper.croppedMeta[popupID].cropped[ID].optionTotal = price_calc;

            jQuery('[data-optiontotal_id="' + ID + '"]').html(ppom_fancycropper.formatted_price(price_calc));

            // Calculate total options prices on each modal box
            ppom_fancycropper.croppedMeta[popupID].totalPrice += ppom_fancycropper.croppedMeta[popupID].cropped[ID].optionTotal;

            // Get options total prices
            const totalPrice = ppom_fancycropper.croppedMeta[popupID].totalPrice;

            // console.log(ppom_fancycropper.croppedMeta)

            if (price_calc == 0) { return false; }

            if (totalPrice == 0) { return false; }

            let totalPrice_msg = ppom_fancycropper.getSettings(popupID, 'totalPriceMsg');
            totalPrice_msg = totalPrice_msg.replace("%TOTALPRICE%", ppom_fancycropper.formatted_price(totalPrice));

            // Render total prices
            jQuery('[data-remodal-id="' + popupID + '"] .ppom_fancycropper_totals').html(totalPrice_msg);
        });
    },


    /*
     **============= Add ViewPort Into Object  ================ 
     */
    setViewPorts: (popupID, w, h) => {

        const viewportType = ppom_fancycropper.getSettings(popupID, 'viewportType');
        ppom_fancycropper.viewports = { 'width': w, 'height': h, 'type': viewportType }
    },


    /*
     **============= Set Cropie Boundary  ================ 
     */
    setBoundary: function(popupID) {

        const setBoundary = ppom_fancycropper.getSettings(popupID, 'boundary').split(',');

        ppom_fancycropper.cropieBoundary = { 'width': setBoundary[0], 'height': setBoundary[1] }
    },


    /*
     **============= Set Default Cropie Viewport Size  ================ 
     */
    setDefualtViewport: function(popupID) {

        const setBoundary = ppom_fancycropper.getSettings(popupID, 'defaultViewport').split(',');

        ppom_fancycropper.setViewPorts(popupID, setBoundary[0], setBoundary[1]);
    },


    /*
     **============= Add ViewPort Into Object  ================ 
     */
    cropieBasicSettings: (popupID, url) => {

        const settings = ppom_fancycropper.getSettings(popupID, 'cropieBasic_settings');

        if (url) {
            settings.url = ppom_fancycropper.cropieStart[popupID]['url'];
        }
        settings.viewport = ppom_fancycropper.viewports;
        settings.boundary = ppom_fancycropper.cropieBoundary;
        settings.enableOrientation = true;

        return settings;
    },


    /*
     **============= Get Fancycropper Settings  ================ 
     */
    getSettings: (popupID, arg) => {

        const data_name = ppom_fancycropper.croppedMeta[popupID].fieldID;

        /*============= localize script ================*/
        const settingObj = window["ppom_fancycropper" + data_name + "_vars"];

        return settingObj[arg];

    },


    /*
     **============= Create Uploaded Image HTML  ================ 
     */
    uploadedImageHTML: function(event, file_id, popupID) {

        let html = '';
        html += '<div class="card" style="width: 20rem;">';
        html += '<div class="ppom-fancycropper-img-box">';
        html += '<img src="' + ppom_fancycropper.cropieStart[popupID]['url'] + '" />';
        html += '</div>';
        html += '<div class="card-body">';
        html += '<a href="javascript:void(0)" class="ppom-fancycropper-open btn btn-success" data-popup-id="ppom-fancycropper-modal-' + file_id + '" data-image-id="' + file_id + '"><span class="fa fa-crop"></span></a>';
        html += '<a href="javascript:void(0)" class="btn btn-danger ppom-fancycropper-delete" data-popup-id="ppom-fancycropper-modal-' + file_id + '"><span class="fa fa-times"></a>';
        html += '</div>';
        html += '</div>';

        return html;
    },


    /*
     **============= Cropper Popup HTML  ================ 
     */
    cropperPopupHTML: function(popupID) {

        const cropperOption = ppom_fancycropper.getSettings(popupID, 'cropper_options');
        const image_rotation = ppom_fancycropper.getSettings(popupID, 'image_rotation');

        let modal = '';
        modal += '<div class="remodal ppom-fancycropper-remodal" data-remodal-id="modal">';
        modal += '<div class="ppom-fancycropper-save-action">';
        modal += '<div class="ppom-fancycropper-save-loader" style="display:none;"></div>';
        modal += '<button class="btn btn-primary ppom_fancycropper_meta_save" style="display:none;">' + ppom_fancycropper.getSettings(popupID, 'saveBtnMsg'); + '</button>';
        modal += '</div>';

        modal += '<ul class="ppom-fancycropper-tabs">';
        modal += '<li class="tab-active"><button data-tab-id="tab-1">' + ppom_fancycropper.getSettings(popupID, 'viewtabe_label') + '</button></li>';
        modal += '<li><button data-tab-id="tab-2">' + ppom_fancycropper.getSettings(popupID, 'croppedtabe_label') + '<span class="ppom_fancycropper_cropped_counter">0</span></button></li>';
        modal += '</ul>';

        modal += '<div class="ppom-fancycropper-tabs-content ppom-wrapper">';

        modal += '<div data-content-id="tab-1" style="display: block;">';

        modal += '<div class="ppom-fancycropper-viewport-wrapper">';

        if (cropperOption.length !== 0) {

            modal += '<select class="ppom-fancycropper-vp-js form-control">';
            modal += '<option value="" data-option-type="free">' + ppom_fancycropper.getSettings(popupID, 'firstOptionText') + '</option>';
            jQuery.each(cropperOption, function(i, meta) {

                const label = meta.label;
                const price = meta.price;
                const width = meta.width;
                const height = meta.height;
                const option_id = meta.option_id;
                const data_name = meta.data_name;

                modal += '<option data-option-type="paid" data-option-id="' + option_id + '" data-width="' + width + '" data-height="' + height + '">' + label + '</option>';
            });
            modal += '</select>';
        }
        modal += '<button class="remodal-confirm ppom-fancycropper-apply">' + ppom_fancycropper.getSettings(popupID, 'vpApplyBtnLabel') + '</button>';
        modal += '</div>';

        modal += '<div class="ppom-fancycropper-handler"></div>';

        // Actions Buttons
        if (image_rotation) {

            modal += '<div class="ppom-fancycropper-action-btn">';
            modal += '<button class="remodal-confirm ppom-fancycropper-rotate-img" data-deg="90">Rotate Image</button>';
            modal += '</div>';
        }

        modal += '</div>';


        modal += '<div data-content-id="tab-2" style="display: none;">';
        modal += '<div class="ppom-fancycropper-cropped-cart"><div class="ppom-fancycropper-cropped-title"><span class="ppom_fancycropper_totals"></span><span class="ppom-fancycropper-nocropped"></span></div></div>';
        modal += '</div>';

        modal += '</div>';

        modal += '</div>';

        return modal;
    },


    /*
     **============= Saved Cropped Images  ================ 
     */
    saveCroppedImages: (data, popupID) => {

        const url = ppom_fancycropper.getSettings(popupID, 'cropper_reset');

        const cropped_data = {
            'cropped_meta': data,
            'popupID': popupID,
        };

        $.post(url, cropped_data, function(resp) {

            jQuery('[data-remodal-id="' + popupID + '"] .ppom-fancycropper-save-loader').hide();
            jQuery('[data-remodal-id="' + popupID + '"] .ppom_fancycropper_meta_save').prop('disabled', false);

            if (resp.status == 'success') {
                ppom_fancycropper.createHiddinInput(resp.cropperMeta, popupID);
            }
            alert(resp.message);

            // Close the popup when images is saved
            const inst = jQuery('[data-remodal-id=' + popupID + ']').remodal();

            inst.close();

        }, 'json')
    },


    CroppedImageHTML: function(resp, popupID, randname) {

        const results = jQuery('[data-remodal-id="' + popupID + '"] .ppom-fancycropper-cropped-cart');

        const raw = ppom_fancycropper.croppedMeta[popupID].cropped[randname].raw;
        const price = ppom_fancycropper.croppedMeta[popupID].cropped[randname].price;

        const enableQuantity = ppom_fancycropper.getSettings(popupID, 'enableQuantity');

        let html = '';
        html += '<div class="ppom-fancycropper-cart-box">';
        html += '<div class="ppom-fancycropper-cart-cross ppom-fancycropper-quantity-rm" data-id="' + randname + '" data-popup-id="' + popupID + '">';
        html += '<i class="fa fa-times" aria-hidden="true"></i>';
        html += '</div>';

        html += '<div class="ppom-fancycropper-cart-img">';
        html += '<img src="' + resp + '" alt="" />';
        html += '</div>';

        html += '<div class="ppom-fancycropper-cart-desc">';
        html += '<p>' + raw + '</p>';
        html += '<p>ID: ' + randname + '</p>';

        if (price != 0) {
            html += '<p>' + ppom_fancycropper.formatted_price(price) + '</p>';
        }

        html += '</div>';

        if (enableQuantity) {

            html += '<div class="ppom-fancycropper-cart-qty">';
            html += '<button class="plus-btn" type="button" name="button">';
            html += '<i class="fa fa-plus" aria-hidden="true"></i>';
            html += '</button>';
            html += '<input type="number" class="ppom-fancycropper-quantity" name="name" value="1" data-id="' + randname + '" data-popup-id="' + popupID + '">';
            html += '<button class="minus-btn" type="button" name="button">';
            html += '<i class="fa fa-minus" aria-hidden="true"></i>';
            html += '</button>';
            html += '</div>';
        }
        else {
            html += '<input type="hidden" class="ppom-fancycropper-quantity" name="name" value="1" data-id="' + randname + '" data-popup-id="' + popupID + '">';
        }

        if (price != 0) {

            html += '<div class="ppom-fancycropper-cart-optiontotal" data-optiontotal_id="' + randname + '">0</div>';
        }

        html += '</div>';

        const li = jQuery(html)
            .appendTo(results);
    },


    /*
     **============= Generate Unique ID  ================ 
     */
    genereteUniqueID: function(length) {

        var text = "";
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        for (var i = 0; i < length; i++)
            text += possible.charAt(Math.floor(Math.random() * possible.length));

        return text;
    },


    /*
     **============= Control File Size Validations ================ 
     */
    Filevalidation: (popupID, file) => {

        let $return = true;

        // if (file.files.length > 0) {

        const fileSize = ppom_fancycropper.getSettings(popupID, 'fileSize')

        const arr = fileSize.split('|');

        let size = 0;
        if (arr[1] == "mb") {
            size = (file.size / 1024 / 1024).toFixed(2);
        }
        else {
            size = (file.size / 1024).toFixed(2);
        }

        if (parseInt(size) >= parseInt(arr[0])) {
            alert("File too Big, please select a file less than " + arr[0] + '' + arr[1]);
            $return = false;
        }
        // }

        return $return;
    },


    /*
     **============= WC Formatted Price Convertor ================ 
     */
    formatted_price: price => ppom_get_wc_price(price).html(),


    /*
     **============= Count Cropped Images And Save In Meta ================ 
     */
    croppedCounter: popupID => {

        const croppedImages = ppom_fancycropper.croppedMeta[popupID].cropped;
        const count = Object.keys(croppedImages).length;

        jQuery('[data-remodal-id="' + popupID + '"] .ppom_fancycropper_cropped_counter').html(count);

        return count;
    },


    /*
     **============= Create Hidden Input For Save All Cropped Meta ================ 
     */
    createHiddinInput: function(resp, popupID) {

        const data_name = resp.data_name;
        const totalPrice = resp.totalPrice;
        let fileName = resp.fileName;
        fileName = fileName.split('.').shift();

        var container = jQuery(".ppom-input-" + data_name);

        // Create Hidden Input ID
        var the_id = 'ppom-fancycropper-' + data_name + '-' + popupID;

        // remove/reset
        jQuery("#" + the_id).remove();

        jQuery('<input/>')
            .attr({ 'type': 'checkbox', 'name': 'ppom[fields][' + data_name + '][' + popupID + ']' })
            .attr('id', the_id)
            .attr('data-price', totalPrice)
            .attr('data-label', fileName)
            .prop('checked', true)
            .css('display', 'none')
            .val(JSON.stringify(resp))
            .appendTo(container);

        ppom_update_option_prices();
    },


    /*
     **============= Cropped Images Quantities Inc/Decr Hander ================ 
     */
    qtyBtnActions: function() {

        jQuery(document).on('click', '.minus-btn', function(e) {

            e.preventDefault();
            var $this = jQuery(this);
            var $input = $this.closest('div').find('input');
            var value = parseInt($input.val());

            if (value > 1) {
                value = value - 1;
            }
            else {
                value = 1;
            }

            $input.val(value);

            jQuery('.ppom-fancycropper-quantity').trigger('change');
        });

        jQuery(document).on('click', '.plus-btn', function(e) {

            e.preventDefault();
            var $this = jQuery(this);
            var $input = $this.closest('div').find('input');
            var value = parseInt($input.val());

            if (!isNaN(value)) {
                value = value + 1;
            }
            else {
                value = 1;
            }

            $input.val(value);
            jQuery('.ppom-fancycropper-quantity').trigger('change');
        });
    }
}

jQuery(function($) {
    

    ppom_fancycropper.init();

});