<?php
/**
 * AdminSettings
 *
 * @package PPOM_Pro\Addons\ConditionalFieldRepeater
 */
namespace PPOM_Pro\Addons\ConditionalFieldRepeater;

use PPOM_Pro\Addons\ConditionalFieldRepeater\ConditionalFieldRepeater;
/**
 * Class AdminSettings
 * Manages Admin Setting Fields
 */
class AdminSettings {
    // Key of the "Conditional Field Repeater" tab
    const TAB_KEY = 'conditional_field_repeater';

    // Field type of the form that shown in Conditional Field Repeater tab content.
    const CUSTOM_FIELD_TYPE = 'html-field-repeater';

    /**
     * Init hooks
     *
     * @return void
     */
    public function init() {
        if( ! is_admin() ) {
            return;
        }

        $this->register_settings();
        $this->update_field_classes();
        $this->create_new_field_type_for_form();
        $this->register_settings_tab();
        add_action( 'admin_enqueue_scripts', array( $this, 'load_scripts' ) );
        $this->save_settings_only_if_activated();
    }

    /**
     * Removes conditional field repeater setup settings if the feature is not activated for the field.
     *
     * @return void
     */
    private function save_settings_only_if_activated() {
        add_filter( 'ppom_meta_data_saving', array( $this, 'handler_save_settings_only_if_activated' ), 10, 1 );
    }

    /**
     * WP Filter Handler that responsible for removing conditional field repeater setup settings if the feature is not activated for the field.
     *
     * @param  array $fields Current fields of the saved PPOM Fields Group.
     * @return array
     */
    public function handler_save_settings_only_if_activated( $fields ) {
        foreach($fields as $k=>$field) {
            if( ! array_key_exists( ConditionalFieldRepeater::SETTING_KEY_ENABLE, $field ) || $field[ConditionalFieldRepeater::SETTING_KEY_ENABLE] !== 'on' ) {
                unset($fields[$k][ConditionalFieldRepeater::SETTING_KEY_FORM]);
            }
        }

        return $fields;
    }

    /**
     * Register a new tab in admin field edit screen.
     *
     * @return void
     */
    public function register_settings_tab() {
        add_filter( 'ppom_fields_tabs_show', array( $this, 'register_settings_tab_handler' ), 10, 1 );
    }

    /**
     * Creates a tab for all input type edit screen.
     *
     * @param  array $tabs current tabs of the field.
     * @return array
     */
    public function register_settings_tab_handler( $tabs ) {
        $tabs[self::TAB_KEY] = array(
            'label' => __( 'Conditional Repeater', 'woocommerce-product-addon' ),
            'class' => array( 'ppom-tabs-label', 'ppom-field-repeater-tab-js' ),
            'field_depend' => array( 'all' )
        );

        return $tabs;
    }

    /**
     * Add needed HTML classes to the Conditional Field Repeater setting fields.
     *
     * @return void
     */
    public function update_field_classes() {
        add_filter( 'ppom_tabs_panel_classes', array( $this, 'update_field_classes_handler' ) );
    }

    /**
     * Update classes of the fields that related to Conditional Field Repeater.
     *
     * @param  array $settings Current settings
     * @return array All settings as their classes updated.
     */
    public function update_field_classes_handler($settings) {
        $settings[ConditionalFieldRepeater::SETTING_KEY_ENABLE]['tabs_class'] = array( 'ppom_handle_' . self::TAB_KEY, 'ppom_cfr_enable' );
        $settings[ConditionalFieldRepeater::SETTING_KEY_FORM]['tabs_class'] = array( 'ppom_handle_' . self::TAB_KEY, 'ppom_cfr_setup_form' );

        return $settings;
    }

    /**
     * Register needed fields.
     *
     * @return void
     */
    private function register_settings() {
        add_filter( 'ppom_all_inputs', array( $this, 'register_settings_handler' ), PHP_INT_MAX );
    }

    /**
     * Adds admin setting fields to all input types.
     *
     * @param  array $inputs current input classes
     * @return array
     */
    public function register_settings_handler( $inputs ) {
        return array_map( function($input_class) {
            if( ! is_object( $input_class ) || ! property_exists( $input_class, 'settings' ) || !is_array($input_class->settings) ) {
                return $input_class;
            }

            $input_class->settings[ConditionalFieldRepeater::SETTING_KEY_ENABLE] = array(
                'type' => 'checkbox',
                'title' => __( 'Enable Conditional Repeat', 'woocommerce-product-addon' ),
                'desc' => __( 'This control turns on the Conditional Field Repeater mode for this field, in this way, this field is repeated by the selected field(selected in the Origin setting) below', 'woocommerce-product-addon' )
            );

            $input_class->settings[ConditionalFieldRepeater::SETTING_KEY_FORM] = array(
                'type' => self::CUSTOM_FIELD_TYPE,
                'title' => __( 'Settings', 'woocommerce-product-addon' ),
                'desc' => __( 'Conditional Field Repeater settings are managed in this section.', 'woocommerce-product-addon' )
            );

            return $input_class;
        }, $inputs );
    }

    /**
     * Create a new field type for the setup form of the conditional field repeater.
     *
     * @return void
     */
    public function create_new_field_type_for_form() {
        add_filter( 'render_input_types', array($this, 'create_new_field_type_for_form_handler'), 10, 6 );
    }

    /**
     * Define field content of the new admin field.
     * This field contains all form to setup the conditional field repeater.
     * This method is the handler of the "render_input_types" hook.
     *
     * @param  string $html_input Current HTML output of the given field.
     * @param  string $type Type of the admin field.
     * TODO: add doc for the other arguments too.
     * @return string HTML output of the admin field.
     */
    public function create_new_field_type_for_form_handler( $html_input, $type, $name, $values, $options, $field_index ) {
        if( $type !== self::CUSTOM_FIELD_TYPE ) {
            return $html_input;
        }

        return $html_input . $this->get_form_field_html($field_index, $values);
    }

    /**
     * Get HTML content of the form field that allows setup conditional field repeater settings.
     *
     * @return string HTML content of the form
     */
    private function get_form_field_html($field_index, $values) {
        ob_start();
        $field_key = ConditionalFieldRepeater::SETTING_KEY_FORM;
        $current_origin_value = isset($values['origin']) ? $values['origin'] : '';
        include PPOM_PRO_PATH . '/inc/Addons/ConditionalFieldRepeater/templates/form.php';
        return ob_get_clean();
    }

    /**
     * Load admin assets
     *
     * @return void
     */
    public function load_scripts() {
        // TODO: add a condition to load assets only in wp-admin/admin.php?page=ppom&productmeta_id=34&do_meta=edit
        wp_enqueue_script( 'conditional_field_repeater', PPOM_PRO_URL . '/assets/conditional_field_repeater/admin/build/main.js', array(), PPOM_PRO_VERSION, true );
        wp_localize_script( 'conditional_field_repeater', 'conditionalFieldRepater', [
            'i18n'=>[
                'none'=>__( 'None', 'woocommerce-product-addon' ),
                'text_copied'=>__( 'Copied the text', 'woocommerce-product-addon' )
            ],
            'constants'=>[
                'SETTING_KEY_ENABLE'=>ConditionalFieldRepeater::SETTING_KEY_ENABLE,
                'SETTING_KEY_FORM'=>ConditionalFieldRepeater::SETTING_KEY_FORM,
            ]
        ] );
    }
}