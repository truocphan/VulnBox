<?php
/**
 * Plugin Name: PPOM Add-on Emojis
 * Description: A drop-down list of all emojis on frontend where customers can select and add to cart.
 * Version: 1.0
 * Text Domain: ppom-emojis
 * License: GPL2
 */

namespace PPOM_Pro\Addons\Emojis;

use PPOM_Pro\Abstract_Addon;

class Emojis extends Abstract_Addon {


	/**
	 * @return void
	 */
	function run_hooks() {
		// File path
		add_filter( 'nm_input_class-emojis', array( $this, 'addon_em_path' ), 19, 2 );
		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );
		// Render Datepicker Input
		add_action( 'ppom_rendering_inputs_emojis', array( $this, 'render_input' ), 10, 5 );
		// Load Custom Scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'load_scripts' ), 10, 2 );
		// PPOM Admin Tabs
		add_filter( 'ppom_fields_tabs_show', array( $this, 'ppom_tabs_render' ), 10, 2 );
		add_filter( 'ppom_tabs_panel_classes', array( $this, 'ppom_tabs_classes' ), 10, 1 );
	}

	// file path function
	function addon_em_path( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.emojis.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}

	/*
	**============= Loading all PRO inputs ================
	*/
	function load_addon( $inputs_array, $inputObj ) {

		$inputs_array['emojis'] = $inputObj->get_input( 'emojis' );

		return $inputs_array;
	}

	function render_input( $meta, $default_value ) {
		if ( $meta['type'] != 'emojis' ) {
			return '';
		}
		$html = '';
		ob_start();
		$template_design = 'emojis';
		$template_path   = $this->addon_path . '/templates/emojis.php';
		$template_vars   = array(
			'field_meta'    => $meta,
			'default_value' => $default_value,
			'addon_type'    => $template_design,
		);

		ppom_load_input_templates( $template_path, $template_vars );

		$html .= ob_get_clean();

		echo apply_filters( 'ppom_emojis_html', $html );
	}

	// Load Custom Scripts function
	function load_scripts( $field, $data_name ) {

		if ( $field['type'] != 'emojis' ) {
			return '';
		}

		if ( $field['type'] == 'emojis' ) {

			wp_enqueue_style( 'emojis_css', $this->addon_url . '/css/emojis.css' );
			wp_enqueue_style( 'emojis_min_css', $this->addon_url . '/css/emojionearea.min.css' );
			wp_enqueue_script( 'ppom-emojis-min-js', $this->addon_url . '/js/emojionearea.min.js', array( 'jquery' ), PPOM_PRO_VERSION, true );
			wp_enqueue_script( 'ppom-emojis-js', $this->addon_url . '/js/emojis.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

			$search_placeholder = isset( $field ['search_placeholder'] ) ? $field ['search_placeholder'] : '';
			$placeholder        = isset( $field ['placeholder'] ) ? $field ['placeholder'] : '';
			$standalone         = isset( $field ['emojis_display_type'] ) ? $field ['emojis_display_type'] : '';
			$recent_emojis      = isset( $field ['recent_emojis'] ) ? $field ['recent_emojis'] : '';
			$tones              = isset( $field ['tones'] ) ? $field ['tones'] : '';
			$search             = isset( $field ['search'] ) ? $field ['search'] : '';
			$search_position    = isset( $field ['search_position'] ) ? $field ['search_position'] : '';
			$picker_position    = isset( $field ['picker_position'] ) ? $field ['picker_position'] : '';
			$filters_position   = isset( $field ['filters_position'] ) ? $field ['filters_position'] : '';
			$tones_Style        = isset( $field ['tones_Style'] ) ? $field ['tones_Style'] : '';
			$emojis_array       = [
				'search'             => $search,
				'picker_position'    => $picker_position,
				'standalone'         => $standalone,
				'placeholder'        => $placeholder,
				'search_placeholder' => $search_placeholder,
				'search_position'    => $search_position,
				'recent_emojis'      => $recent_emojis,
				'filters_position'   => $filters_position,
				'tones'              => $tones,
				'tones_Style'        => $tones_Style,
			];

			wp_localize_script( 'ppom-emojis-js', 'emojis_js', $emojis_array );

		}
	}

	// tabs render function
	function ppom_tabs_render( $tabs, $fields_type ) {

		if ( $fields_type == 'emojis' ) {
			$tabs['add_setting_tab'] = array(
				'label'        => __( 'Emojis Settings', 'woocommerce-product-addon' ),
				'class'        => array( 'ppom-tabs-label' ),
				'field_depend' => array( 'emojis' ),
			);
		}

		return $tabs;
	}

	/* **========== Handle Admin Tabs Classes =========== */

	function ppom_tabs_classes( $settings ) {
		foreach ( $settings as $fields_meta_key => $meta ) {

			$type = isset( $meta['type'] ) ? $meta['type'] : '';
			if ( $type !== 'emojis' ) {
				return $settings;
			}

			if ( $fields_meta_key == 'emojis_display_type' ) {
				$settings['emojis_display_type']['tabs_class'] = array( 'ppom_handle_add_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'search' ) {
				$settings['search']['tabs_class'] = array( 'ppom_handle_add_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'picker_position' ) {
				$settings['picker_position']['tabs_class'] = array( 'ppom_handle_add_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'standalone' ) {
				$settings['standalone']['tabs_class'] = array( 'ppom_handle_add_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'placeholder' ) {
				$settings['placeholder']['tabs_class'] = array( 'ppom_handle_add_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'search_placeholder' ) {
				$settings['search_placeholder']['tabs_class'] = array( 'ppom_handle_add_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'search_position' ) {
				$settings['search_position']['tabs_class'] = array( 'ppom_handle_add_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'recent_emojis' ) {
				$settings['recent_emojis']['tabs_class'] = array( 'ppom_handle_add_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'filters_position' ) {
				$settings['filters_position']['tabs_class'] = array( 'ppom_handle_add_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'tones' ) {
				$settings['tones']['tabs_class'] = array( 'ppom_handle_add_setting_tab', 'col-md-6' );
			}
			if ( $fields_meta_key == 'tones_Style' ) {
				$settings['tones_Style']['tabs_class'] = array( 'ppom_handle_add_setting_tab', 'col-md-6' );
			}       
		}

		return $settings;
	}
}
