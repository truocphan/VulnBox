<?php

namespace PPOM_Pro;

abstract class Abstract_Addon {
	/**
	 * Addon slug.
	 *
	 * @var string
	 */
	protected $slug;

	/**
	 * Addon path.
	 *
	 * @var string
	 */
	protected $addon_path;
	/**
	 * Addon URL.
	 *
	 * @var string
	 */
	protected $addon_url;

	/**
	 * Constructor
	 *
	 * @param $slug
	 */
	public function __construct( $slug ) {
		$this->slug       = $slug;
		$this->addon_path = $this->get_addon_path();
		$this->addon_url  = $this->get_addon_url();

		$this->run_hooks();

		// Settings Panel Framework
		if ( function_exists( 'PPOMSETTINGS' ) ) {
			$this->load_settings();
		}
	}

	/**
	 * Just a stub in the abstract.
	 *
	 * @return void
	 */
	protected function load_settings() {

	}

	/**
	 * The init function where all hooks should be registered.
	 *
	 * @return mixed
	 */
	abstract function run_hooks();

	/**
	 * Get the addon path.
	 *
	 * @return string
	 */
	private function get_addon_path() {
		return PPOM_PRO_PATH . '/inc/Addons/' . $this->slug;
	}

	/**
	 * Get the addon url.
	 *
	 * @return string
	 */
	private function get_addon_url() {
		return PPOM_PRO_URL . '/inc/Addons/' . $this->slug;
	}

	/**
	 * Load template.
	 *
	 * @param string       $template_path additional template path, relative to templates directory.
	 * @param array | null $vars template variables.
	 *
	 * @return void
	 */
	final protected function load_template( $template_path, $vars = null ) {
		if ( $vars != null && is_array( $vars ) ) {
			extract( $vars );
		};

		$path = $this->addon_path . "/templates/{$template_path}";
		if ( ! is_file( $path ) ) {
			return;
		}
		require $path;
	}
}
