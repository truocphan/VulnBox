<?php
/***
 * Plugin Name: PPOM Addon Option Quantity
 * Description: An addon to PPOM
 * Version: 1.5
 * Text Domain: ppom-addon-quantityoption
 * License: GPL2
 */

namespace PPOM_Pro\Addons\OptionQty;

use PPOM_Pro\Abstract_Addon;

class OptionQty extends Abstract_Addon {
	function run_hooks() {
		// Load action for input scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'hook_input_scripts' ), 10, 2 );

		// Rendering quantityoption inputs
		add_action( 'ppom_rendering_inputs', array( $this, 'render_input_quantityoption' ), 10, 5 );

		// File path
		add_filter( 'nm_input_class-quantityoption', array( $this, 'addon_path_quantityoption' ), 10, 2 );

		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );

		// Cart price
		add_filter( 'ppom_fields_prices', array( $this, 'set_cart_price' ), 10, 3 );
	}

	/**
	 * Load scripts
	 */
	function hook_input_scripts( $field, $data_name ) {

		if ( $field['type'] != 'quantityoption' ) {
			return '';
		}

		$localize_vars = array();

		if ( $field['type'] == 'quantityoption' ) {

			// wp_enqueue_style('ppom-quantityoption', $this->$this->addon_url."/css/ppom-quantityoption.css");
			wp_enqueue_script( 'ppom-quantityoption', $this->addon_url . '/js/ppom-quantityoption.js', array( 'jquery' ), PPOM_PRO_VERSION, true );
			// $js_vars = array('field_meta' => $field);
			// // ppom_pa($js_vars);
			// wp_localize_script( 'ppom-quantityoption', 'ppom_quantityoption_vars', $js_vars);
		}
	}


	/**
	 * quantityoption inputs path load
	 */
	function addon_path_quantityoption( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.quantityoption.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}


	/**
	 * Loading all PRO inputs
	 */
	function load_addon( $inputs_array, $inputObj ) {

		// checking quantityoption addon is enable
		$inputs_array['quantityoption'] = $inputObj->get_input( 'quantityoption' );

		return $inputs_array;
	}


	// Setting cart price
	function set_cart_price( $field_prices, $ppom_fields_post, $product_id ) {


		foreach ( $ppom_fields_post as $data_name => $value ) {

			$field_meta = ppom_get_field_meta_by_dataname( $product_id, $data_name );
			$field_type = isset( $field_meta['type'] ) ? $field_meta['type'] : '';
			$onetime    = isset( $field_meta['onetime'] ) ? $field_meta['onetime'] : '';

			if ( $field_type !== 'quantityoption' ) {
				continue;
			}

			$unit_price = isset( $field_meta['unit_price'] ) && $field_meta['unit_price'] > 0 ? $field_meta['unit_price'] : 1;
			if ( $onetime == 'on' ) {
				$charge = 'cart_fee';
			} else {
				$charge = 'addon';
			}

			$field_price = floatval( $value ) * floatval( $unit_price );
			$options     = $value;


			$field_prices[] = ppom_generate_field_price( $field_price, $field_meta, $charge, $options, 1 );

		}

		// ppom_pa($field_prices);


		return $field_prices;
	}


	/**
	 * Frontent meta rendering
	 */
	function render_input_quantityoption( $meta, $data_name, $classes, $field_label, $options ) {

		if ( $meta['type'] != 'quantityoption' ) {
			return '';
		}

		// ppom_pa($meta);

		$default_value           = isset( $meta['default_value'] ) ? $meta['default_value'] : '';
		$min                     = isset( $meta['min'] ) ? $meta['min'] : '';
		$max                     = isset( $meta['max'] ) ? $meta['max'] : '';
		$step                    = isset( $meta['step'] ) ? $meta['step'] : '';
		$onetime                 = isset( $meta['onetime'] ) ? $meta['onetime'] : '';
		$placeholder             = isset( $meta['placeholder'] ) ? $meta['placeholder'] : '';
		$error_msg               = isset( $meta['error_message'] ) ? $meta['error_message'] : '';
		$title                   = isset( $meta['title'] ) ? $meta['title'] : '';
		$required                = isset( $meta['required'] ) ? $meta['required'] : '';
		$quantityoption_classes  = implode( ' ', $classes );
		$quantityoption_classes .= ' ppom-input-quantityoption quantityoption';
		$quantityoption_classes .= $required === 'on' ? ' ppom-required' : '';

		$meta['id']          = $data_name;
		$input_wrapper_class = 'form-group';
		$input_wrapper_class = apply_filters( 'ppom_input_wrapper_class', $input_wrapper_class, $meta );

		$html  = '';
		$html .= '<div class="' . esc_attr( $input_wrapper_class ) . '">';

		if ( $field_label ) {
			$html .= '<label class="form-control-label" for="' . esc_attr( $data_name ) . '">';
			$html .= sprintf( __( '%s', 'woocommerce-product-addon' ), $field_label ) . '</label>';
		}

		$unit_price = isset( $meta['unit_price'] ) && $meta['unit_price'] > 0 ? $meta['unit_price'] : 1;

		$html .= '<input type="number" ';
		$html .= 'class="' . esc_attr( $quantityoption_classes ) . '" ';
		$html .= 'min="' . esc_attr( $min ) . '" max="' . esc_attr( $max ) . '" step="' . esc_attr( $step ) . '" ';
		$html .= 'data-price="' . esc_attr( $unit_price ) . '" ';
		$html .= 'data-price_formatted="' . esc_attr( wc_price( $unit_price ) ) . '" ';
		$html .= 'id="' . esc_attr( $data_name ) . '" ';
		$html .= 'data-data_name="' . esc_attr( $data_name ) . '" ';
		$html .= 'data-title="' . esc_attr( $title ) . '" ';
		$html .= 'data-onetime="' . esc_attr( $onetime ) . '" ';
		$html .= 'placeholder="' . esc_attr( $placeholder ) . '" data-errormsg="' . esc_attr( $error_msg ) . '"';

		$default_value = $this->get_default_value( $default_value, $data_name );

		// Values
		if ( $default_value != '' ) {
			$html .= 'value="' . esc_attr( $default_value ) . '" ';
		}

		$html .= '>';

		$html .= '</div>';    // form-group

		echo apply_filters( 'ppom_quantityoption_html', $html );
	}


	// Getting default value from POST or Cart Editor
	function get_default_value( $default_value, $data_name ) {

		// ppom_pa($_POST['ppom']['fields']);

		// Check cart value first
		if ( isset( $_POST['ppom']['fields'][ $data_name ] ) ) {
			$default_value = $_POST['ppom']['fields'][ $data_name ];
		}

		// Cart edit
		if ( isset( $_GET[ $data_name ] ) ) {
			$default_value = $_GET[ $data_name ];
		}

		return $default_value;
	}
}
