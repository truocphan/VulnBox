<?php
/**
 * Plugin Name: Bulk T-Shirts Order
 * Description: A plugin to manage tickets for your client supports
 * Version: 1.0
 * Text Domain: bulkteams
 * License: GPL2
 */

namespace PPOM_Pro\Addons\BulkTeams;

use PPOM_Pro\Abstract_Addon;

class BulkTeams extends Abstract_Addon {

	function run_hooks() {

		add_action( 'admin_menu', array( $this, 'show_menu' ), 9 );

		add_action( 'admin_post_ppom_link_meta', array( $this, 'ppom_import_csv' ) );

		add_filter(
			'woocommerce_add_cart_item_data',
			function ( $cart, $product_id ) {

				if ( isset( $_POST['bulksizes'] ) ) {
					$cart['bulksizes'] = $_POST['bulksizes'];
				}

				// if( isset($_POST['playerinfo']) ) {
				// $cart['playerinfo'] = $_POST['playerinfo'];
				// }

				return $cart;

			},
			12,
			2 
		);

		add_action( 'woocommerce_add_to_cart', [ $this, 'add_cart_single' ] );

		// Show item meta data on cart/checkout pages.
		add_filter( 'woocommerce_get_item_data', [ $this, 'cart_meta' ], 10, 2 );


		add_action( 'admin_notices', array( $this, 'general_admin_notice' ) );

		add_action( 'woocommerce_before_add_to_cart_button', [ $this, 'render_react' ] );
	}


	public function render_react() {

		global $post;

		$ppomid = get_post_meta( $post->ID, 'ppom_id', true );

		if ( ! $ppomid ) {
			return '';
		}

		$rest_url = get_rest_url( null, "ppom/v1/get/id/{$ppomid}" );

		echo '<script>window.ppom_rest_url=\'' . esc_url( $rest_url ) . '\';</script>';

		wp_enqueue_style( 'wpreact-css', $this->addon_url . '/react/build/static/css/main.073c9b0a.css' );
		wp_enqueue_script( 'wpreact-js', $this->addon_url . '/react/build/static/js/main.219bfdcb.js', array(), '1.0.0', true );

		echo '<div id="react_root"></div>';
	}

	function cart_meta( $item_meta, $cart_item ) {

		if ( ! isset( $cart_item['playerinfo'] ) ) {
			return $item_meta;
		}

		$playerinfo  = $cart_item['playerinfo'];
		$item_meta[] = [
			'name'  => 'Size',
			'value' => $cart_item['size'],
		];
		if ( $playerinfo ) {
			foreach ( $playerinfo as $name => $value ) {
				$item_meta[] = [
					'name'  => $name,
					'value' => $value,
				];
			}
		}

		// ppom_pa($cart_item['playerinfo']);
		return $item_meta;

	}

	function add_cart_single() {

		$cart_items = WC()->cart->get_cart();
		foreach ( $cart_items as $key => $item ) {

			if ( isset( $item['playerinfo'] ) ) {
				continue;
			}

			$_product   = $item['data'];
			$product_id = $_product->get_id();
			if ( array_key_exists( 'bulksizes', $item ) ) {


				WC()->cart->remove_cart_item( $key );

				foreach ( $item['bulksizes'] as $size ) {

					$players = $size['fields'];
					foreach ( $players as $key => $player ) {
						$meta['size']       = $size['size'];
						$meta['playerinfo'] = $player;
						$qty                = 1;
						WC()->cart->add_to_cart( $product_id, $qty, null, null, $meta );
					}
				}           
			}
		}
		// ppom_pa($cart_items); exit;
	}

	function custome_add_to_cart() {
		global $woocommerce;

		$removable_key = null;
		$product_id    = '';
		$item_data     = [ 'ppom_repeater' => [] ];
		if ( sizeof( WC()->cart->get_cart() ) > 0 ) {
			foreach ( WC()->cart->get_cart() as $cart_item_key => $values ) {

				if ( isset( $values['bulk_size'] ) ) {
					continue;
				}

				$_product = $values['data'];

				foreach ( $values['bulksizes'] as $id => $data ) {

					if ( $id === 'id' ) {
						$removable_key = $cart_item_key;
						continue;
					}
				}

				$fields = $values['bulksizes'];

				$item_data['ppom_repeater'][] = [
					'select_size' => $fields['select_size'],
					'name'        => $fields['name'],
					'number'      => $fields['number'],
				];
				for ( $i = 1; $i <= 50; $i ++ ) {

					if ( ! isset( $fields[ 'select_size__clone_' . $i ] ) ) {
						continue;
					}

					$item_data['ppom_repeater'][] = [
						'select_size' => $fields[ 'select_size__clone_' . $i ],
						'name'        => $fields[ 'name__clone_' . $i ],
						'number'      => $fields[ 'number__clone_' . $i ],
					];
				}


				// if ( $_product->id == $product_id )
				// $found = true;
			}
			// if product not found, add it
			// ppom_pa($item_data['ppom_repeater']);
			if ( $removable_key !== null ) {

				WC()->cart->remove_cart_item( $removable_key );

				if ( isset( $item_data['ppom_repeater'] ) ) {
					foreach ( $item_data['ppom_repeater'] as $i => $f ) {
						// $meta['ppom']['fields'] = $f;
						$meta['repeater']     = $f;
						$meta['has_repeater'] = $i;
						$qty                  = isset( $f['select_size']['qty'] ) ? $f['select_size']['qty'] : 1;
						WC()->cart->add_to_cart( $product_id, $qty, null, null, $meta );
					}
				}
			}
		}
		// ppom_pa($cart);
		// exit;
	}

	function show_menu() {

		add_submenu_page(
			'options-general.php',
			'Bulk Teams',
			'Bulk Teams',
			'manage_options',
			'bulkteams-settings',
			array( $this, 'setting_page' ) 
		);

	}

	function setting_page() {

		$this->load_assets();

		$this->load_template( 'settings.php' );
	}

	function load_assets() {
		wp_enqueue_script( 'bulkteams-js', $this->addon_url . '/assets/bulkteams.js', [ 'jquery' ], null, true );
		wp_localize_script( 'bulkteams-js', 'bulkteams_vars', [ 'ajax_url' => admin_url( 'admin-ajax.php' ) ] );

		wp_enqueue_style( 'bulkteams-css', $this->addon_url . '/assets/bulkteams.css' );
	}


	// import from csv
	function ppom_import_csv() {

		if ( ! current_user_can( 'administrator' ) ) {
			wp_die( __( 'Sorry, you are not allowed to perform this action', 'woocommerce-product-addon' ) );
		}

		if ( empty( $_FILES['ppom_csv']['tmp_name'] ) ) {
			$args  = array( 'back_link' => true );
			$title = __( 'PPOM Meta Not Found', 'woocommerce-product-addon' );
			wp_die( __( 'File not found/selected, selected PPOM meta file and import', 'woocommerce-product-addon' ), $title, $args );
		}

		// get the csv file
		$file   = $_FILES['ppom_csv']['tmp_name'];
		$handle = fopen( $file, 'r' );

		$row        = 1;
		$meta_keys  = [];
		$skip_head  = true;
		$ppom_metas = [];
		$the_metas  = [];
		if ( $handle !== false ) {

			while ( ( $data = fgetcsv( $handle, 0, ',' ) ) !== false ) {
				$meta_keys = $row == 1 ? $data : $meta_keys;

				/**
				 * sometime exported CVS has leading space
				 * removing extra spaces in header
				 * Fixed by: Najeeb Ahmad
				 * Date: August 1, 2021
				 * */
				$meta_keys = array_map( 'trim', $meta_keys );


				$row ++;

				$the_meta = array_combine( $meta_keys, $data );
				$the_meta = array_filter(
					$the_meta,
					function ( $value ) {
						return ! is_null( $value ) && $value !== '';
					} 
				);

				$ppom_metas[] = $the_meta;
				// $ppom_metas = array_merge($ppom_metas, $the_meta);

			}

			fclose( $handle );
		}

		// remove first element
		array_shift( $ppom_metas );

		// removing empty arrays
		$ppom_metas = array_filter( $ppom_metas );

		$meta_count = count( $ppom_metas );
		// ppom_pa($ppom_metas); exit;
		$this->create_order( $ppom_metas );


		$response = array(
			'class'   => 'updated',
			'message' => sprintf( __( '%d meta(s) imported successfully.', 'woocommerce-product-addon' ), $meta_count ),
		);
		set_transient( 'bulkteams_imported', $response, 30 );
		wp_redirect( admin_url( 'options-general.php?page=bulkteams-settings' ) );
		exit;
	}


	function create_order( $team ) {

		global $woocommerce;

		$billing = [
			'first_name',
			'last_name',
			'company',
			'email',
			'phone',
			'address_1',
			'city',
			'state',
			'postcode',
			'country',
		];

		$billing = array_flip( $billing );
		$billing = array_merge( $billing, $_POST );
		unset( $billing['action'] );

		$order = wc_create_order();
		$order->set_address( $billing, 'billing' );

		foreach ( $team as $i => $player ) {

			$product = get_product( $player['ID'] );
			$size    = $player['SIZE'];
			$qty     = $player['QTY'];
			$name    = $player['NAME'];
			$number  = $player['NUMBER'];

			$item_meta = array(
				'Size'   => $size,
				'Name'   => $name,
				'Number' => $number,
			);

			$item_id = $order->add_product( $product, $qty );
			foreach ( $item_meta as $key => $value ) {
				wc_add_order_item_meta( $item_id, $key, $value );
			}
			// var_dump($id); exit;
		}

		$order->calculate_totals();
		$order->update_status( 'Completed', 'Imported order', true );
	}

	function general_admin_notice() {

		$notice = get_transient( 'bulkteams_imported' );
		$page   = isset( $_GET['page'] ) ? $_GET['page'] : '';
		if ( $page == 'bulkteams-settings' && $notice ) {
			echo '<div class="notice notice-success is-dismissible">
                 <p>' . $notice['message'] . '</p>
             </div>';
		}
	}
}
