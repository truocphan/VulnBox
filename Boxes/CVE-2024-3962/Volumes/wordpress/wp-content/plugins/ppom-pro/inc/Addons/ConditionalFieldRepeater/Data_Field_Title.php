<?php
/**
 * Class Data_Field_Title
 *
 * @package PPOM_Pro\Addons\ConditionalFieldRepeater
 */
namespace PPOM_Pro\Addons\ConditionalFieldRepeater;

use PPOM_Pro\Utility\FieldClone;
use PPOM_Pro\Traits\StringUtility;
use PPOM_Pro\Addons\ConditionalFieldRepeater\ConditionalFieldRepeater;
use PPOM_Pro\Traits\Compatibility;

/**
 * Class Data_Field_Title
 *
 *  That class is responsible from showing of the field titles of the repeated PPOM fields
 * (that submitted by the customer) as human readable
 *
 * That class helps to field title in customer cart, checkout, order details pages, thank you page admin order detail page, etc.
 */
class Data_Field_Title {
    /**
     * That's the string identifier.
     *
     * If that's contains in a WC Order Item Meta Key (Data name of the PPOM Field submitted by customer);
     * That means this field repeats against across a field that has multiple input (such as Variation Quantity, Quantitity Pack field types.) 
     */
    const DATA_NAME_MULTIPLE_ORIGIN_IDENTIFIER = '_oi_';

    use StringUtility;
    use Compatibility;

    /**
     * Init the class methods.
     *
     * @return void
     */
    public function init() {
        $this->rename_cloned_field_title();
        $this->match_cloned_field_with_the_real_field();
    }

    /**
     * Update cloned field data name with the base data name.
     * That is needed to finding base PPOM field by the cloned field data name.
     *
     * @return void
     */
    private function match_cloned_field_with_the_real_field() {
        add_filter( 'ppom_get_field_by_dataname_dataname', array( $this, 'change_dataname_for_cloned_fields' ), 22, 2 );
    }

    /**
     * Handler of the ppom_get_field_by_dataname_dataname WP Filter.
     * Remove __clone_ suffix from the data name of the HTML Element.
     *
     * @param  string $data_name Data Name of the submitted HTML Element.
     * @param  \PPOM_Meta $ppom PPOM Meta Group.
     * @return string cloned dataname transformed to original data name with removing the cloning indicator suffix.
     */
    public function change_dataname_for_cloned_fields( $data_name, $ppom ) {
		// TODO: add a condition to check if there are any CFR.

		return FieldClone::get_original_dataname($data_name);
	}

     /**
     *  Shows human readable field titles in order, checkout, cart pages etc.
     *
     *  If a magic tag from the Conditional Field Repeater feature is used in the field title,
     * field titles are shown as data name (slug) normally. Thanks to this method resolve the magic tags
     * field titles and shows human readable field titles.
     *
     * @return void
     */
    private function rename_cloned_field_title() {
        if( ! $this->has_ppom_feat_compatibility('pgfbdfm_wp_filter_param_fix') ) {
            // Backward compatibility for WP filter that released by PPOM Free v32.0.0 and has wrong function param order (first param is wrong)
            add_filter('ppom_get_field_by_dataname__field_meta', array($this, 'legacy_handler_rename_cloned_field_title'), 10, 4);
            return;
        }

        add_filter('ppom_get_field_by_dataname__field_meta', array($this, 'handler_rename_cloned_field_title'), 10, 4);
    }

    /**
     * Handler of the WP filter (ppom_get_field_by_dataname__field_meta)
     * That renames cloned field titles in the $field_meta param (that is used for showing real repeat numbers in field titles instead of the magic tag, especially is used by admin order details and the cart page.)
     *
     * @param array $ppom_fields Meta array of the all PPOM Fields in the PPOM Field Group.
     * @param  array|string  $field_meta Contrains meta details of a PPOM Field or an empty string (if the field is not found in the DB).
     * @param  string $original_data_name Data name that contains clone indicator and repeat numbers (e.g: "_repeatnumber___player_tshirt_no__clone_1")
     * @param  string $base_data_name Data name without clone suffix (represents the base field in the PPOM Group).
     *
     * @return array|string If the field is exists, it returns an array again with renaming the field title. (e.g: "1. Player Tshirt No A:")
     */
    public function legacy_handler_rename_cloned_field_title($ppom_fields, $field_meta, $original_data_name, $base_data_name) {
        if( ! is_array($field_meta) ) {
            return $field_meta;
        }

        /**
         *  Represents unique identifier (If origin is number; that can contains "repeat number" but
         * if the origin is variation quantity or quantity matrix; that probably contains Option ID and Repeat Number together.)
         *
         * Some examples with the cases:
         * * If the repeated field repeats against a number field: the variable has only repeat number, such as: 1 or 2 etc.
         * * If the repeated field repeats against a variation quantity or quantity pack field: the variable has option id and repeat number, such as: _s_oi_1 or _m_oi_1 or _m_oi_2 etc.
         * * If the conditional field repeater is off for the field (that has $base_data_name data name), returns false.
         */
        $clone_unique_identifier = FieldClone::get_clone_repeat_id($original_data_name);

        if( $clone_unique_identifier === false ) {
            return $field_meta;
        }

        // Rename the title of the virtual field meta of the cloned field.
        $field_meta['title'] = self::solve_magic_tags($field_meta['title'], $this->get_resolved_magic_tags($clone_unique_identifier, $ppom_fields, $field_meta));

        return $field_meta;
    }

    /**
     * Handler of the WP filter (ppom_get_field_by_dataname__field_meta)
     * That renames cloned field titles in the $field_meta param (that is used for showing real repeat numbers in field titles instead of the magic tag, especially is used by admin order details and the cart page.)
     *
     * @param  array|string  $field_meta Contrains meta details of a PPOM Field or an empty string (if the field is not found in the DB).
     * @param array $ppom_fields Meta array of the all PPOM Fields in the PPOM Field Group.
     * @param  string $original_data_name Data name that contains clone indicator and repeat numbers (e.g: "_repeatnumber___player_tshirt_no__clone_1")
     * @param  string $base_data_name Data name without clone suffix (represents the base field in the PPOM Group).
     *
     * @return array|string If the field is exists, it returns an array again with renaming the field title. (e.g: "1. Player Tshirt No A:")
     */
    public function handler_rename_cloned_field_title($field_meta, $ppom_fields, $original_data_name, $base_data_name) {
        if( ! is_array($field_meta) ) {
            return $field_meta;
        }

        /**
         *  Represents unique identifier (If origin is number; that can contains "repeat number" but
         * if the origin is variation quantity or quantity matrix; that probably contains Option ID and Repeat Number together.)
         *
         * Some examples with the cases:
         * * If the repeated field repeats against a number field: the variable has only repeat number, such as: 1 or 2 etc.
         * * If the repeated field repeats against a variation quantity or quantity pack field: the variable has option id and repeat number, such as: _s_oi_1 or _m_oi_1 or _m_oi_2 etc.
         * * If the conditional field repeater is off for the field (that has $base_data_name data name), returns false.
         */
        $clone_unique_identifier = FieldClone::get_clone_repeat_id($original_data_name);

        if( $clone_unique_identifier === false ) {
            return $field_meta;
        }

        // Rename the title of the virtual field meta of the cloned field.
        $field_meta['title'] = self::solve_magic_tags($field_meta['title'], $this->get_resolved_magic_tags($clone_unique_identifier, $ppom_fields, $field_meta));

        return $field_meta;
    }

    /**
     * Get resolved magic tags.
     *
     * @param  string $identifier Unique identifier suffix of the repeated field data name.
     * @param  array $ppom_fields That's a multi dimensional array that contains PPOM field meta values as an array. First dimension contains fields.
     * @param  array $field_meta Meta items of the PPOM Field.
     * @return array|false If magic tag resolving is fail, returns false.
     */
    private function get_resolved_magic_tags($identifier, $ppom_fields, $field_meta) {
        // Check if the Conditional Field Repeater is still activated for this field.
        if( ! isset($field_meta[ConditionalFieldRepeater::SETTING_KEY_ENABLE]) || $field_meta[ConditionalFieldRepeater::SETTING_KEY_ENABLE] !== 'on' ) {
            return false;
        }

        $origin_has_multiple_number_input = $this->str_contains($identifier, self::DATA_NAME_MULTIPLE_ORIGIN_IDENTIFIER);

        /**
         * If the field repeats across a field that contains multiple number input such as Variation Quantity, Quantity Pack etc.
         */
        if( $origin_has_multiple_number_input ) {
            $clone_uniq_id_parts = explode( self::DATA_NAME_MULTIPLE_ORIGIN_IDENTIFIER, $identifier );

            $origin_field_data_name = $field_meta[ConditionalFieldRepeater::SETTING_KEY_FORM]['origin'];

            // Attach resolved magic tags to the payload.
            return [
                'optionTitle' => $this->find_option_title( $ppom_fields, $origin_field_data_name, $clone_uniq_id_parts[0] ),
                'repeatNumber' => $clone_uniq_id_parts[1]
            ];
        }

        /**
         * Basic repeats (E.g: Repeats across a number field.)
         * $identifier consists only repeat number.
         */
        return [
            'repeatNumber' => $identifier
        ];
    }

    /**
     * Finds the Option Title by the option id in the Field that matched by $origin_data_name
     *
     * @param  array $ppom_fields That's a multi dimensional array that contains PPOM field meta values as an array. First dimension contains fields.
     * @param  string $origin_data_name The data name of the field that is the owner of the search option.
     * @param  string $option_id The string ID of the searched option. E.g: "_blue"
     * @return string|false If the searched option could found, returns the human readable title, e.g: "Blue". Otherwise, returns false.
     */
    private function find_option_title($ppom_fields, $origin_data_name, $option_id) {
        $origin_field_meta = current(array_filter($ppom_fields, function($field) use ($origin_data_name){
            return $field['data_name'] === $origin_data_name;
        }));

        if( ! is_array( $origin_field_meta ) || ! array_key_exists( 'options', $origin_field_meta ) ) {
            return false;
        }

        $origin_options = $origin_field_meta['options'];

        $founded_option = current( array_filter( $origin_options, function($option) use ($option_id) {
            return $option['id'] === $option_id;
        } ) );

        if( ! is_array( $founded_option ) || ! array_key_exists( 'option', $founded_option ) ) {
            return false;
        }

        return $founded_option['option'];
    }
}