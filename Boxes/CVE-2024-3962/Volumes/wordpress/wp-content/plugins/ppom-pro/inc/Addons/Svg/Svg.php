<?php
/***
 * Plugin Name: PPOM Addon SVG
 * Description: An addon to PPOM
 * Version: 1.1
 * Text Domain: ppom-addon-svg
 * License: GPL2
 */

namespace PPOM_Pro\Addons\Svg;

use PPOM_Pro\Abstract_Addon;

class Svg extends Abstract_Addon {
	function run_hooks() {
		// Load PPOM Directory
		// $this->ppom_svg_dir_path = ppom_get_dir_path( 'thumbs' );
		// $this->ppom_svg_dir_url  = $this->ppom_get_dir_url( 'thumbs' );

		// Load SVG Addon File Path
		add_filter( 'nm_input_class-svg', array( $this, 'addon_path_svg' ), 10, 2 );

		// Loading All Input In PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );

		// Load Addon Scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'hook_input_scripts' ), 10, 2 );

		// Rendering SVG HTML
		add_action( 'ppom_rendering_inputs', array( $this, 'render_svg' ), 10, 5 );

		// Admin Addon Settings
		add_filter( 'render_input_types', array( $this, 'admin_settings' ), 10, 6 );

		// Load Scripts In PPOM Admin side
		add_action( 'admin_enqueue_scripts', array( $this, 'load_script' ) );

		// Enable SVG File In WP Media Lib
		add_filter( 'upload_mimes', array( $this, 'wp_media_mime_types' ) );

		// PPOM Admin Tabs
		add_filter( 'ppom_fields_tabs_show', array( $this, 'ppom_tabs_render' ), 10, 2 );
		add_filter( 'ppom_tabs_panel_classes', array( $this, 'ppom_tabs_classes' ), 10, 1 );

		add_filter( 'ppom_add_cart_item_data', array( $this, 'save_svg' ), 10, 2 );

		add_filter( 'ppom_meta_data', array( $this, 'svg_cart_meta' ), 15, 2 );

		add_filter( 'ppom_fields_html', array( $this, 'wrap_into_popup' ), 15, 2 );

		add_action( 'wp_ajax_ppom_svg_load_inputs_ajax_base', array( $this, 'ajax_base_inputs' ) );
		add_action( 'wp_ajax_nopriv_ppom_svg_load_inputs_ajax_base', array( $this, 'ajax_base_inputs' ) );
	}


	/**
	 * Load SVG Addon Path
	 */
	function addon_path_svg( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.svg.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}


	/**
	 * Loading All PRO Inputs
	 */
	function load_addon( $inputs_array, $inputObj ) {

		// checking ce addon is enable
		$inputs_array['svg'] = $inputObj->get_input( 'svg' );

		return $inputs_array;
	}


	/**
	 * Load Addon Scripts
	 */
	function hook_input_scripts( $field, $data_name ) {

		if ( $field['type'] != 'svg' ) {
			return '';
		}

		$localize_vars = array();

		if ( $field['type'] == 'svg' ) {

			$template_name     = isset( $field['svg_uploader']['filename'] ) ? $field['svg_uploader']['filename'] : '';
			$svg_attachment_id = isset( $field['svg_uploader']['id'] ) ? $field['svg_uploader']['id'] : '';
			$svg_url           = isset( $field['svg_uploader']['url'] ) ? $field['svg_uploader']['url'] : '';
			$ipopup            = isset( $field['svg_view'] ) ? $field['svg_view'] : '';

			// if( $ipopup != 'ajax_fields' ) return $ppom_html;

			wp_enqueue_script( 'ppom-pablo-js', $this->addon_url . '/js/pablo.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

			/* Load Remodal Lib Scripts */
			wp_enqueue_style( 'ppom-remodal-lib', $this->addon_url . '/css/ppom-remodal.css' );
			wp_enqueue_script( 'ppom-remodal-lib', $this->addon_url . '/js/ppom-remodal.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

			/* Load SVG Addon Scripts */
			wp_enqueue_style( 'ppom-svg', $this->addon_url . '/css/ppom-svg.css' );
			wp_enqueue_script( 'ppom-svg', $this->addon_url . '/js/ppom-svg.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

			$localize_vars = array(
				'template'          => $template_name,
				'ajax_url'          => admin_url( 'admin-ajax.php' ),
				'svg_attachment_id' => $svg_attachment_id,
				'svg_url'           => $svg_url,
				'svg_endpoint'      => get_rest_url( null, 'ppom/v1/save-svg-template' ),
				'svg_view'          => $ipopup,
			);

			wp_localize_script( 'ppom-svg', 'ppom_svg_vars', $localize_vars );
		}
	}


	/**
	 * Frontent meta rendering
	 */
	function render_svg( $meta, $data_name, $classes, $field_label, $options ) {

		if ( $meta['type'] != 'svg' ) {
			return '';
		}

		global $product;

		$product_id = ppom_get_product_id( $product );

		$preview_btn_title     = ( isset( $meta['preview_btn_title'] ) && $meta['preview_btn_title'] != '' ? $meta['preview_btn_title'] : 'preview your personalization' );
		$preview_btn_textcolor = ( isset( $meta['preview_btn_textcolor'] ) && $meta['preview_btn_textcolor'] != '' ? $meta['preview_btn_textcolor'] : '#fff' );
		$preview_btn_bgcolor   = ( isset( $meta['preview_btn_bgcolor'] ) && $meta['preview_btn_bgcolor'] != '' ? $meta['preview_btn_bgcolor'] : '#3b86b0' );
		$preview_icon_color    = ( isset( $meta['preview_icon_color'] ) && $meta['preview_icon_color'] != '' ? $meta['preview_icon_color'] : '#ffffff' );
		$preview_icon_bgcolor  = ( isset( $meta['preview_icon_bgcolor'] ) && $meta['preview_icon_bgcolor'] != '' ? $meta['preview_icon_bgcolor'] : '#616abf' );
		$svg_download          = isset( $meta['svg_download'] ) ? $meta['svg_download'] : '';
		$svg_view              = isset( $meta['svg_view'] ) ? $meta['svg_view'] : '';

		$html  = '';
		$html .= '<div class="ppom-svg-wrapper">';

		$html .= '<input type="hidden" class="ppom-svg-template-save" name="ppom[fields][' . esc_attr( $data_name ) . '][svg]" id="' . esc_attr( $data_name ) . '">';
		$html .= '<input type="hidden" class="ppom-svg-filename" name="ppom[fields][' . esc_attr( $data_name ) . '][filename]" id="' . esc_attr( $data_name ) . '">';

		$html .= '<div class="ppom-svg-btn-action">';
		$html .= '<button class="ppom-svg-preview-js ppom-svg-btn-style" style="color:' . esc_attr( $preview_btn_textcolor ) . ';background-color:' . esc_attr( $preview_btn_bgcolor ) . ';">' . esc_html( sprintf( __( '%s', 'woocommerce-product-addon' ), $preview_btn_title ) ) . '</button>';
		if ( $svg_download == 'on' ) {
			$html .= '<button class="ppom-svg-download ppom-svg-btn-style" style="color:' . esc_attr( $preview_icon_color ) . ';background-color:' . esc_attr( $preview_icon_bgcolor ) . ';display:none;"><i class="fa fa-download" aria-hidden="true"></i></button>';
		}
		$html .= '</div>';


		// SVG Preview In Popup
		if ( $svg_view == 'preview_in_popup' ) {

			$html .= '<div class="remodal" data-remodal-id="ppom_svg_preview">';
			$html .= '<h1>' . __( 'Preview', 'woocommerce-product-addon' ) . '</h1>';
			$html .= '<div class="ppom-svg-preview-popup">';
			$html .= '<div class="ppom-svg-init"></div>';
			$html .= '</div>';
			$html .= '<br>';
			$html .= '</div>';
		} else {

			// Inline SVG Preview
			$html .= '<div class="ppom-svg-init"></div>';
		}

		$html .= '</div>';

		echo apply_filters( 'ppom_svg_html', $html );
	}


	/**
	 * Add Extra SVG Addon Settings
	 */
	function admin_settings( $html_input, $type, $name, $values, $options, $field_index ) {

		if ( $type == 'svg-paired' ) {

			$html_input .= '<div class="ppom-svg-settings-wrapper">';
			$html_input .= '<button class="btn btn-info ppom-svg-uploader-js" data-metatype="svg" style="float: left;margin-right: 8px;">' . __( 'Select/Upload SVG', 'woocommerce-product-addon' ) . '</button>';

			if ( $values ) {

				$svg_filename = isset( $values['filename'] ) ? $values['filename'] : '';
				$svg_url      = isset( $values['url'] ) ? $values['url'] : '';
				$svg_id       = isset( $values['id'] ) ? $values['id'] : '';

				$html_input .= '<div class="ppom-svg-uploader-html" style="padding-top: 5px;">';
				$html_input .= '<span>' . $svg_filename . '</span>';
				$html_input .= '<input type="hidden" name="ppom[' . esc_attr( $field_index ) . '][svg_uploader][url]" data-metatype="url" value="' . esc_url( $svg_url ) . '">';
				$html_input .= '<input type="hidden" name="ppom[' . esc_attr( $field_index ) . '][svg_uploader][id]" data-metatype="id" value="' . esc_attr( $svg_id ) . '">';
				$html_input .= '<input type="hidden" name="ppom[' . esc_attr( $field_index ) . '][svg_uploader][filename]" data-metatype="filename" value="' . esc_attr( $svg_filename ) . '">';
				$html_input .= '</div>';
			} else {

				$html_input .= '<div class="ppom-svg-uploader-html" style="padding-top: 5px;"></div>';
			}

			$html_input .= '<div style="clear: both;"></div>';
			$html_input .= '</div>';
		}

		return $html_input;
	}


	/**
	 * Admin Site File Enqueue
	 */
	function load_script( $hook ) {

		if ( ! isset( $_GET['page'] ) || $_GET['page'] != 'ppom' ) {
			return;
		}

		wp_enqueue_script( 'ppom-admin-svg-js', $this->addon_url . '/js/ppom-svg-uploader.js', array( 'jquery' ), PPOM_PRO_VERSION, true );
	}


	/**
	 * SVG File Extension Enabled
	 */
	function wp_media_mime_types( $mimes ) {
		$mimes['svg'] = 'image/svg+xml';

		return $mimes;
	}


	/**
	 * Generate SVG Image HTML
	 */
	function create_svg_image_html( $svg_filename, $field_meta ) {

		$svg_url = ppom_get_dir_url() . 'svg_output/' . $svg_filename;

		$image_html = '<a href="' . esc_url( $svg_url ) . '"><img class="img-thumbnail" style="width:' . esc_attr( ppom_get_thumbs_size() ) . '" src="' . esc_url( $svg_url ) . '" ></a>';

		return $image_html;
	}


	/**
	 * Get PPOM Dir URL
	 */
	function ppom_get_dir_url( $thumb = '' ) {

		$upload_dir = wp_upload_dir();
		$return_url = '';
		if ( $thumb != '' ) {
			$return_url = $upload_dir ['baseurl'] . '/ppom_files/' . $thumb . '/';
		}

		return $return_url;
	}

	/**
	 * PPOM Admin Tabs
	 */
	function ppom_tabs_render( $tabs, $fields_type ) {

		if ( $fields_type == 'svg' ) {
			$tabs['condition_tab']['not_allowed'] = array( 'svg' );
		}

		$tabs['svg_uploader_tab'] = array(
			'label'        => __( 'Upload SVG', 'woocommerce-product-addon' ),
			'class'        => array( 'ppom-tabs-label' ),
			'field_depend' => array( 'svg' ),
		);

		return $tabs;
	}


	/**
	 * Handle Admin Tabs Classes
	 */
	function ppom_tabs_classes( $settings ) {

		foreach ( $settings as $fields_meta_key => $meta ) {

			$type = isset( $meta['type'] ) ? $meta['type'] : '';

			if ( $type == 'svg-paired' ) {
				$settings['svg_uploader']['tabs_class'] = array( 'ppom_handle_svg_uploader_tab', 'col-md-12' );
			}
		}

		return $settings;
	}


	/**
	 * Save SVG Output
	 */
	function save_svg( $ppom_fields, $posted_data ) {

		$product_id = $posted_data['add-to-cart'];

		$svg_input = ppom_has_field_by_type( $product_id, 'svg' );
		if ( empty( $svg_input ) ) {
			return $ppom_fields;
		}

		foreach ( $svg_input as $meta ) {

			if ( isset( $ppom_fields['fields'][ $meta['data_name'] ] ) ) {
				$dataname  = isset( $meta['data_name'] ) ? $meta['data_name'] : '';
				$svg_found = $ppom_fields['fields'][ $dataname ]['svg'];
				$filename  = $ppom_fields['fields'][ $dataname ]['filename'];
				if ( ! empty( $svg_found ) ) {
					$this->base64_to_svg( $svg_found, $filename );
				}
			}
		}

		return $ppom_fields;
	}


	/**
	 * Convert Base64 DataURL to SVG
	 */
	function base64_to_svg( $data, $file_name ) {

		$data = base64_decode( preg_replace( '/data:image\/svg\+xml;base64,/', '', $data ) );

		$_path = ppom_get_dir_path( 'svg_output' ) . $file_name;
		file_put_contents( $_path, $data );
	}


	/**
	 * SVG On Cart Page
	 */
	function svg_cart_meta( $ppom_data, $cart_item ) {

		$product_id = $cart_item['data']->post_type == 'product' ? $cart_item['data']->get_id() : $cart_item['data']->get_parent_id();

		foreach ( $cart_item['ppom']['fields'] as $key => $value ) {

			$field_meta = ppom_get_field_meta_by_dataname( $product_id, $key );

			$field_type  = isset( $field_meta['type'] ) ? $field_meta['type'] : '';
			$field_title = isset( $field_meta['title'] ) ? $field_meta['title'] : '';

			if ( $field_type != 'svg' ) {
				continue;
			}

			$svg_content  = isset( $value['svg'] ) ? $value['svg'] : '';
			$svg_filename = isset( $value['filename'] ) ? $value['filename'] : '';

			$meta_value = $this->create_svg_image_html( $svg_filename, $field_meta );

			$ppom_data[ $key ] = array(
				'name'  => 'SVG Design',
				'value' => $meta_value,
			);

		}

		return $ppom_data;
	}


	function wrap_into_popup( $ppom_html, $product ) {

		$product_id = ppom_get_product_id( $product );

		$svg_meta = ppom_has_field_by_type( $product_id, 'svg' );

		$ipopup = isset( $svg_meta[0]['svg_view'] ) ? $svg_meta[0]['svg_view'] : '';

		if ( $ipopup != 'ajax_fields' ) {
			return $ppom_html;
		}

		$popup_btn_label = __( 'Customize Product', 'woocommerce-product-addon' );

		$template_vars = array(
			'ppom_body'    => $ppom_html,
			'product'      => $product,
			'modal_title'  => $product->get_title(),
			'button_label' => $popup_btn_label,
		);

		$ppom_html = '';
		ob_start();
		$this->load_template( 'popup.php', $template_vars );
		$ppom_html .= ob_get_clean();

		return $ppom_html;
	}


	function ajax_base_inputs() {

		$product_id = isset( $_POST['product_id'] ) ? $_POST['product_id'] : 0;

		$product    = wc_get_product( $product_id );
		$product_id = ppom_get_product_id( $product );
		$ppom       = \PPOM_Meta::get_instance( $product_id );

		if ( ! $ppom->fields ) {
			return '';
		}

		if ( ! $ppom->has_unique_datanames() ) {

			printf( __( "<div class='error'>Some of your fields has duplicated datanames, please fix it</div>", 'woocommerce-product-addon' ), 'ppom' );

			return;
		}

		// Loading all required scripts/css for inputs like datepicker, fileupload etc
		PPOM_FRONTEND_SCRIPTS::load_scripts_by_product_id( $product_id, '', 'svg_addon' );

		// ppom_woocommerce_template_base_inputs_rendering($product_id);

		$ppom_box_id = is_array( $ppom->meta_id ) ? implode( '-', $ppom->meta_id ) : $ppom->meta_id;
		$ppom_html   = '<div id="ppom-box-' . esc_attr( $ppom_box_id ) . '" class="ppom-wrapper">';

		if ( ppom_get_price_table_location() === 'before' ) {
			$ppom_html .= '<div id="ppom-price-container"></div>';
		}

		$template_vars = array(
			'ppom_settings'    => $ppom->ppom_settings,
			'product'          => $product,
			'ppom_fields_meta' => $ppom->fields,
			'ppom_id'          => $ppom->meta_id,
		);
		ob_start();
		ppom_load_template( 'render-fields.php', $template_vars );
		$ppom_html .= ob_get_clean();

		if ( ppom_get_price_table_location() === 'after' ) {
			$ppom_html .= '<div id="ppom-price-container"></div>';
		}

		// Clear fix
		$ppom_html .= '<div style="clear:both"></div>';   // Clear fix
		$ppom_html .= '</div>';   // Ends ppom-wrappper

		$resp = array();

		if ( $ppom_html ) {
			$resp = array(
				'status'    => 'success',
				'ppom_html' => $ppom_html,
			);
		}

		wp_send_json( $resp );
	}
}
