<?php
/**
 * Plugin Name: PPOM Addon - Fields PopUp
 * Description: This Addon show all PPOM fields in PopUp on Product Page
 * Version: 1.4
 * License: GPLv2 or later
 * License URI: http://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain: ppom-fields
 */

namespace PPOM_Pro\Addons\FieldsPopup;

use PPOM_Pro\Abstract_Addon;

class FieldsPopup extends Abstract_Addon {

	function run_hooks() {
		add_filter( 'ppom_fields_html', array( $this, 'wrap_into_popup' ), 15, 2 );

		// Product Settings
		add_action( 'ppom_meta_box_after_list', array( $this, 'addon_options' ) );
		add_action( 'ppom_proccess_meta', array( $this, 'save_option' ) );

		// PPOM Settings Filter
		add_filter( 'ppom_settings_data', array( $this, 'global_settings' ), 10, 1 );
	}

	/*
	 * Wrapping PPOM Fields Into Popup
	 */
	function wrap_into_popup( $ppom_html, $product ) {

		// Single product page popup settings
		$sp_popup_active    = get_post_meta( $product->get_id(), 'ppom_popup_enable', true );
		$sp_popup_btn_label = get_post_meta( $product->get_id(), 'ppom_popup_label', true );
		$sp_popup_disable   = get_post_meta( $product->get_id(), 'ppom_popup_disable', true );

		// Global settings
		$popup_enable    = ppom_get_option( 'ppom-fieldspopup-enable' );
		$popup_btn_label = ppom_get_option( 'ppom-fieldspopup-btn-label' );

		$is_popup_active = false;

		if ( ( isset( $popup_enable ) && $popup_enable == 'yes' ) && ( isset( $sp_popup_disable ) && $sp_popup_disable != 'on' ) ) {
			$is_popup_active = true;
		} elseif ( isset( $sp_popup_active ) && $sp_popup_active == 'on' ) {
			$is_popup_active = true;
		}

		if ( ( isset( $sp_popup_btn_label ) && $sp_popup_btn_label != '' ) ) {
			$popup_btn_label = $sp_popup_btn_label;
		}

		if ( ! $is_popup_active ) {
			return $ppom_html;
		}

		$popup_btn_label = $popup_btn_label == '' ? __( 'Customize Product', 'woocommerce-product-addon' ) : sprintf( __( '%s', 'woocommerce-product-addon' ), $popup_btn_label );

		// Load Scripts
		wp_enqueue_style( 'ppom-fieldspopup', $this->addon_url . '/css/ppom-fieldspopup.css' );
		wp_enqueue_script( 'ppom-fieldspopup', $this->addon_url . '/js/ppom-fieldspopup.js', array( 'jquery' ), PPOM_PRO_VERSION, true );


		$template_vars = array(
			'ppom_body'    => $ppom_html,
			'product'      => $product,
			'modal_title'  => $product->get_title(),
			'button_label' => $popup_btn_label,
		);

		ob_start();
		$this->load_template( 'ppom-modal.php', $template_vars );
		$ppom_html = ob_get_clean();

		return apply_filters( 'ppom_fieldspopup_html', $ppom_html, $product );
	}


	/* 
	 * Render Fields Popup Settings In Single Product
	 */
	function addon_options( $post ) {

		$sp_popup_active  = get_post_meta( $post->ID, 'ppom_popup_enable', true );
		$sp_popup_disable = get_post_meta( $post->ID, 'ppom_popup_disable', true );
		$pp_label         = get_post_meta( $post->ID, 'ppom_popup_label', true );

		$popup_enable = ppom_get_option( 'ppom-fieldspopup-enable' );

		$html  = '<hr>';
		$html .= '<strong>' . __( 'PPOM PopUp Settings', 'woocommerce-product-addon' ) . '</strong>';

		if ( $popup_enable != 'yes' ) {
			$html .= '<p><label><input type="checkbox" ' . checked( $sp_popup_active, 'on', false ) . ' name="ppom_popup_enable">' . __( 'Enable PopUp', 'woocommerce-product-addon' ) . '</label></p>';
		} else {
			$html .= '<p><label><input type="checkbox" ' . checked( $sp_popup_disable, 'on', false ) . ' name="ppom_popup_disable">' . __( 'Disable Popup', 'woocommerce-product-addon' ) . '</label></p>';
		}
		$html .= '<p><label>' . __( 'PopUp Button Label', 'woocommerce-product-addon' );
		$html .= '<input type="text" name="ppom_popup_label" value="' . esc_attr( $pp_label ) . '"></label></p>';

		echo $html;
	}


	/* 
	 * Single Product Page Settings save.
	 */
	function save_option( $post_id ) {

		if ( isset( $_POST['ppom_popup_enable'] ) ) {
			update_post_meta( $post_id, 'ppom_popup_enable', $_POST['ppom_popup_enable'] );
		} else {
			update_post_meta( $post_id, 'ppom_popup_enable', '' );
		}

		if ( isset( $_POST['ppom_popup_disable'] ) ) {
			update_post_meta( $post_id, 'ppom_popup_disable', $_POST['ppom_popup_disable'] );
		} else {
			update_post_meta( $post_id, 'ppom_popup_disable', '' );
		}

		if ( isset( $_POST['ppom_popup_label'] ) ) {
			update_post_meta( $post_id, 'ppom_popup_label', sanitize_text_field( $_POST['ppom_popup_label'] ) );
		} else {
			update_post_meta( $post_id, 'ppom_popup_label', '' );
		}
	}


	/*
	 *  PPOM Global Settings
	 */
	function global_settings( $ppom_settings ) {

		$ppom_settings[] = array(
			'title' => __( 'Fields PopUp', 'woocommerce-product-addon' ),
			'type'  => 'title',
			'desc'  => '',
			'id'    => 'ppom_fields_popup_id',
		);

		$ppom_settings[] = array(
			'title'   => __( 'Enable Fields Popup', 'woocommerce-product-addon' ),
			'type'    => 'checkbox',
			'label'   => __( 'Button', 'woocommerce-product-addon' ),
			'default' => '',
			'id'      => 'ppom-fieldspopup-enable',
			'desc'    => __( 'Enable PPOM fields popup to all the products.', 'woocommerce-product-addon' ),
		);

		$ppom_settings[] = array(
			'title'    => __( 'Button Label', 'woocommerce-product-addon' ),
			'type'     => 'text',
			'label'    => __( 'Enable', 'woocommerce-product-addon' ),
			'default'  => '',
			'id'       => 'ppom-fieldspopup-btn-label',
			'desc'     => __( 'Add PPOM fields popup button label.', 'woocommerce-product-addon' ),
			'desc_tip' => true,
		);

		$ppom_settings[] = array(
			'title'    => __( 'Button Text Color', 'woocommerce-product-addon' ),
			'type'     => 'color',
			'label'    => __( 'Button', 'woocommerce-product-addon' ),
			'default'  => '',
			'id'       => 'ppom-fieldspopup-btn-textcolor',
			'desc'     => __( ' Choose PPOM fields popup button text color.', 'woocommerce-product-addon' ),
			'desc_tip' => true,
		);

		$ppom_settings[] = array(
			'title'    => __( 'Button BG Color', 'woocommerce-product-addon' ),
			'type'     => 'color',
			'label'    => __( 'Button', 'woocommerce-product-addon' ),
			'default'  => '',
			'id'       => 'ppom-fieldspopup-btn-bgcolor',
			'desc'     => __( ' Choose PPOM fields popup button background color.', 'woocommerce-product-addon' ),
			'desc_tip' => true,
		);


		$ppom_settings[] = array(
			'type' => 'sectionend',
			'id'   => 'ppom_fields_popup_id',
		);

		return $ppom_settings;
	}


	function load_settings() {

		$settings = array(
			'ppom-fieldspopup-enable'        => array(
				'type'  => 'checkbox',
				'title' => __( 'Enable Fields Popup', 'woocommerce-product-addon' ),
				'desc'  => __( 'Enable PPOM fields popup to all the products.', 'woocommerce-product-addon' ),
			),
			'ppom-fieldspopup-btn-label'     => array(
				'type'  => 'text',
				'title' => __( 'Button Label', 'woocommerce-product-addon' ),
				'desc'  => __( 'Add PPOM fields popup button label.', 'woocommerce-product-addon' ),
			),
			'ppom-fieldspopup-btn-textcolor' => array(
				'type'  => 'color',
				'title' => __( 'Button Text Color', 'woocommerce-product-addon' ),
				'desc'  => __( ' Choose PPOM fields popup button text color.', 'woocommerce-product-addon' ),
			),
			'ppom-fieldspopup-btn-bgcolor'   => array(
				'type'  => 'color',
				'title' => __( 'Button BG Color', 'woocommerce-product-addon' ),
				'desc'  => __( ' Choose PPOM fields popup button background color.', 'woocommerce-product-addon' ),
			),
		);

		$panels = array(
			'ppom_addon_fieldspopup' => array(
				'id'          => 'ppom_addon_fieldspopup',
				'title'       => __( 'Fields Popup', 'woocommerce-product-addon' ),
				'desc'        => 'It will render the fields popup settings.',
				'icon'        => '',
				'active'      => 'yes',
				'is_sabpanel' => true,
			),
		);

		$tabs = array(
			'ppom_addons' =>
				array(
					'title'  => 'Addons',
					'tab_id' => 'ppom_addons',
					'enable' => true,
				),
		);

		PPOMSETTINGS()->register_panel( 'ppom_addons', $panels )->register_setting( 'ppom_addon_fieldspopup', $settings );
	}
}
