<?php
/*
 * Plugin Name: PPOM Pro for WooCommerce
 * Plugin URI: http://themeisle.com/plugins/ppom-pro/
 * Description: This plugin allows WooCommerce Store Admins to create unlimited input fields and files to attach to the Product Page.
 * Version: 25.1.0
 * Author: Themeisle
 * Text Domain: ppom
 * Domain Path: /languages
 * Author URI: http://www.themeisle.com/
 *
 * WC requires at least: 3.1.0
 * WC tested up to: 7.0
 *
 * WordPress Available:  no
 * Requires License:     yes
 *
 * @package PPOM_Pro
 */


namespace PPOM_Pro;

function bootstrap() {
	define_constants();
	load_backwards_compat();
	load_dependencies();
	load_sdk();

	if ( get_license_status( false ) !== 'valid' ) {
		return;
	}

	run();
}
update_option(
	'ppom_pro_license_data', (object) [
		'success' => true,
		'license' => 'valid',
		'is_expired' => 'no',
		'price_id' => 1,
		'expires' => '2030-01-01 04:20:00'
	]
);
update_option( 'ppom_pro_license_plan', 1 );
/**
 * Define constants. 
 *
 * @return void
 */
function define_constants() {
	define( 'PPOM_PLUGIN_PATH', 'ppom-pro/ppom.php' );
	define( 'PPOM_REDIRECT_URL', esc_url( admin_url( 'admin.php?page=ppom' ) ) );
	define( 'PPOM_PLUGIN_ID', 2235 );
	define( 'PPOM_PRO_PATH', untrailingslashit( plugin_dir_path( __FILE__ ) ) );
	define( 'PPOM_PRO_BASENAME', basename( PPOM_PRO_PATH ) );
	define( 'PPOM_PRO_URL', untrailingslashit( plugin_dir_url( __FILE__ ) ) );
	define( 'PPOM_PRO_VERSION', '25.1.0' );
	define( 'PPOM_ADDONS_PATH', PPOM_PRO_PATH . '/packages' );
	define( 'PPOM_ADDONS_URL', PPOM_PRO_URL . '/packages' );
	define( 'PPOM_PRO_COMPATIBILITY_FEATURES', [
		'cond_field_repeat' => true, // Conditional Field Repeater feature
		'pgfbdfm_wp_filter_param_fix' => true // Fix for the wrong params of the ppom_get_field_by_dataname__field_meta WP filter.
	] );
}

/**
 * Load backwards compat.
 *
 * This class is checked in the old free version, so we should load it.
 *
 * @return void
 */
function load_backwards_compat() {
	require_once PPOM_PRO_PATH . '/PPOM_PRO.php';
}


/**
 * Load SDK.
 *
 * @return void
 */
function load_sdk() {
	add_filter(
		'themeisle_sdk_products',
		function ( $products ) {
			$products[] = __FILE__;

			return $products;
		}
	);

	add_filter(
		'themesle_sdk_namespace_' . md5( __FILE__ ),
		function () {
			return 'ppom';
		}
	);
	add_filter(
		'themeisle_sdk_compatibilities/' . PPOM_PRO_BASENAME,
		function ( $compatibilities ) {
			$compatibilities['ppompro'] = [
				'basefile'  => defined( 'PPOM_PATH' ) ? PPOM_PATH . '/woocommerce-product-addon.php' : '',
				'required'  => '30.0',
				'tested_up' => '32.0',
			];
			return $compatibilities;
		} 
	);
}

/**
 * Load composer dependencies.
 *
 * @return void
 */
function load_dependencies() {
	$vendor_file = PPOM_PRO_PATH . '/vendor/autoload.php';
	if ( is_readable( $vendor_file ) ) {
		require_once $vendor_file;
	}
}

/**
 * Return the license status.
 *
 * @param bool $check_expiration Should check if license is valid, but expired.
 *
 * @return string The License status.
 */
function get_license_status( $check_expiration = false ) {

	$option_name = basename( dirname( __FILE__ ) );
	$product_key = str_replace( '-', '_', strtolower( trim( $option_name ) ) );

	add_filter(
		$product_key . '_lc_no_valid_string',
		function() {
			return 'In order to unlock all fields and benefit from updates and support for %s, please add your license code from your  <a href="%s" target="_blank">purchase history</a> and validate it <a href="%s">here</a>. ';
		} 
	);

	$license_data = get_option( $product_key . '_license_data', '' );

	if ( '' === $license_data ) {
		return get_option( $product_key . '_license_status', 'not_active' );
	}
	$status = isset( $license_data->license ) ? $license_data->license : get_option( $product_key . '_license_status', 'not_active' );
	if ( false === $check_expiration ) {
		return $status;
	}

	return ( 'valid' === $status && isset( $license_data->is_expired ) && 'yes' === $license_data->is_expired ) ? 'active_expired' : $status;
}

/**
 * Run core.
 *
 * @return void
 */
function run() {
	add_action(
		'plugins_loaded',
		function () {
			Core::get_instance();
		} 
	);
}

bootstrap();