<?php
/**
 * Plugin Name: PPOM Addon Phone Number
 * Description: PPOM Addon to render an international phone number with flags.
 * Version: 1.0
 * Text Domain: ppom-phone
 * License: GPL2
 */

namespace PPOM_Pro\Addons\Phone;

use PPOM_Pro\Abstract_Addon;

/**
 * Class Phone
 */
class Phone extends Abstract_Addon {
	function run_hooks() {
		// File path
		add_filter( 'nm_input_class-phone', array( $this, 'addon_path' ), 19, 2 );
		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );
		// Load Custom Scripts
		add_action( 'ppom_hooks_inputs', array( $this, 'load_scripts' ), 10, 2 );
		// rendering inputs
		add_action( 'ppom_rendering_inputs_phone', array( $this, 'render_input' ), 10, 5 );


		// PPOM REST API - adding field meta returned by REST
		add_filter( 'ppom_rest_field_phone', [ $this, 'rest_data' ], 22, 3 );

		// PPOM Admin Tabs
		add_filter( 'ppom_fields_tabs_show', array( $this, 'ppom_tabs_render' ), 10, 2 );
		add_filter( 'ppom_tabs_panel_classes', array( $this, 'ppom_tabs_classes' ), 99, 1 );
	}


	// file path function
	function addon_path( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.phone.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		// ppom_pa($path);
		return $path;
	}

	/*
	**============= Loading all PRO inputs ================
	*/
	function load_addon( $inputs_array, $inputObj ) {

		$inputs_array['phone'] = $inputObj->get_input( 'phone' );

		return $inputs_array;
	}

	function render_input( $meta, $default_value ) {

		if ( $meta['type'] != 'phone' ) {
			return '';
		}

		$enable_material = isset( $meta['enable_material'] ) ? $meta['enable_material'] : '';

		$html = '';

		if ( ! isset( $meta['ppom_id'] ) ) {
			return 'No PPOM ID Found';
		}

		$rest_url = get_rest_url( null, "ppom/v1/get/id/{$meta['ppom_id']}" );
		echo '<script>window.ppom_phone_rest_url=\'' . esc_url( $rest_url ) . '\';</script>';

		if ( 'on' === $enable_material ) {
			wp_enqueue_style( 'phone-style', $this->addon_url . '/js/material/css/main.8bf6fcb2.css' );
			wp_enqueue_script( 'phone-js', $this->addon_url . '/js/material/js/main.b139df26.js', PPOM_PRO_VERSION, true );
		} else {
			wp_enqueue_style( 'phone-style', $this->addon_url . '/js/simple/css/main.18efd903.css' );
			wp_enqueue_script( 'phone-js', $this->addon_url . '/js/simple/js/main.8798e5d4.js', PPOM_PRO_VERSION, true );
		}


		$template_path = $this->addon_path . '/templates/phone.php';
		$template_vars = array(
			'field_meta' => $meta,
			'addon_type' => 'phone',
		);
		ob_start();

		ppom_load_input_templates( $template_path, $template_vars );

		$html .= ob_get_clean();

		echo apply_filters( 'ppom_phone_html', $html );
	}

	// Load Custom Scripts function
	function load_scripts( $field, $data_name ) {

		if ( $field['type'] != 'phone' ) {
			return '';
		}

		if ( $field['type'] == 'phone' ) {

			wp_enqueue_style( 'phone-css', $this->addon_url . '/css/phone.css' );

		}
	}

	/* **========== Handle Admin Tabs Classes =========== */

	function ppom_tabs_render( $tabs, $fields_type ) {

		if ( $fields_type == 'phone' ) {
			$tabs['add_phone_tab'] = array(
				'label'        => __( 'Phone Settings', 'woocommerce-product-addon' ),
				'class'        => array( 'ppom-tabs-label' ),
				'field_depend' => array( 'phone' ),
			);
		}

		return $tabs;
	}

	function ppom_tabs_classes( $settings ) {

		$phone_settings = [
			'default_country',
			'placeholder',
			'enable_search',
			'preferred',
			'exclude',
			'enable_material',
		];

		foreach ( $settings as $fields_meta_key => $meta ) {

			$type = isset( $meta['type'] ) ? $meta['type'] : '';
			if ( $type !== 'emojis' ) {
				return $settings;
			}

			if ( in_array( $fields_meta_key, $phone_settings ) ) {
				$settings[ $fields_meta_key ]['tabs_class'] = array( 'ppom_handle_add_phone_tab', 'col-md-6' );
			}
		}


		// $settings['placeholder']['tabs_class'] = ['ppom_handle_fields_tab','col-sm-3','col-sm-6'];

		return $settings;
	}

	function rest_data( $filtered, $meta, $ppom_fields ) {

		$fm             = new PPOM_InputManager( $meta, 'phone' );
		$phone_settings = [
			'default_country',
			'placeholder',
			'enable_search',
			'preferred',
			'exclude',
			'enable_material',
		];
		foreach ( $phone_settings as $s ) {
			$filtered[ $s ] = $fm->get_meta_value( $s );
		}
		$filtered['input_class'] = $fm->input_classes();

		return $filtered;

	}
}
