jQuery(function($) {

  UPLOADCARE_LOCALE = ppom_uploadcare_vars.uploadcare_locale;
  UPLOADCARE_CROP = ppom_uploadcare_vars.crop_ratio;
  uploadcare.registerTab('preview', uploadcareTabEffects);

  function maxDimensions(width, height) {
    return function(fileInfo) {
      var imageInfo = fileInfo.originalImageInfo

      if (imageInfo === null) {
        return
      }
      var heightExceeded = height && imageInfo.height > height

      if (width && imageInfo.width > width) {
        if (heightExceeded) {
          throw new Error('maxDimensions')
        }
        else {
          throw new Error('maxWidth')
        }
      }
      if (heightExceeded) {
        throw new Error('maxHeight')
      }
    }
  }

  $(function() {
    $('[role=uploadcare-uploader]').each(function() {

      var input = $(this)

      var widget = uploadcare.Widget(input)

      widget.onUploadComplete(function(info) {

        var cdnlink = info.cdnUrl;
        var count = info.count;
        var html = '';

        if (count != undefined && count > 0) {

          for (var i = 0; i < count; i++) {
            var generated_link = cdnlink + '/nth/' + i + '/';

            html += '<div class="ppom-uploadcare-img">';
            html += '<a target="_blank" href="' + generated_link + '">';
            html += '<img src="' + generated_link + '"></a>';
            html += '</div>';
          }
        }
        else {
          html += '<div class="ppom-uploadcare-img">';
          html += '<a target="_blank" href="' + cdnlink + '">';
          html += '<img src="' + cdnlink + '"></a>';
          html += '</div>';
        }
        
        $('.ppom-uploadcare-resp-thumb').html(html);

        $(document).on('click', '.uploadcare--widget__button_type_remove', function() {
          $('.ppom-uploadcare-resp-thumb').html('');
        });
        var myJSON = JSON.stringify(info);
        // console.log(myJSON);
        $('.ppom_uploadcare_resp').val(myJSON);
        // console.log("File info!", info);
        jQuery.event.trigger({
            type: 'ppom_uploadcare_apply',
            info: info,
            options: myJSON,
            dataname: input.closest('.ppom-field-wrapper').attr('data-data_name'),
            time: new Date()
        });
      });

      if (input.data('maxWidth') && input.data('maxHeight')) {
        widget.validators.push(maxDimensions(input.data('maxWidth'), input.data('maxHeight')))
      }
    })
  })

  UPLOADCARE_LOCALE_TRANSLATIONS = {
    // messages for widget
    errors: {
      maxDimensions: 'This image exceeds max dimensions.',
      maxWidth: 'This image exceeds max width.',
      maxHeight: 'This image exceeds max height.',
    },
    // messages for dialogâ€™s error page
    dialog: {
      tabs: {
        preview: {
          error: {
            maxDimensions: {
              title: 'Title.',
              text: 'Text.',
              back: 'Back',
            },
            maxWidth: {
              title: 'Title.',
              text: 'Text.',
              back: 'Back',
            },
            maxHeight: {
              title: 'Title.',
              text: 'Text.',
              back: 'Back',
            },
          },
        },
      },
    },
  }
});
