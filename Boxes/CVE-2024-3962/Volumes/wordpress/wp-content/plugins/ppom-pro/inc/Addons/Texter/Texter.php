<?php
/***
 * Plugin Name: PPOM Addon For Texter
 * Description: An addon to PPOM
 * Version: 1.0
 * Text Domain: ppom-texter
 * License: GPL2
 */

namespace PPOM_Pro\Addons\Texter;

use PPOM_Pro\Abstract_Addon;

class Texter extends Abstract_Addon {

	function run_hooks() {
		// init texter cpt name nm_ppom_texter
		add_action( 'init', array( $this, 'ppom_design_cpt_register' ) );

		// texter metaboxes add
		add_action( 'add_meta_boxes', array( $this, 'ppom_design_display_metabox' ) );
		add_action( 'add_meta_boxes', array( $this, 'ppom_texter_panel_setting_metabox' ) );

		// texter saving meta hook
		add_action( 'save_post', array( $this, 'save_ppom_design_data' ) );

		// enqueued media script
		add_action( 'admin_enqueue_scripts', [ $this, 'enqueue_admin_scripts' ] );

		add_action( 'ppom_hooks_inputs', array( $this, 'hook_input_scripts' ), 10, 2 );

		// rendering inputs
		add_action( 'ppom_rendering_inputs', array( $this, 'render_input_texter' ), 10, 5 );

		// File path
		add_filter( 'nm_input_class-texter', array( $this, 'addon_path_texter' ), 10, 2 );

		// Loading all input in PRO
		add_filter( 'ppom_all_inputs', array( $this, 'load_addon' ), 10, 2 );

		add_action( 'admin_init', array( $this, 'render_files_in_orders' ) );

		// Adding meta to cart form product page
		add_filter( 'woocommerce_add_cart_item_data', array( $this, 'add_cart_item_data' ), 10, 2 );
		add_action( 'woocommerce_checkout_create_order_line_item', array( $this, 'add_order_item_meta' ), 10, 4 );

		// Show item meta data on cart/checkout pages.
		add_filter( 'woocommerce_get_item_data', array( $this, 'add_item_meta' ), 10, 2 );

	}

	/**
	 * Add texter data to cart data to use it in self::add_order_item_meta
	 *
	 * @param array $cart Current cart item data
	 * @return array modified cart item data.
	 */
	function add_cart_item_data( $cart, $product_id ) {

		if ( isset( $_POST['ppom_texter'] ) ) {

			$cart['ppom_texter'] = $_POST['ppom_texter'];
		}

		return $cart;
	}

	/**
	 * Add some texter data to order item meta and post_meta of the Order.
	 *
	 * @param  \WC_Order_Item_Product $order_item_product Represents an Order Item.
	 * @param  string $cart_item_key Represents a cart item key.
	 * @param  array $values Cart item values.
	 * @param \WC_Order $order Order instance.
	 * @return void
	 */
	public function add_order_item_meta( $order_item_product, $cart_item_key, $values, $order ) {
		if ( ! isset( $values['ppom_texter'] ) ) {
			return;
		}

		$texter_meta = array();
		$product_id  = $values['product_id'];

		foreach ( $values['ppom_texter'] as $key => $val ) {
			$file_name = "{$key}.png";
			$file_name = ppom_file_get_name( $file_name, $product_id );

			$meta_image = ppom_create_thumb_for_meta( $file_name, $product_id );

			// only image thumb
			$key = "texter_image_{$key}";
			$order_item_product->add_meta_data( $key, $meta_image);
		}

		// order meta
		$texter_meta[ $product_id ] = $values['ppom_texter'];
		// All texter info
		$key      = 'texter_all';

		$order->add_meta_data( $key, $texter_meta );
	}

	/**
	 * Add texter meta
	 */
	function add_item_meta( $item_meta, $cart_item ) {

		if ( isset( $cart_item['ppom_texter'] ) ) {

			foreach ( $cart_item['ppom_texter'] as $key => $val ) {

				if ( ! isset( $val['image_data_url'] ) ) {
					continue;
				}

				$product_id = $cart_item['product_id'];

				$file_name = "{$key}.png";
				$file_name = ppom_file_get_name( $file_name, $product_id );

				$hidden = false;


				$image_name  = $this->save_texter_image( $file_name, $val['image_data_url'], $product_id );
				$meta_image  = ppom_create_thumb_for_meta( $file_name, $product_id );
				$item_meta[] = array(
					'name'    => ( $key ),
					'value'   => $val,
					'hidden'  => $hidden,
					'display' => $meta_image,
				);
			}
		}

		return $item_meta;
	}

	/**
	 * Save create texter frontent image
	 */
	function save_texter_image( $file_name, $image_data, $product_id ) {

		$text_destination = ppom_get_dir_path() . $file_name;

		$image_data = base64_decode( preg_replace( '#^data:image/\w+;base64,#i', '', $image_data ) );

		file_put_contents( $text_destination, $image_data );
		if ( file_exists( $text_destination ) ) {

			$file_dir_path  = ppom_get_dir_path();
			$thumb_size     = ppom_get_thumbs_size();
			$thumb_dir_path = ppom_create_image_thumb( $file_dir_path, $file_name, $thumb_size );
		}

		return $text_destination;
	}

	/**
	 *  Load scripts
	 */
	function hook_input_scripts( $field, $data_name ) {

		if ( $field['type'] != 'texter' ) {
			return '';
		}

		if ( $field['type'] == 'texter' ) {
			// ppom_pa($field);
			// font-awesom file
			wp_enqueue_style( 'texter-font-awsm', $this->addon_url . '/css/font-awesome/css/font-awesome.css' );

			// Remodel files
			wp_enqueue_style( 'texter-model', $this->addon_url . '/css/jquery.remodal.css' );
			wp_enqueue_script( 'texter-model', $this->addon_url . '/js/jquery.remodal.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

			// Font select files
			wp_enqueue_style( 'texter-f-family', $this->addon_url . '/css/fontselect-alternate.css' );
			wp_enqueue_script( 'texter-f-family', $this->addon_url . '/js/jquery.fontselect.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

			// Texter frontent files
			wp_enqueue_style( 'texter-style', $this->addon_url . '/css/texter-frontent.css' );
			wp_enqueue_script( 'texter-js', $this->addon_url . '/js/texter-frontent.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

			// Canvas file load
			// wp_enqueue_script('texter-canvas', $this->$this->addon_url."/js/canvas2.js", array('jquery'), PPOM_PRO_VERSION, true);
			wp_enqueue_script( 'texter-canvas', $this->addon_url . '/js/html2canvas.js', array( 'jquery' ), PPOM_PRO_VERSION, true );

			// Iris color picker load
			wp_enqueue_script(
				'iris',
				admin_url( 'js/iris.min.js' ),
				array( 'jquery-ui-draggable', 'jquery-ui-slider', 'jquery-touch-punch' ),
				false,
				1
			);


		}
	}

	/**
	 *  Texter inputs path load
	 */
	function addon_path_texter( $path, $type ) {

		if ( file_exists( $this->addon_path . '/classes/input.texter.php' ) ) {
			$path = $this->addon_path . "/classes/input.{$type}.php";
		}

		return $path;
	}

	/**
	 *  Loading all PRO inputs
	 */
	function load_addon( $inputs_array, $inputObj ) {

		// checking fixedprice addon is enable
		$inputs_array['texter'] = $inputObj->get_input( 'texter' );

		return $inputs_array;
	}

	/**
	 *  Frontent meta rendering
	 */
	function render_input_texter( $meta, $data_name, $classes, $field_label, $options ) {

		if ( $meta['type'] != 'texter' ) {
			return '';
		}

		$meta['id']          = $data_name;
		$input_wrapper_class = 'ppom-texter-frontent-wrapper form-group';
		$input_wrapper_class = apply_filters( 'ppom_input_wrapper_class', $input_wrapper_class, $meta );

		$meta['texter_label'] = $field_label;

		$ppom_template = '';
		$template_vars = array();
		$template_vars = array(
			'texter_meta'  => $meta,
			'texter_class' => $input_wrapper_class,
		);

		$ppom_template = '/shortcode/ppom-textbox-render.php';

		$this->load_template( $ppom_template, $template_vars );
	}

	/**
	 *  Saving texter meta via save hook
	 */
	function save_ppom_design_data( $post_id ) {
		// If this is just a revision, don't send the email.
		if ( wp_is_post_revision( $post_id ) ) {
			return;
		}

		$post_type = get_post_type( $post_id );
		if ( 'nm_ppom_texter' != $post_type ) {
			return;
		}

		if ( isset( $_POST['ppom_design'] ) || isset( $_POST['ppom_image_upload'] ) ) {
			update_post_meta( $post_id, 'ppom_design_meta', $_POST['ppom_design'] );
			update_post_meta( $post_id, 'ppom_image_upload', $_POST['ppom_image_upload'] );
		}
	}

	/**
	 *  Getting last textbox id
	 */
	public static function get_last_box_id( $setting_meta ) {
		return max( array_keys( $setting_meta ) );
	}

	/**
	 *  Texter CPT
	 */
	function ppom_design_cpt_register() {

		$labels = array(
			'name'               => _x( 'PPOM Texter', 'ppom-texter', 'woocommerce-product-addon' ),
			'add_new'            => _x( 'Add New', 'ppom-texter', 'woocommerce-product-addon' ),
			'add_new_item'       => __( 'Add New', 'woocommerce-product-addon' ),
			'edit'               => __( 'Edit us', 'woocommerce-product-addon' ),
			'new_item'           => __( 'New Texter', 'woocommerce-product-addon' ),
			'edit_item'          => __( 'Edit Texter', 'woocommerce-product-addon' ),
			'view'               => __( 'View', 'woocommerce-product-addon' ),
			'view_item'          => __( 'Texter', 'woocommerce-product-addon' ),
			'all_items'          => __( 'Texters', 'woocommerce-product-addon' ),
			'search_items'       => __( 'Search Texters', 'woocommerce-product-addon' ),
			'not_found'          => __( 'No Texter found.', 'woocommerce-product-addon' ),
			'not_found_in_trash' => __( 'No Texters found in Trash.', 'woocommerce-product-addon' ),
			'parent'             => __( 'Parent Texter', 'woocommerce-product-addon' ),
		);

		$args = array(
			'labels'        => $labels,
			'description'   => __( 'PPOM Texters', 'woocommerce-product-addon' ),
			'public'        => true,
			'menu_position' => 20,
			'menu_icon'     => 'dashicons-welcome-learn-more',
			'has_archive'   => true,
			'supports'      => array( 'title' ),
		);

		register_post_type( 'nm_ppom_texter', $args );
	}

	/**
	 *  Add textbox design metabox
	 */
	function ppom_design_display_metabox() {
		add_meta_box(
			'ppom_design_id',
			__( 'PPOM', 'woocommerce-product-addon' ),
			array( $this, 'ppom_design_display' ),
			'nm_ppom_texter',
			'normal',
			'default'
		);
	}

	/**
	 * Callback function textbox design metabox
	 */
	function ppom_design_display() {
		$this->load_template( '/admin/ppom-design.php' );
	}

	/**
	 * Add ppom texter setting panel metabox
	 */
	function ppom_texter_panel_setting_metabox() {
		add_meta_box(
			'ppom_textbox_setting_panel',
			__( 'Textbox Settings', 'woocommerce-product-addon' ),
			array( $this, 'ppom_texter_panel_setting' ),
			'nm_ppom_texter',
			'side',
			'default'
		);
	}

	/**
	 * Setting panel callback function
	 */
	function ppom_texter_panel_setting() {
		$this->load_template( '/admin/textbox-setting.php' );
	}

	/**
	 * Create texter oarder meta on metabox in woocommerce order menu
	 */
	function render_files_in_orders() {

		add_meta_box(
			'texter_order_id',
			__( 'Texter Orders', 'woocommerce-product-addon' ),
			array( $this, 'display_texter_order_meta' ),
			'shop_order',
			'normal',
			'default' 
		);

	}

	/**
	 * Woocommerce order metabox callback function
	 */
	function display_texter_order_meta( $order ) {

		wp_enqueue_style( 'texter-order', $this->addon_url . '/css/order.css' );

		$ppom_template = '';

		$texter_meta = get_post_meta( $order->ID, 'texter_all', true );

		if( $texter_meta === '' ) {
			$texter_meta = array();
		}

		$template_vars = array();
		$template_vars = array(
			'order_meta' => $texter_meta,
			'order'      => $order,
		);

		$ppom_template = '/shortcode/texter-order.php';

		$this->load_template( $ppom_template, $template_vars );
	}

	public function enqueue_admin_scripts() {
		$screen = get_current_screen();

		if ( $screen === null || $screen->id != 'nm_ppom_texter' ) {
			return;
		}

		wp_enqueue_media();

		wp_enqueue_style( 'ppom-texter-font-awsm', $this->addon_url . '/css/font-awesome/css/font-awesome.css' );
		wp_enqueue_style( 'ppom-texter-design-style', $this->addon_url . '/css/texter-admin.css' );
		wp_enqueue_script(
			'ppom-texter-design-js',
			$this->addon_url . '/js/texter-admin.js',
			array(
				'jquery',
				'jquery-ui-core',
				'jquery-ui-resizable',
				'wp-color-picker',
			),
			PPOM_PRO_VERSION 
		);
		wp_enqueue_style( 'ppom-texter-jquery-ui-css', $this->addon_url . '/css/jquery-ui.css' );

		// WordPress color picker
		wp_enqueue_style( 'wp-color-picker' );
		wp_enqueue_script( 'wp-color-picker' );
	}
}
